
STM32_Audio_CS432L_I2C_only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b50  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005ce8  08005ce8  00006ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef0  08005ef0  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ef0  08005ef0  00006ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ef8  08005ef8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef8  08005ef8  00006ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005efc  08005efc  00006efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005f00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001080  20000010  08005f10  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001090  08005f10  00007090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab23  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f40  00000000  00000000  00011b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00013aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000078f  00000000  00000000  00014480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016065  00000000  00000000  00014c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd02  00000000  00000000  0002ac74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e4f  00000000  00000000  00038976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c07c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b8c  00000000  00000000  000c0808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000c3394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005cd0 	.word	0x08005cd0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005cd0 	.word	0x08005cd0

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	@ 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2iz>:
 80008b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008bc:	d215      	bcs.n	80008ea <__aeabi_d2iz+0x36>
 80008be:	d511      	bpl.n	80008e4 <__aeabi_d2iz+0x30>
 80008c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c8:	d912      	bls.n	80008f0 <__aeabi_d2iz+0x3c>
 80008ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008da:	fa23 f002 	lsr.w	r0, r3, r2
 80008de:	bf18      	it	ne
 80008e0:	4240      	negne	r0, r0
 80008e2:	4770      	bx	lr
 80008e4:	f04f 0000 	mov.w	r0, #0
 80008e8:	4770      	bx	lr
 80008ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ee:	d105      	bne.n	80008fc <__aeabi_d2iz+0x48>
 80008f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008f4:	bf08      	it	eq
 80008f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008fa:	4770      	bx	lr
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop

08000904 <__aeabi_uldivmod>:
 8000904:	b953      	cbnz	r3, 800091c <__aeabi_uldivmod+0x18>
 8000906:	b94a      	cbnz	r2, 800091c <__aeabi_uldivmod+0x18>
 8000908:	2900      	cmp	r1, #0
 800090a:	bf08      	it	eq
 800090c:	2800      	cmpeq	r0, #0
 800090e:	bf1c      	itt	ne
 8000910:	f04f 31ff 	movne.w	r1, #4294967295
 8000914:	f04f 30ff 	movne.w	r0, #4294967295
 8000918:	f000 b96a 	b.w	8000bf0 <__aeabi_idiv0>
 800091c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000920:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000924:	f000 f806 	bl	8000934 <__udivmoddi4>
 8000928:	f8dd e004 	ldr.w	lr, [sp, #4]
 800092c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000930:	b004      	add	sp, #16
 8000932:	4770      	bx	lr

08000934 <__udivmoddi4>:
 8000934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000938:	9d08      	ldr	r5, [sp, #32]
 800093a:	460c      	mov	r4, r1
 800093c:	2b00      	cmp	r3, #0
 800093e:	d14e      	bne.n	80009de <__udivmoddi4+0xaa>
 8000940:	4694      	mov	ip, r2
 8000942:	458c      	cmp	ip, r1
 8000944:	4686      	mov	lr, r0
 8000946:	fab2 f282 	clz	r2, r2
 800094a:	d962      	bls.n	8000a12 <__udivmoddi4+0xde>
 800094c:	b14a      	cbz	r2, 8000962 <__udivmoddi4+0x2e>
 800094e:	f1c2 0320 	rsb	r3, r2, #32
 8000952:	4091      	lsls	r1, r2
 8000954:	fa20 f303 	lsr.w	r3, r0, r3
 8000958:	fa0c fc02 	lsl.w	ip, ip, r2
 800095c:	4319      	orrs	r1, r3
 800095e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000962:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000966:	fa1f f68c 	uxth.w	r6, ip
 800096a:	fbb1 f4f7 	udiv	r4, r1, r7
 800096e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000972:	fb07 1114 	mls	r1, r7, r4, r1
 8000976:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800097a:	fb04 f106 	mul.w	r1, r4, r6
 800097e:	4299      	cmp	r1, r3
 8000980:	d90a      	bls.n	8000998 <__udivmoddi4+0x64>
 8000982:	eb1c 0303 	adds.w	r3, ip, r3
 8000986:	f104 30ff 	add.w	r0, r4, #4294967295
 800098a:	f080 8112 	bcs.w	8000bb2 <__udivmoddi4+0x27e>
 800098e:	4299      	cmp	r1, r3
 8000990:	f240 810f 	bls.w	8000bb2 <__udivmoddi4+0x27e>
 8000994:	3c02      	subs	r4, #2
 8000996:	4463      	add	r3, ip
 8000998:	1a59      	subs	r1, r3, r1
 800099a:	fa1f f38e 	uxth.w	r3, lr
 800099e:	fbb1 f0f7 	udiv	r0, r1, r7
 80009a2:	fb07 1110 	mls	r1, r7, r0, r1
 80009a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009aa:	fb00 f606 	mul.w	r6, r0, r6
 80009ae:	429e      	cmp	r6, r3
 80009b0:	d90a      	bls.n	80009c8 <__udivmoddi4+0x94>
 80009b2:	eb1c 0303 	adds.w	r3, ip, r3
 80009b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009ba:	f080 80fc 	bcs.w	8000bb6 <__udivmoddi4+0x282>
 80009be:	429e      	cmp	r6, r3
 80009c0:	f240 80f9 	bls.w	8000bb6 <__udivmoddi4+0x282>
 80009c4:	4463      	add	r3, ip
 80009c6:	3802      	subs	r0, #2
 80009c8:	1b9b      	subs	r3, r3, r6
 80009ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009ce:	2100      	movs	r1, #0
 80009d0:	b11d      	cbz	r5, 80009da <__udivmoddi4+0xa6>
 80009d2:	40d3      	lsrs	r3, r2
 80009d4:	2200      	movs	r2, #0
 80009d6:	e9c5 3200 	strd	r3, r2, [r5]
 80009da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009de:	428b      	cmp	r3, r1
 80009e0:	d905      	bls.n	80009ee <__udivmoddi4+0xba>
 80009e2:	b10d      	cbz	r5, 80009e8 <__udivmoddi4+0xb4>
 80009e4:	e9c5 0100 	strd	r0, r1, [r5]
 80009e8:	2100      	movs	r1, #0
 80009ea:	4608      	mov	r0, r1
 80009ec:	e7f5      	b.n	80009da <__udivmoddi4+0xa6>
 80009ee:	fab3 f183 	clz	r1, r3
 80009f2:	2900      	cmp	r1, #0
 80009f4:	d146      	bne.n	8000a84 <__udivmoddi4+0x150>
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	d302      	bcc.n	8000a00 <__udivmoddi4+0xcc>
 80009fa:	4290      	cmp	r0, r2
 80009fc:	f0c0 80f0 	bcc.w	8000be0 <__udivmoddi4+0x2ac>
 8000a00:	1a86      	subs	r6, r0, r2
 8000a02:	eb64 0303 	sbc.w	r3, r4, r3
 8000a06:	2001      	movs	r0, #1
 8000a08:	2d00      	cmp	r5, #0
 8000a0a:	d0e6      	beq.n	80009da <__udivmoddi4+0xa6>
 8000a0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a10:	e7e3      	b.n	80009da <__udivmoddi4+0xa6>
 8000a12:	2a00      	cmp	r2, #0
 8000a14:	f040 8090 	bne.w	8000b38 <__udivmoddi4+0x204>
 8000a18:	eba1 040c 	sub.w	r4, r1, ip
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	fa1f f78c 	uxth.w	r7, ip
 8000a24:	2101      	movs	r1, #1
 8000a26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a36:	fb07 f006 	mul.w	r0, r7, r6
 8000a3a:	4298      	cmp	r0, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x11c>
 8000a3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0x11a>
 8000a48:	4298      	cmp	r0, r3
 8000a4a:	f200 80cd 	bhi.w	8000be8 <__udivmoddi4+0x2b4>
 8000a4e:	4626      	mov	r6, r4
 8000a50:	1a1c      	subs	r4, r3, r0
 8000a52:	fa1f f38e 	uxth.w	r3, lr
 8000a56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a62:	fb00 f707 	mul.w	r7, r0, r7
 8000a66:	429f      	cmp	r7, r3
 8000a68:	d908      	bls.n	8000a7c <__udivmoddi4+0x148>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a72:	d202      	bcs.n	8000a7a <__udivmoddi4+0x146>
 8000a74:	429f      	cmp	r7, r3
 8000a76:	f200 80b0 	bhi.w	8000bda <__udivmoddi4+0x2a6>
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	1bdb      	subs	r3, r3, r7
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	e7a5      	b.n	80009d0 <__udivmoddi4+0x9c>
 8000a84:	f1c1 0620 	rsb	r6, r1, #32
 8000a88:	408b      	lsls	r3, r1
 8000a8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000a8e:	431f      	orrs	r7, r3
 8000a90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a94:	fa04 f301 	lsl.w	r3, r4, r1
 8000a98:	ea43 030c 	orr.w	r3, r3, ip
 8000a9c:	40f4      	lsrs	r4, r6
 8000a9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000aa2:	0c38      	lsrs	r0, r7, #16
 8000aa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000aa8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aac:	fa1f fc87 	uxth.w	ip, r7
 8000ab0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ab4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab8:	fb0e f90c 	mul.w	r9, lr, ip
 8000abc:	45a1      	cmp	r9, r4
 8000abe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ac2:	d90a      	bls.n	8000ada <__udivmoddi4+0x1a6>
 8000ac4:	193c      	adds	r4, r7, r4
 8000ac6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000aca:	f080 8084 	bcs.w	8000bd6 <__udivmoddi4+0x2a2>
 8000ace:	45a1      	cmp	r9, r4
 8000ad0:	f240 8081 	bls.w	8000bd6 <__udivmoddi4+0x2a2>
 8000ad4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ad8:	443c      	add	r4, r7
 8000ada:	eba4 0409 	sub.w	r4, r4, r9
 8000ade:	fa1f f983 	uxth.w	r9, r3
 8000ae2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ae6:	fb00 4413 	mls	r4, r0, r3, r4
 8000aea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000af2:	45a4      	cmp	ip, r4
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x1d2>
 8000af6:	193c      	adds	r4, r7, r4
 8000af8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000afc:	d267      	bcs.n	8000bce <__udivmoddi4+0x29a>
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	d965      	bls.n	8000bce <__udivmoddi4+0x29a>
 8000b02:	3b02      	subs	r3, #2
 8000b04:	443c      	add	r4, r7
 8000b06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b0e:	eba4 040c 	sub.w	r4, r4, ip
 8000b12:	429c      	cmp	r4, r3
 8000b14:	46ce      	mov	lr, r9
 8000b16:	469c      	mov	ip, r3
 8000b18:	d351      	bcc.n	8000bbe <__udivmoddi4+0x28a>
 8000b1a:	d04e      	beq.n	8000bba <__udivmoddi4+0x286>
 8000b1c:	b155      	cbz	r5, 8000b34 <__udivmoddi4+0x200>
 8000b1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b22:	eb64 040c 	sbc.w	r4, r4, ip
 8000b26:	fa04 f606 	lsl.w	r6, r4, r6
 8000b2a:	40cb      	lsrs	r3, r1
 8000b2c:	431e      	orrs	r6, r3
 8000b2e:	40cc      	lsrs	r4, r1
 8000b30:	e9c5 6400 	strd	r6, r4, [r5]
 8000b34:	2100      	movs	r1, #0
 8000b36:	e750      	b.n	80009da <__udivmoddi4+0xa6>
 8000b38:	f1c2 0320 	rsb	r3, r2, #32
 8000b3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b44:	fa24 f303 	lsr.w	r3, r4, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	430c      	orrs	r4, r1
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b54:	fa1f f78c 	uxth.w	r7, ip
 8000b58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000b60:	0c23      	lsrs	r3, r4, #16
 8000b62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b66:	fb00 f107 	mul.w	r1, r0, r7
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0x24c>
 8000b6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b76:	d22c      	bcs.n	8000bd2 <__udivmoddi4+0x29e>
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d92a      	bls.n	8000bd2 <__udivmoddi4+0x29e>
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b88:	fb08 3311 	mls	r3, r8, r1, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb01 f307 	mul.w	r3, r1, r7
 8000b94:	42a3      	cmp	r3, r4
 8000b96:	d908      	bls.n	8000baa <__udivmoddi4+0x276>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ba0:	d213      	bcs.n	8000bca <__udivmoddi4+0x296>
 8000ba2:	42a3      	cmp	r3, r4
 8000ba4:	d911      	bls.n	8000bca <__udivmoddi4+0x296>
 8000ba6:	3902      	subs	r1, #2
 8000ba8:	4464      	add	r4, ip
 8000baa:	1ae4      	subs	r4, r4, r3
 8000bac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bb0:	e739      	b.n	8000a26 <__udivmoddi4+0xf2>
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	e6f0      	b.n	8000998 <__udivmoddi4+0x64>
 8000bb6:	4608      	mov	r0, r1
 8000bb8:	e706      	b.n	80009c8 <__udivmoddi4+0x94>
 8000bba:	45c8      	cmp	r8, r9
 8000bbc:	d2ae      	bcs.n	8000b1c <__udivmoddi4+0x1e8>
 8000bbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bc6:	3801      	subs	r0, #1
 8000bc8:	e7a8      	b.n	8000b1c <__udivmoddi4+0x1e8>
 8000bca:	4631      	mov	r1, r6
 8000bcc:	e7ed      	b.n	8000baa <__udivmoddi4+0x276>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	e799      	b.n	8000b06 <__udivmoddi4+0x1d2>
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	e7d4      	b.n	8000b80 <__udivmoddi4+0x24c>
 8000bd6:	46d6      	mov	lr, sl
 8000bd8:	e77f      	b.n	8000ada <__udivmoddi4+0x1a6>
 8000bda:	4463      	add	r3, ip
 8000bdc:	3802      	subs	r0, #2
 8000bde:	e74d      	b.n	8000a7c <__udivmoddi4+0x148>
 8000be0:	4606      	mov	r6, r0
 8000be2:	4623      	mov	r3, r4
 8000be4:	4608      	mov	r0, r1
 8000be6:	e70f      	b.n	8000a08 <__udivmoddi4+0xd4>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	e730      	b.n	8000a50 <__udivmoddi4+0x11c>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_idiv0>:
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000c00:	4a09      	ldr	r2, [pc, #36]	@ (8000c28 <write_register+0x34>)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <write_register+0x34>)
 8000c0c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000c0e:	2364      	movs	r3, #100	@ 0x64
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2302      	movs	r3, #2
 8000c14:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <write_register+0x34>)
 8000c16:	2194      	movs	r1, #148	@ 0x94
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <write_register+0x38>)
 8000c1a:	f001 fdc7 	bl	80027ac <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000002c 	.word	0x2000002c
 8000c2c:	20000030 	.word	0x20000030

08000c30 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c6c <read_register+0x3c>)
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000c42:	2364      	movs	r3, #100	@ 0x64
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <read_register+0x3c>)
 8000c4a:	2194      	movs	r1, #148	@ 0x94
 8000c4c:	4808      	ldr	r0, [pc, #32]	@ (8000c70 <read_register+0x40>)
 8000c4e:	f001 fdad 	bl	80027ac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000c52:	2364      	movs	r3, #100	@ 0x64
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2301      	movs	r3, #1
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	2194      	movs	r1, #148	@ 0x94
 8000c5c:	4804      	ldr	r0, [pc, #16]	@ (8000c70 <read_register+0x40>)
 8000c5e:	f001 fea3 	bl	80029a8 <HAL_I2C_Master_Receive>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000002c 	.word	0x2000002c
 8000c70:	20000030 	.word	0x20000030

08000c74 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000c74:	b084      	sub	sp, #16
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	f107 0c08 	add.w	ip, r7, #8
 8000c7e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000c82:	4b81      	ldr	r3, [pc, #516]	@ (8000e88 <CS43_Init+0x214>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e88 <CS43_Init+0x214>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	69da      	ldr	r2, [r3, #28]
 8000c90:	4b7d      	ldr	r3, [pc, #500]	@ (8000e88 <CS43_Init+0x214>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c98:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2110      	movs	r1, #16
 8000c9e:	487b      	ldr	r0, [pc, #492]	@ (8000e8c <CS43_Init+0x218>)
 8000ca0:	f001 fc26 	bl	80024f0 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000ca4:	4b7a      	ldr	r3, [pc, #488]	@ (8000e90 <CS43_Init+0x21c>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	2254      	movs	r2, #84	@ 0x54
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f003 ffce 	bl	8004c50 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000cb4:	4b77      	ldr	r3, [pc, #476]	@ (8000e94 <CS43_Init+0x220>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000cba:	4976      	ldr	r1, [pc, #472]	@ (8000e94 <CS43_Init+0x220>)
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f7ff ff99 	bl	8000bf4 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000cc2:	4b74      	ldr	r3, [pc, #464]	@ (8000e94 <CS43_Init+0x220>)
 8000cc4:	2280      	movs	r2, #128	@ 0x80
 8000cc6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000cc8:	4b72      	ldr	r3, [pc, #456]	@ (8000e94 <CS43_Init+0x220>)
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	f043 0320 	orr.w	r3, r3, #32
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b70      	ldr	r3, [pc, #448]	@ (8000e94 <CS43_Init+0x220>)
 8000cd4:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8000e94 <CS43_Init+0x220>)
 8000cd8:	785b      	ldrb	r3, [r3, #1]
 8000cda:	f043 030c 	orr.w	r3, r3, #12
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8000e94 <CS43_Init+0x220>)
 8000ce2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000ce4:	4b6b      	ldr	r3, [pc, #428]	@ (8000e94 <CS43_Init+0x220>)
 8000ce6:	785b      	ldrb	r3, [r3, #1]
 8000ce8:	f043 0303 	orr.w	r3, r3, #3
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b69      	ldr	r3, [pc, #420]	@ (8000e94 <CS43_Init+0x220>)
 8000cf0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000cf2:	4969      	ldr	r1, [pc, #420]	@ (8000e98 <CS43_Init+0x224>)
 8000cf4:	2004      	movs	r0, #4
 8000cf6:	f7ff ff7d 	bl	8000bf4 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000cfa:	4b66      	ldr	r3, [pc, #408]	@ (8000e94 <CS43_Init+0x220>)
 8000cfc:	2280      	movs	r2, #128	@ 0x80
 8000cfe:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000d00:	4965      	ldr	r1, [pc, #404]	@ (8000e98 <CS43_Init+0x224>)
 8000d02:	2005      	movs	r0, #5
 8000d04:	f7ff ff76 	bl	8000bf4 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000d08:	4962      	ldr	r1, [pc, #392]	@ (8000e94 <CS43_Init+0x220>)
 8000d0a:	2006      	movs	r0, #6
 8000d0c:	f7ff ff90 	bl	8000c30 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000d10:	4b60      	ldr	r3, [pc, #384]	@ (8000e94 <CS43_Init+0x220>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	f003 0320 	and.w	r3, r3, #32
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b5e      	ldr	r3, [pc, #376]	@ (8000e94 <CS43_Init+0x220>)
 8000d1c:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e94 <CS43_Init+0x220>)
 8000d20:	785b      	ldrb	r3, [r3, #1]
 8000d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b5a      	ldr	r3, [pc, #360]	@ (8000e94 <CS43_Init+0x220>)
 8000d2a:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000d2c:	4b59      	ldr	r3, [pc, #356]	@ (8000e94 <CS43_Init+0x220>)
 8000d2e:	785b      	ldrb	r3, [r3, #1]
 8000d30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b57      	ldr	r3, [pc, #348]	@ (8000e94 <CS43_Init+0x220>)
 8000d38:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000d3a:	4b56      	ldr	r3, [pc, #344]	@ (8000e94 <CS43_Init+0x220>)
 8000d3c:	785b      	ldrb	r3, [r3, #1]
 8000d3e:	f023 0310 	bic.w	r3, r3, #16
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b53      	ldr	r3, [pc, #332]	@ (8000e94 <CS43_Init+0x220>)
 8000d46:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000d48:	4b52      	ldr	r3, [pc, #328]	@ (8000e94 <CS43_Init+0x220>)
 8000d4a:	785b      	ldrb	r3, [r3, #1]
 8000d4c:	f023 0304 	bic.w	r3, r3, #4
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b50      	ldr	r3, [pc, #320]	@ (8000e94 <CS43_Init+0x220>)
 8000d54:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000d56:	4b4f      	ldr	r3, [pc, #316]	@ (8000e94 <CS43_Init+0x220>)
 8000d58:	785b      	ldrb	r3, [r3, #1]
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b4c      	ldr	r3, [pc, #304]	@ (8000e94 <CS43_Init+0x220>)
 8000d62:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000d64:	4b4b      	ldr	r3, [pc, #300]	@ (8000e94 <CS43_Init+0x220>)
 8000d66:	785b      	ldrb	r3, [r3, #1]
 8000d68:	f043 0303 	orr.w	r3, r3, #3
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b49      	ldr	r3, [pc, #292]	@ (8000e94 <CS43_Init+0x220>)
 8000d70:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000d72:	4949      	ldr	r1, [pc, #292]	@ (8000e98 <CS43_Init+0x224>)
 8000d74:	2006      	movs	r0, #6
 8000d76:	f7ff ff3d 	bl	8000bf4 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000d7a:	4947      	ldr	r1, [pc, #284]	@ (8000e98 <CS43_Init+0x224>)
 8000d7c:	2008      	movs	r0, #8
 8000d7e:	f7ff ff57 	bl	8000c30 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000d82:	4b44      	ldr	r3, [pc, #272]	@ (8000e94 <CS43_Init+0x220>)
 8000d84:	785b      	ldrb	r3, [r3, #1]
 8000d86:	f023 030f 	bic.w	r3, r3, #15
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b41      	ldr	r3, [pc, #260]	@ (8000e94 <CS43_Init+0x220>)
 8000d8e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000d90:	4b40      	ldr	r3, [pc, #256]	@ (8000e94 <CS43_Init+0x220>)
 8000d92:	785b      	ldrb	r3, [r3, #1]
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e94 <CS43_Init+0x220>)
 8000d9c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000d9e:	493e      	ldr	r1, [pc, #248]	@ (8000e98 <CS43_Init+0x224>)
 8000da0:	2008      	movs	r0, #8
 8000da2:	f7ff ff27 	bl	8000bf4 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000da6:	493c      	ldr	r1, [pc, #240]	@ (8000e98 <CS43_Init+0x224>)
 8000da8:	2009      	movs	r0, #9
 8000daa:	f7ff ff41 	bl	8000c30 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000dae:	4b39      	ldr	r3, [pc, #228]	@ (8000e94 <CS43_Init+0x220>)
 8000db0:	785b      	ldrb	r3, [r3, #1]
 8000db2:	f023 030f 	bic.w	r3, r3, #15
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b36      	ldr	r3, [pc, #216]	@ (8000e94 <CS43_Init+0x220>)
 8000dba:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000dbc:	4b35      	ldr	r3, [pc, #212]	@ (8000e94 <CS43_Init+0x220>)
 8000dbe:	785b      	ldrb	r3, [r3, #1]
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b33      	ldr	r3, [pc, #204]	@ (8000e94 <CS43_Init+0x220>)
 8000dc8:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000dca:	4933      	ldr	r1, [pc, #204]	@ (8000e98 <CS43_Init+0x224>)
 8000dcc:	2009      	movs	r0, #9
 8000dce:	f7ff ff11 	bl	8000bf4 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000dd2:	4931      	ldr	r1, [pc, #196]	@ (8000e98 <CS43_Init+0x224>)
 8000dd4:	200e      	movs	r0, #14
 8000dd6:	f7ff ff2b 	bl	8000c30 <read_register>
	if(outputMode == MODE_ANALOG_AUDIO)
 8000dda:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d123      	bne.n	8000e2a <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000de2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e94 <CS43_Init+0x220>)
 8000de4:	785b      	ldrb	r3, [r3, #1]
 8000de6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b29      	ldr	r3, [pc, #164]	@ (8000e94 <CS43_Init+0x220>)
 8000dee:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000df0:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <CS43_Init+0x220>)
 8000df2:	785b      	ldrb	r3, [r3, #1]
 8000df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <CS43_Init+0x220>)
 8000dfc:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8000dfe:	4b25      	ldr	r3, [pc, #148]	@ (8000e94 <CS43_Init+0x220>)
 8000e00:	785b      	ldrb	r3, [r3, #1]
 8000e02:	f023 0320 	bic.w	r3, r3, #32
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <CS43_Init+0x220>)
 8000e0a:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000e0c:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <CS43_Init+0x220>)
 8000e0e:	785b      	ldrb	r3, [r3, #1]
 8000e10:	f023 0310 	bic.w	r3, r3, #16
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <CS43_Init+0x220>)
 8000e18:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <CS43_Init+0x220>)
 8000e1c:	785b      	ldrb	r3, [r3, #1]
 8000e1e:	f023 0308 	bic.w	r3, r3, #8
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <CS43_Init+0x220>)
 8000e26:	705a      	strb	r2, [r3, #1]
 8000e28:	e006      	b.n	8000e38 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 8000e2a:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <CS43_Init+0x220>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000e38:	4917      	ldr	r1, [pc, #92]	@ (8000e98 <CS43_Init+0x224>)
 8000e3a:	200e      	movs	r0, #14
 8000e3c:	f7ff feda 	bl	8000bf4 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000e40:	4915      	ldr	r1, [pc, #84]	@ (8000e98 <CS43_Init+0x224>)
 8000e42:	200f      	movs	r0, #15
 8000e44:	f7ff fef4 	bl	8000c30 <read_register>
	iData[1] = 0x00;
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <CS43_Init+0x220>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000e4e:	4912      	ldr	r1, [pc, #72]	@ (8000e98 <CS43_Init+0x224>)
 8000e50:	200f      	movs	r0, #15
 8000e52:	f7ff fecf 	bl	8000bf4 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000e56:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <CS43_Init+0x220>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000e5c:	490e      	ldr	r1, [pc, #56]	@ (8000e98 <CS43_Init+0x224>)
 8000e5e:	2014      	movs	r0, #20
 8000e60:	f7ff fec8 	bl	8000bf4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000e64:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <CS43_Init+0x224>)
 8000e66:	2015      	movs	r0, #21
 8000e68:	f7ff fec4 	bl	8000bf4 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000e6c:	490a      	ldr	r1, [pc, #40]	@ (8000e98 <CS43_Init+0x224>)
 8000e6e:	201a      	movs	r0, #26
 8000e70:	f7ff fec0 	bl	8000bf4 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000e74:	4908      	ldr	r1, [pc, #32]	@ (8000e98 <CS43_Init+0x224>)
 8000e76:	201b      	movs	r0, #27
 8000e78:	f7ff febc 	bl	8000bf4 <write_register>
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e84:	b004      	add	sp, #16
 8000e86:	4770      	bx	lr
 8000e88:	200000d8 	.word	0x200000d8
 8000e8c:	40020c00 	.word	0x40020c00
 8000e90:	20000030 	.word	0x20000030
 8000e94:	2000002c 	.word	0x2000002c
 8000e98:	2000002d 	.word	0x2000002d

08000e9c <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d837      	bhi.n	8000f1c <CS43_Enable_RightLeft+0x80>
 8000eac:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb4 <CS43_Enable_RightLeft+0x18>)
 8000eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb2:	bf00      	nop
 8000eb4:	08000ec5 	.word	0x08000ec5
 8000eb8:	08000edb 	.word	0x08000edb
 8000ebc:	08000ef1 	.word	0x08000ef1
 8000ec0:	08000f07 	.word	0x08000f07
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000ec4:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000ec6:	22c0      	movs	r2, #192	@ 0xc0
 8000ec8:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000eca:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000ecc:	785b      	ldrb	r3, [r3, #1]
 8000ece:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000ed6:	705a      	strb	r2, [r3, #1]
			break;
 8000ed8:	e021      	b.n	8000f1e <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000edc:	2280      	movs	r2, #128	@ 0x80
 8000ede:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000ee2:	785b      	ldrb	r3, [r3, #1]
 8000ee4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000eec:	705a      	strb	r2, [r3, #1]
			break;
 8000eee:	e016      	b.n	8000f1e <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000ef2:	22c0      	movs	r2, #192	@ 0xc0
 8000ef4:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000ef8:	785b      	ldrb	r3, [r3, #1]
 8000efa:	f043 0320 	orr.w	r3, r3, #32
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000f02:	705a      	strb	r2, [r3, #1]
			break;
 8000f04:	e00b      	b.n	8000f1e <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000f06:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000f08:	2280      	movs	r2, #128	@ 0x80
 8000f0a:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000f0e:	785b      	ldrb	r3, [r3, #1]
 8000f10:	f043 0320 	orr.w	r3, r3, #32
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000f18:	705a      	strb	r2, [r3, #1]
			break;
 8000f1a:	e000      	b.n	8000f1e <CS43_Enable_RightLeft+0x82>
		default:
			break;
 8000f1c:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000f20:	785b      	ldrb	r3, [r3, #1]
 8000f22:	f043 030c 	orr.w	r3, r3, #12
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000f2a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000f2e:	785b      	ldrb	r3, [r3, #1]
 8000f30:	f043 0303 	orr.w	r3, r3, #3
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <CS43_Enable_RightLeft+0xb0>)
 8000f38:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000f3a:	4905      	ldr	r1, [pc, #20]	@ (8000f50 <CS43_Enable_RightLeft+0xb4>)
 8000f3c:	2004      	movs	r0, #4
 8000f3e:	f7ff fe59 	bl	8000bf4 <write_register>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000002c 	.word	0x2000002c
 8000f50:	2000002d 	.word	0x2000002d

08000f54 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	3b32      	subs	r3, #50	@ 0x32
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8000f72:	4a16      	ldr	r2, [pc, #88]	@ (8000fcc <CS43_SetVolume+0x78>)
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000f78:	4915      	ldr	r1, [pc, #84]	@ (8000fd0 <CS43_SetVolume+0x7c>)
 8000f7a:	2014      	movs	r0, #20
 8000f7c:	f7ff fe3a 	bl	8000bf4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000f80:	4913      	ldr	r1, [pc, #76]	@ (8000fd0 <CS43_SetVolume+0x7c>)
 8000f82:	2015      	movs	r0, #21
 8000f84:	f7ff fe36 	bl	8000bf4 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2b64      	cmp	r3, #100	@ 0x64
 8000f8c:	d80e      	bhi.n	8000fac <CS43_SetVolume+0x58>
 8000f8e:	79fa      	ldrb	r2, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd4 <CS43_SetVolume+0x80>)
 8000f9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f9e:	1152      	asrs	r2, r2, #5
 8000fa0:	17db      	asrs	r3, r3, #31
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	3b18      	subs	r3, #24
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	e000      	b.n	8000fae <CS43_SetVolume+0x5a>
 8000fac:	2318      	movs	r3, #24
 8000fae:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <CS43_SetVolume+0x78>)
 8000fb0:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8000fb2:	4907      	ldr	r1, [pc, #28]	@ (8000fd0 <CS43_SetVolume+0x7c>)
 8000fb4:	2020      	movs	r0, #32
 8000fb6:	f7ff fe1d 	bl	8000bf4 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000fba:	4905      	ldr	r1, [pc, #20]	@ (8000fd0 <CS43_SetVolume+0x7c>)
 8000fbc:	2021      	movs	r0, #33	@ 0x21
 8000fbe:	f7ff fe19 	bl	8000bf4 <write_register>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000002c 	.word	0x2000002c
 8000fd0:	2000002d 	.word	0x2000002d
 8000fd4:	51eb851f 	.word	0x51eb851f

08000fd8 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <CS43_Start+0x7c>)
 8000fde:	2299      	movs	r2, #153	@ 0x99
 8000fe0:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000fe2:	491d      	ldr	r1, [pc, #116]	@ (8001058 <CS43_Start+0x80>)
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff fe05 	bl	8000bf4 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <CS43_Start+0x7c>)
 8000fec:	2280      	movs	r2, #128	@ 0x80
 8000fee:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 8000ff0:	4919      	ldr	r1, [pc, #100]	@ (8001058 <CS43_Start+0x80>)
 8000ff2:	2047      	movs	r0, #71	@ 0x47
 8000ff4:	f7ff fdfe 	bl	8000bf4 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000ff8:	4917      	ldr	r1, [pc, #92]	@ (8001058 <CS43_Start+0x80>)
 8000ffa:	2032      	movs	r0, #50	@ 0x32
 8000ffc:	f7ff fe18 	bl	8000c30 <read_register>
	iData[1] |= 0x80;
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <CS43_Start+0x7c>)
 8001002:	785b      	ldrb	r3, [r3, #1]
 8001004:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <CS43_Start+0x7c>)
 800100c:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800100e:	4912      	ldr	r1, [pc, #72]	@ (8001058 <CS43_Start+0x80>)
 8001010:	2032      	movs	r0, #50	@ 0x32
 8001012:	f7ff fdef 	bl	8000bf4 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8001016:	4910      	ldr	r1, [pc, #64]	@ (8001058 <CS43_Start+0x80>)
 8001018:	2032      	movs	r0, #50	@ 0x32
 800101a:	f7ff fe09 	bl	8000c30 <read_register>
	iData[1] &= ~(0x80);
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <CS43_Start+0x7c>)
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <CS43_Start+0x7c>)
 800102a:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800102c:	490a      	ldr	r1, [pc, #40]	@ (8001058 <CS43_Start+0x80>)
 800102e:	2032      	movs	r0, #50	@ 0x32
 8001030:	f7ff fde0 	bl	8000bf4 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <CS43_Start+0x7c>)
 8001036:	2200      	movs	r2, #0
 8001038:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800103a:	4907      	ldr	r1, [pc, #28]	@ (8001058 <CS43_Start+0x80>)
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff fdd9 	bl	8000bf4 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8001042:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <CS43_Start+0x7c>)
 8001044:	229e      	movs	r2, #158	@ 0x9e
 8001046:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8001048:	4903      	ldr	r1, [pc, #12]	@ (8001058 <CS43_Start+0x80>)
 800104a:	2002      	movs	r0, #2
 800104c:	f7ff fdd2 	bl	8000bf4 <write_register>
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000002c 	.word	0x2000002c
 8001058:	2000002d 	.word	0x2000002d
 800105c:	00000000 	.word	0x00000000

08001060 <process_buffer>:
int16_t i2s_dma_buffer[I2S_DMA_BUFFER_SIZE];
int nsamples = sizeof(i2s_dma_buffer) / sizeof(i2s_dma_buffer[0]);


void process_buffer(int16_t* buff)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
    dma_processing = 1;
 800106c:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <process_buffer+0xb8>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
    double t = 0.0f;
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(i < 2*I2S_DMA_BUFFER_SAMPLES) {
 800107e:	e03c      	b.n	80010fa <process_buffer+0x9a>
//           buff[i] = 100*sin(t);
//           buff[i+1] = buff[i];
//           t = t + (2*PI/I2S_DMA_BUFFER_SAMPLES);
//           i += 2;

		   buff[i] = 100*sin(t);
 8001080:	ed97 0b02 	vldr	d0, [r7, #8]
 8001084:	f003 fdf4 	bl	8004c70 <sin>
 8001088:	ec51 0b10 	vmov	r0, r1, d0
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	4b22      	ldr	r3, [pc, #136]	@ (800111c <process_buffer+0xbc>)
 8001092:	f7ff f8a1 	bl	80001d8 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	18d4      	adds	r4, r2, r3
 80010a6:	f7ff fc05 	bl	80008b4 <__aeabi_d2iz>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	8023      	strh	r3, [r4, #0]
		   buff[i+1] = buff[i];// buff[i];
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	441a      	add	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3301      	adds	r3, #1
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	440b      	add	r3, r1
 80010c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010c6:	801a      	strh	r2, [r3, #0]
		   t = (2*PI*(i)*(500.0/48000.0));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001120 <process_buffer+0xc0>
 80010d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010da:	ee17 0a90 	vmov	r0, s15
 80010de:	f7ff fb09 	bl	80006f4 <__aeabi_f2d>
 80010e2:	a30b      	add	r3, pc, #44	@ (adr r3, 8001110 <process_buffer+0xb0>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff f876 	bl	80001d8 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
		   i += 2;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3302      	adds	r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
    while(i < 2*I2S_DMA_BUFFER_SAMPLES) {
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8001100:	dbbe      	blt.n	8001080 <process_buffer+0x20>
    }
    dma_processing = 0;
 8001102:	4b05      	ldr	r3, [pc, #20]	@ (8001118 <process_buffer+0xb8>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}
 8001110:	55555555 	.word	0x55555555
 8001114:	3f855555 	.word	0x3f855555
 8001118:	20000180 	.word	0x20000180
 800111c:	40590000 	.word	0x40590000
 8001120:	40c90fd0 	.word	0x40c90fd0

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b097      	sub	sp, #92	@ 0x5c
 8001128:	af12      	add	r7, sp, #72	@ 0x48

  /* USER CODE BEGIN 1 */
	sample_dt = F_OUT/F_SAMPLE;
 800112a:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <main+0x88>)
 800112c:	f04f 5274 	mov.w	r2, #1023410176	@ 0x3d000000
 8001130:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <main+0x8c>)
 8001134:	2220      	movs	r2, #32
 8001136:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f000 fb62 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f846 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f000 f92a 	bl	8001398 <MX_GPIO_Init>
  MX_DMA_Init();
 8001144:	f000 f908 	bl	8001358 <MX_DMA_Init>
  MX_I2C1_Init();
 8001148:	f000 f8aa 	bl	80012a0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800114c:	f000 f8d6 	bl	80012fc <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
 	CS43_Init(hi2c1, MODE_I2S);
 8001150:	4c18      	ldr	r4, [pc, #96]	@ (80011b4 <main+0x90>)
 8001152:	2300      	movs	r3, #0
 8001154:	9311      	str	r3, [sp, #68]	@ 0x44
 8001156:	4668      	mov	r0, sp
 8001158:	f104 0310 	add.w	r3, r4, #16
 800115c:	2244      	movs	r2, #68	@ 0x44
 800115e:	4619      	mov	r1, r3
 8001160:	f003 fd76 	bl	8004c50 <memcpy>
 8001164:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001168:	f7ff fd84 	bl	8000c74 <CS43_Init>
 	CS43_SetVolume(40); //0 - 100,, 40
 800116c:	2028      	movs	r0, #40	@ 0x28
 800116e:	f7ff fef1 	bl	8000f54 <CS43_SetVolume>
 	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8001172:	2003      	movs	r0, #3
 8001174:	f7ff fe92 	bl	8000e9c <CS43_Enable_RightLeft>
 	CS43_Start();
 8001178:	f7ff ff2e 	bl	8000fd8 <CS43_Start>

    HAL_StatusTypeDef res;


    uint8_t melody[] = {0x03, 0x02, 0x01, 0x02, 0x03, 0x03, 0x03, 0x02, 0x02, 0x02, 0x03, 0x05, 0x05};
 800117c:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <main+0x94>)
 800117e:	463c      	mov	r4, r7
 8001180:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001182:	c407      	stmia	r4!, {r0, r1, r2}
 8001184:	7023      	strb	r3, [r4, #0]
    /**Polling**/
    /***process_buffer(&i2s_dma_buffer[0]);
    while(1) {
        res = HAL_I2S_Transmit(&hi2s3, (uint16_t*)i2s_dma_buffer, nsamples, HAL_MAX_DELAY);
    }**/
   uint8_t temp = full_cpt;
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <main+0x98>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 2 */

   process_buffer(i2s_dma_buffer);
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <main+0x9c>)
 800118e:	f7ff ff67 	bl	8001060 <process_buffer>
   res = HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)i2s_dma_buffer, nsamples);
 8001192:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <main+0xa0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	4909      	ldr	r1, [pc, #36]	@ (80011c0 <main+0x9c>)
 800119c:	480a      	ldr	r0, [pc, #40]	@ (80011c8 <main+0xa4>)
 800119e:	f002 fafb 	bl	8003798 <HAL_I2S_Transmit_DMA>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011a6:	bf00      	nop
 80011a8:	e7fd      	b.n	80011a6 <main+0x82>
 80011aa:	bf00      	nop
 80011ac:	20000184 	.word	0x20000184
 80011b0:	20000188 	.word	0x20000188
 80011b4:	20000084 	.word	0x20000084
 80011b8:	08005ce8 	.word	0x08005ce8
 80011bc:	2000018a 	.word	0x2000018a
 80011c0:	2000018c 	.word	0x2000018c
 80011c4:	20000000 	.word	0x20000000
 80011c8:	200000d8 	.word	0x200000d8

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	@ 0x50
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	2230      	movs	r2, #48	@ 0x30
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 fd0c 	bl	8004bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <SystemClock_Config+0xcc>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	4a27      	ldr	r2, [pc, #156]	@ (8001298 <SystemClock_Config+0xcc>)
 80011fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001200:	4b25      	ldr	r3, [pc, #148]	@ (8001298 <SystemClock_Config+0xcc>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	4b22      	ldr	r3, [pc, #136]	@ (800129c <SystemClock_Config+0xd0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a21      	ldr	r2, [pc, #132]	@ (800129c <SystemClock_Config+0xd0>)
 8001216:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b1f      	ldr	r3, [pc, #124]	@ (800129c <SystemClock_Config+0xd0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001228:	2302      	movs	r3, #2
 800122a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122c:	2301      	movs	r3, #1
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001230:	2310      	movs	r3, #16
 8001232:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001234:	2302      	movs	r3, #2
 8001236:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001238:	2300      	movs	r3, #0
 800123a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800123c:	2308      	movs	r3, #8
 800123e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001240:	23c0      	movs	r3, #192	@ 0xc0
 8001242:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001244:	2304      	movs	r3, #4
 8001246:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001248:	2308      	movs	r3, #8
 800124a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124c:	f107 0320 	add.w	r3, r7, #32
 8001250:	4618      	mov	r0, r3
 8001252:	f002 fefb 	bl	800404c <HAL_RCC_OscConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800125c:	f000 f91c 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001260:	230f      	movs	r3, #15
 8001262:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001264:	2302      	movs	r3, #2
 8001266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800126c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001272:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001276:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2103      	movs	r1, #3
 800127e:	4618      	mov	r0, r3
 8001280:	f003 f95c 	bl	800453c <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800128a:	f000 f905 	bl	8001498 <Error_Handler>
  }
}
 800128e:	bf00      	nop
 8001290:	3750      	adds	r7, #80	@ 0x50
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <MX_I2C1_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <MX_I2C1_Init+0x58>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012de:	f001 f921 	bl	8002524 <HAL_I2C_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 f8d6 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000084 	.word	0x20000084
 80012f4:	40005400 	.word	0x40005400
 80012f8:	000186a0 	.word	0x000186a0

080012fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <MX_I2S3_Init+0x54>)
 8001302:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <MX_I2S3_Init+0x58>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001306:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <MX_I2S3_Init+0x54>)
 8001308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800130c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <MX_I2S3_Init+0x54>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <MX_I2S3_Init+0x54>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <MX_I2S3_Init+0x54>)
 800131c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001320:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001322:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <MX_I2S3_Init+0x54>)
 8001324:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001328:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <MX_I2S3_Init+0x54>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001330:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <MX_I2S3_Init+0x54>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <MX_I2S3_Init+0x54>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	@ (8001350 <MX_I2S3_Init+0x54>)
 800133e:	f002 f8eb 	bl	8003518 <HAL_I2S_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001348:	f000 f8a6 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200000d8 	.word	0x200000d8
 8001354:	40003c00 	.word	0x40003c00

08001358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <MX_DMA_Init+0x3c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <MX_DMA_Init+0x3c>)
 8001368:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <MX_DMA_Init+0x3c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2010      	movs	r0, #16
 8001380:	f000 fb8b 	bl	8001a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001384:	2010      	movs	r0, #16
 8001386:	f000 fba4 	bl	8001ad2 <HAL_NVIC_EnableIRQ>

}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001468 <MX_GPIO_Init+0xd0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001468 <MX_GPIO_Init+0xd0>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b2a      	ldr	r3, [pc, #168]	@ (8001468 <MX_GPIO_Init+0xd0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <MX_GPIO_Init+0xd0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a25      	ldr	r2, [pc, #148]	@ (8001468 <MX_GPIO_Init+0xd0>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <MX_GPIO_Init+0xd0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <MX_GPIO_Init+0xd0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001468 <MX_GPIO_Init+0xd0>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <MX_GPIO_Init+0xd0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <MX_GPIO_Init+0xd0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <MX_GPIO_Init+0xd0>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <MX_GPIO_Init+0xd0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <MX_GPIO_Init+0xd0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a10      	ldr	r2, [pc, #64]	@ (8001468 <MX_GPIO_Init+0xd0>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <MX_GPIO_Init+0xd0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2110      	movs	r1, #16
 800143e:	480b      	ldr	r0, [pc, #44]	@ (800146c <MX_GPIO_Init+0xd4>)
 8001440:	f001 f856 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001444:	2310      	movs	r3, #16
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4804      	ldr	r0, [pc, #16]	@ (800146c <MX_GPIO_Init+0xd4>)
 800145c:	f000 fec4 	bl	80021e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	@ 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40023800 	.word	0x40023800
 800146c:	40020c00 	.word	0x40020c00

08001470 <HAL_I2S_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
//   else
//   {
// 	 process_buffer(&i2s_dma_buffer[2*I2S_DMA_BUFFER_SAMPLES]);
// 	 full_cpt = 1;
//   }
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
//   else
//   {
//	  process_buffer(&i2s_dma_buffer[0]);
//	   half_cpt = 1;
//   }
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <Error_Handler+0x8>

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	4a0f      	ldr	r2, [pc, #60]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	4a08      	ldr	r2, [pc, #32]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014e2:	2007      	movs	r0, #7
 80014e4:	f000 face 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	@ (8001578 <HAL_I2C_MspInit+0x84>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12c      	bne.n	8001570 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <HAL_I2C_MspInit+0x88>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a17      	ldr	r2, [pc, #92]	@ (800157c <HAL_I2C_MspInit+0x88>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_I2C_MspInit+0x88>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001532:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001538:	2312      	movs	r3, #18
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001544:	2304      	movs	r3, #4
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	480c      	ldr	r0, [pc, #48]	@ (8001580 <HAL_I2C_MspInit+0x8c>)
 8001550:	f000 fe4a 	bl	80021e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4b08      	ldr	r3, [pc, #32]	@ (800157c <HAL_I2C_MspInit+0x88>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	4a07      	ldr	r2, [pc, #28]	@ (800157c <HAL_I2C_MspInit+0x88>)
 800155e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001562:	6413      	str	r3, [r2, #64]	@ 0x40
 8001564:	4b05      	ldr	r3, [pc, #20]	@ (800157c <HAL_I2C_MspInit+0x88>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	@ 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40005400 	.word	0x40005400
 800157c:	40023800 	.word	0x40023800
 8001580:	40020400 	.word	0x40020400

08001584 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b090      	sub	sp, #64	@ 0x40
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
 80015ac:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a4d      	ldr	r2, [pc, #308]	@ (80016e8 <HAL_I2S_MspInit+0x164>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	f040 8093 	bne.w	80016e0 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80015ba:	2301      	movs	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80015be:	23c8      	movs	r3, #200	@ 0xc8
 80015c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80015c2:	2308      	movs	r3, #8
 80015c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 80015c6:	2304      	movs	r3, #4
 80015c8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 f9c0 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 80015da:	f7ff ff5d 	bl	8001498 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b42      	ldr	r3, [pc, #264]	@ (80016ec <HAL_I2S_MspInit+0x168>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	4a41      	ldr	r2, [pc, #260]	@ (80016ec <HAL_I2S_MspInit+0x168>)
 80015e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ee:	4b3f      	ldr	r3, [pc, #252]	@ (80016ec <HAL_I2S_MspInit+0x168>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b3b      	ldr	r3, [pc, #236]	@ (80016ec <HAL_I2S_MspInit+0x168>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a3a      	ldr	r2, [pc, #232]	@ (80016ec <HAL_I2S_MspInit+0x168>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b38      	ldr	r3, [pc, #224]	@ (80016ec <HAL_I2S_MspInit+0x168>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b34      	ldr	r3, [pc, #208]	@ (80016ec <HAL_I2S_MspInit+0x168>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a33      	ldr	r2, [pc, #204]	@ (80016ec <HAL_I2S_MspInit+0x168>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b31      	ldr	r3, [pc, #196]	@ (80016ec <HAL_I2S_MspInit+0x168>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001632:	2310      	movs	r3, #16
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001642:	2306      	movs	r3, #6
 8001644:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800164a:	4619      	mov	r1, r3
 800164c:	4828      	ldr	r0, [pc, #160]	@ (80016f0 <HAL_I2S_MspInit+0x16c>)
 800164e:	f000 fdcb 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001652:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001656:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001664:	2306      	movs	r3, #6
 8001666:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800166c:	4619      	mov	r1, r3
 800166e:	4821      	ldr	r0, [pc, #132]	@ (80016f4 <HAL_I2S_MspInit+0x170>)
 8001670:	f000 fdba 	bl	80021e8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <HAL_I2S_MspInit+0x174>)
 8001676:	4a21      	ldr	r2, [pc, #132]	@ (80016fc <HAL_I2S_MspInit+0x178>)
 8001678:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800167a:	4b1f      	ldr	r3, [pc, #124]	@ (80016f8 <HAL_I2S_MspInit+0x174>)
 800167c:	2200      	movs	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001680:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <HAL_I2S_MspInit+0x174>)
 8001682:	2240      	movs	r2, #64	@ 0x40
 8001684:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001686:	4b1c      	ldr	r3, [pc, #112]	@ (80016f8 <HAL_I2S_MspInit+0x174>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800168c:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <HAL_I2S_MspInit+0x174>)
 800168e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001692:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001694:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <HAL_I2S_MspInit+0x174>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800169a:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <HAL_I2S_MspInit+0x174>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80016a0:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <HAL_I2S_MspInit+0x174>)
 80016a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016a6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016a8:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <HAL_I2S_MspInit+0x174>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ae:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_I2S_MspInit+0x174>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80016b4:	4810      	ldr	r0, [pc, #64]	@ (80016f8 <HAL_I2S_MspInit+0x174>)
 80016b6:	f000 fa27 	bl	8001b08 <HAL_DMA_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_I2S_MspInit+0x140>
    {
      Error_Handler();
 80016c0:	f7ff feea 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a0c      	ldr	r2, [pc, #48]	@ (80016f8 <HAL_I2S_MspInit+0x174>)
 80016c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80016ca:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <HAL_I2S_MspInit+0x174>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2033      	movs	r0, #51	@ 0x33
 80016d6:	f000 f9e0 	bl	8001a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80016da:	2033      	movs	r0, #51	@ 0x33
 80016dc:	f000 f9f9 	bl	8001ad2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80016e0:	bf00      	nop
 80016e2:	3740      	adds	r7, #64	@ 0x40
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40003c00 	.word	0x40003c00
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020800 	.word	0x40020800
 80016f8:	20000120 	.word	0x20000120
 80016fc:	40026088 	.word	0x40026088

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <NMI_Handler+0x4>

08001708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <MemManage_Handler+0x4>

08001718 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <UsageFault_Handler+0x4>

08001728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001756:	f000 f8a5 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <DMA1_Stream5_IRQHandler+0x10>)
 8001766:	f000 fad5 	bl	8001d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000120 	.word	0x20000120

08001774 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <SPI3_IRQHandler+0x10>)
 800177a:	f002 f8b1 	bl	80038e0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200000d8 	.word	0x200000d8

08001788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <SystemInit+0x20>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001792:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <SystemInit+0x20>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017b0:	f7ff ffea 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	@ (80017ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	@ (80017f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017da:	f003 fa15 	bl	8004c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017de:	f7ff fca1 	bl	8001124 <main>
  bx  lr    
 80017e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017f0:	08005f00 	.word	0x08005f00
  ldr r2, =_sbss
 80017f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017f8:	20001090 	.word	0x20001090

080017fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001804:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0d      	ldr	r2, [pc, #52]	@ (8001840 <HAL_Init+0x40>)
 800180a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800180e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <HAL_Init+0x40>)
 8001816:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800181a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800181c:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a07      	ldr	r2, [pc, #28]	@ (8001840 <HAL_Init+0x40>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001828:	2003      	movs	r0, #3
 800182a:	f000 f92b 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182e:	2000      	movs	r0, #0
 8001830:	f000 f808 	bl	8001844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001834:	f7ff fe36 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_InitTick+0x54>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_InitTick+0x58>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f943 	bl	8001aee <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e00e      	b.n	8001890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d80a      	bhi.n	800188e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f000 f90b 	bl	8001a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001884:	4a06      	ldr	r2, [pc, #24]	@ (80018a0 <HAL_InitTick+0x5c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000004 	.word	0x20000004
 800189c:	2000000c 	.word	0x2000000c
 80018a0:	20000008 	.word	0x20000008

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2000000c 	.word	0x2000000c
 80018c8:	2000108c 	.word	0x2000108c

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	@ (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	2000108c 	.word	0x2000108c

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4907      	ldr	r1, [pc, #28]	@ (8001980 <__NVIC_EnableIRQ+0x38>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2001      	movs	r0, #1
 800196a:	fa00 f202 	lsl.w	r2, r0, r2
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000e100 	.word	0xe000e100

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	@ (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	@ (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	@ 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
         );
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	@ 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a50:	d301      	bcc.n	8001a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00f      	b.n	8001a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a56:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <SysTick_Config+0x40>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5e:	210f      	movs	r1, #15
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f7ff ff8e 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <SysTick_Config+0x40>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <SysTick_Config+0x40>)
 8001a70:	2207      	movs	r2, #7
 8001a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	e000e010 	.word	0xe000e010

08001a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff29 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aac:	f7ff ff3e 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f7ff ff8e 	bl	80019d8 <NVIC_EncodePriority>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff5d 	bl	8001984 <__NVIC_SetPriority>
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff31 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffa2 	bl	8001a40 <SysTick_Config>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff feda 	bl	80018cc <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e099      	b.n	8001c58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0201 	bic.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b44:	e00f      	b.n	8001b66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b46:	f7ff fec1 	bl	80018cc <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b05      	cmp	r3, #5
 8001b52:	d908      	bls.n	8001b66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2220      	movs	r2, #32
 8001b58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e078      	b.n	8001c58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1e8      	bne.n	8001b46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	4b38      	ldr	r3, [pc, #224]	@ (8001c60 <HAL_DMA_Init+0x158>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001baa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d107      	bne.n	8001bd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f023 0307 	bic.w	r3, r3, #7
 8001be6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d117      	bne.n	8001c2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00e      	beq.n	8001c2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fa6f 	bl	80020f0 <DMA_CheckFifoParam>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2240      	movs	r2, #64	@ 0x40
 8001c1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c26:	2301      	movs	r3, #1
 8001c28:	e016      	b.n	8001c58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 fa26 	bl	8002084 <DMA_CalcBaseAndBitshift>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c40:	223f      	movs	r2, #63	@ 0x3f
 8001c42:	409a      	lsls	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	f010803f 	.word	0xf010803f

08001c64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_DMA_Start_IT+0x26>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e040      	b.n	8001d0c <HAL_DMA_Start_IT+0xa8>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d12f      	bne.n	8001cfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f9b8 	bl	8002028 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbc:	223f      	movs	r2, #63	@ 0x3f
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0216 	orr.w	r2, r2, #22
 8001cd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0208 	orr.w	r2, r2, #8
 8001cea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e005      	b.n	8001d0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d06:	2302      	movs	r3, #2
 8001d08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d20:	4b8e      	ldr	r3, [pc, #568]	@ (8001f5c <HAL_DMA_IRQHandler+0x248>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a8e      	ldr	r2, [pc, #568]	@ (8001f60 <HAL_DMA_IRQHandler+0x24c>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	0a9b      	lsrs	r3, r3, #10
 8001d2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3e:	2208      	movs	r2, #8
 8001d40:	409a      	lsls	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d01a      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0204 	bic.w	r2, r2, #4
 8001d66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d84:	2201      	movs	r2, #1
 8001d86:	409a      	lsls	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d012      	beq.n	8001db6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da2:	2201      	movs	r2, #1
 8001da4:	409a      	lsls	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dae:	f043 0202 	orr.w	r2, r3, #2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dba:	2204      	movs	r2, #4
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d012      	beq.n	8001dec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00b      	beq.n	8001dec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd8:	2204      	movs	r2, #4
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de4:	f043 0204 	orr.w	r2, r3, #4
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df0:	2210      	movs	r2, #16
 8001df2:	409a      	lsls	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d043      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d03c      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0e:	2210      	movs	r2, #16
 8001e10:	409a      	lsls	r2, r3
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d018      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d108      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d024      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	4798      	blx	r3
 8001e42:	e01f      	b.n	8001e84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01b      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	4798      	blx	r3
 8001e54:	e016      	b.n	8001e84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d107      	bne.n	8001e74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0208 	bic.w	r2, r2, #8
 8001e72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e88:	2220      	movs	r2, #32
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 808f 	beq.w	8001fb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8087 	beq.w	8001fb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eaa:	2220      	movs	r2, #32
 8001eac:	409a      	lsls	r2, r3
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d136      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0216 	bic.w	r2, r2, #22
 8001ecc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695a      	ldr	r2, [r3, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001edc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d103      	bne.n	8001eee <HAL_DMA_IRQHandler+0x1da>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0208 	bic.w	r2, r2, #8
 8001efc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f02:	223f      	movs	r2, #63	@ 0x3f
 8001f04:	409a      	lsls	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d07e      	beq.n	8002020 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	4798      	blx	r3
        }
        return;
 8001f2a:	e079      	b.n	8002020 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d01d      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10d      	bne.n	8001f64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d031      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
 8001f58:	e02c      	b.n	8001fb4 <HAL_DMA_IRQHandler+0x2a0>
 8001f5a:	bf00      	nop
 8001f5c:	20000004 	.word	0x20000004
 8001f60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d023      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4798      	blx	r3
 8001f74:	e01e      	b.n	8001fb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10f      	bne.n	8001fa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0210 	bic.w	r2, r2, #16
 8001f92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d032      	beq.n	8002022 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d022      	beq.n	800200e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2205      	movs	r2, #5
 8001fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d307      	bcc.n	8001ffc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f2      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0x2cc>
 8001ffa:	e000      	b.n	8001ffe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ffc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	4798      	blx	r3
 800201e:	e000      	b.n	8002022 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002020:	bf00      	nop
    }
  }
}
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002044:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b40      	cmp	r3, #64	@ 0x40
 8002054:	d108      	bne.n	8002068 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002066:	e007      	b.n	8002078 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	60da      	str	r2, [r3, #12]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3b10      	subs	r3, #16
 8002094:	4a14      	ldr	r2, [pc, #80]	@ (80020e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800209e:	4a13      	ldr	r2, [pc, #76]	@ (80020ec <DMA_CalcBaseAndBitshift+0x68>)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d909      	bls.n	80020c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020ba:	f023 0303 	bic.w	r3, r3, #3
 80020be:	1d1a      	adds	r2, r3, #4
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80020c4:	e007      	b.n	80020d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020ce:	f023 0303 	bic.w	r3, r3, #3
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	aaaaaaab 	.word	0xaaaaaaab
 80020ec:	08005d10 	.word	0x08005d10

080020f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002100:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d11f      	bne.n	800214a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d856      	bhi.n	80021be <DMA_CheckFifoParam+0xce>
 8002110:	a201      	add	r2, pc, #4	@ (adr r2, 8002118 <DMA_CheckFifoParam+0x28>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	08002129 	.word	0x08002129
 800211c:	0800213b 	.word	0x0800213b
 8002120:	08002129 	.word	0x08002129
 8002124:	080021bf 	.word	0x080021bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d046      	beq.n	80021c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002138:	e043      	b.n	80021c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002142:	d140      	bne.n	80021c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002148:	e03d      	b.n	80021c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002152:	d121      	bne.n	8002198 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d837      	bhi.n	80021ca <DMA_CheckFifoParam+0xda>
 800215a:	a201      	add	r2, pc, #4	@ (adr r2, 8002160 <DMA_CheckFifoParam+0x70>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	08002171 	.word	0x08002171
 8002164:	08002177 	.word	0x08002177
 8002168:	08002171 	.word	0x08002171
 800216c:	08002189 	.word	0x08002189
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
      break;
 8002174:	e030      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d025      	beq.n	80021ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002186:	e022      	b.n	80021ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002190:	d11f      	bne.n	80021d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002196:	e01c      	b.n	80021d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d903      	bls.n	80021a6 <DMA_CheckFifoParam+0xb6>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d003      	beq.n	80021ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021a4:	e018      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
      break;
 80021aa:	e015      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00e      	beq.n	80021d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      break;
 80021bc:	e00b      	b.n	80021d6 <DMA_CheckFifoParam+0xe6>
      break;
 80021be:	bf00      	nop
 80021c0:	e00a      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021c2:	bf00      	nop
 80021c4:	e008      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021c6:	bf00      	nop
 80021c8:	e006      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ca:	bf00      	nop
 80021cc:	e004      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ce:	bf00      	nop
 80021d0:	e002      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021d2:	bf00      	nop
 80021d4:	e000      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021d6:	bf00      	nop
    }
  } 
  
  return status; 
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop

080021e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	@ 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	e159      	b.n	80024b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002204:	2201      	movs	r2, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	429a      	cmp	r2, r3
 800221e:	f040 8148 	bne.w	80024b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d005      	beq.n	800223a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002236:	2b02      	cmp	r3, #2
 8002238:	d130      	bne.n	800229c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002270:	2201      	movs	r2, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 0201 	and.w	r2, r3, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d017      	beq.n	80022d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d123      	bne.n	800232c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3208      	adds	r2, #8
 80022ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	220f      	movs	r2, #15
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	08da      	lsrs	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	69b9      	ldr	r1, [r7, #24]
 8002328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0203 	and.w	r2, r3, #3
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80a2 	beq.w	80024b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b57      	ldr	r3, [pc, #348]	@ (80024d0 <HAL_GPIO_Init+0x2e8>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	4a56      	ldr	r2, [pc, #344]	@ (80024d0 <HAL_GPIO_Init+0x2e8>)
 8002378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800237c:	6453      	str	r3, [r2, #68]	@ 0x44
 800237e:	4b54      	ldr	r3, [pc, #336]	@ (80024d0 <HAL_GPIO_Init+0x2e8>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238a:	4a52      	ldr	r2, [pc, #328]	@ (80024d4 <HAL_GPIO_Init+0x2ec>)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a49      	ldr	r2, [pc, #292]	@ (80024d8 <HAL_GPIO_Init+0x2f0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d019      	beq.n	80023ea <HAL_GPIO_Init+0x202>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a48      	ldr	r2, [pc, #288]	@ (80024dc <HAL_GPIO_Init+0x2f4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0x1fe>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a47      	ldr	r2, [pc, #284]	@ (80024e0 <HAL_GPIO_Init+0x2f8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00d      	beq.n	80023e2 <HAL_GPIO_Init+0x1fa>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a46      	ldr	r2, [pc, #280]	@ (80024e4 <HAL_GPIO_Init+0x2fc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <HAL_GPIO_Init+0x1f6>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a45      	ldr	r2, [pc, #276]	@ (80024e8 <HAL_GPIO_Init+0x300>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d101      	bne.n	80023da <HAL_GPIO_Init+0x1f2>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e008      	b.n	80023ec <HAL_GPIO_Init+0x204>
 80023da:	2307      	movs	r3, #7
 80023dc:	e006      	b.n	80023ec <HAL_GPIO_Init+0x204>
 80023de:	2303      	movs	r3, #3
 80023e0:	e004      	b.n	80023ec <HAL_GPIO_Init+0x204>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e002      	b.n	80023ec <HAL_GPIO_Init+0x204>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <HAL_GPIO_Init+0x204>
 80023ea:	2300      	movs	r3, #0
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	f002 0203 	and.w	r2, r2, #3
 80023f2:	0092      	lsls	r2, r2, #2
 80023f4:	4093      	lsls	r3, r2
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023fc:	4935      	ldr	r1, [pc, #212]	@ (80024d4 <HAL_GPIO_Init+0x2ec>)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	3302      	adds	r3, #2
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800240a:	4b38      	ldr	r3, [pc, #224]	@ (80024ec <HAL_GPIO_Init+0x304>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800242e:	4a2f      	ldr	r2, [pc, #188]	@ (80024ec <HAL_GPIO_Init+0x304>)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002434:	4b2d      	ldr	r3, [pc, #180]	@ (80024ec <HAL_GPIO_Init+0x304>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002458:	4a24      	ldr	r2, [pc, #144]	@ (80024ec <HAL_GPIO_Init+0x304>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800245e:	4b23      	ldr	r3, [pc, #140]	@ (80024ec <HAL_GPIO_Init+0x304>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002482:	4a1a      	ldr	r2, [pc, #104]	@ (80024ec <HAL_GPIO_Init+0x304>)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002488:	4b18      	ldr	r3, [pc, #96]	@ (80024ec <HAL_GPIO_Init+0x304>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ac:	4a0f      	ldr	r2, [pc, #60]	@ (80024ec <HAL_GPIO_Init+0x304>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3301      	adds	r3, #1
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b0f      	cmp	r3, #15
 80024bc:	f67f aea2 	bls.w	8002204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3724      	adds	r7, #36	@ 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40013800 	.word	0x40013800
 80024d8:	40020000 	.word	0x40020000
 80024dc:	40020400 	.word	0x40020400
 80024e0:	40020800 	.word	0x40020800
 80024e4:	40020c00 	.word	0x40020c00
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40013c00 	.word	0x40013c00

080024f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
 80024fc:	4613      	mov	r3, r2
 80024fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002500:	787b      	ldrb	r3, [r7, #1]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800250c:	e003      	b.n	8002516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800250e:	887b      	ldrh	r3, [r7, #2]
 8002510:	041a      	lsls	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	619a      	str	r2, [r3, #24]
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e12b      	b.n	800278e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7fe ffd2 	bl	80014f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2224      	movs	r2, #36	@ 0x24
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002576:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002586:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002588:	f002 f9d0 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 800258c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4a81      	ldr	r2, [pc, #516]	@ (8002798 <HAL_I2C_Init+0x274>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d807      	bhi.n	80025a8 <HAL_I2C_Init+0x84>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4a80      	ldr	r2, [pc, #512]	@ (800279c <HAL_I2C_Init+0x278>)
 800259c:	4293      	cmp	r3, r2
 800259e:	bf94      	ite	ls
 80025a0:	2301      	movls	r3, #1
 80025a2:	2300      	movhi	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	e006      	b.n	80025b6 <HAL_I2C_Init+0x92>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4a7d      	ldr	r2, [pc, #500]	@ (80027a0 <HAL_I2C_Init+0x27c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	bf94      	ite	ls
 80025b0:	2301      	movls	r3, #1
 80025b2:	2300      	movhi	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0e7      	b.n	800278e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4a78      	ldr	r2, [pc, #480]	@ (80027a4 <HAL_I2C_Init+0x280>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	0c9b      	lsrs	r3, r3, #18
 80025c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	430a      	orrs	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002798 <HAL_I2C_Init+0x274>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d802      	bhi.n	80025f8 <HAL_I2C_Init+0xd4>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3301      	adds	r3, #1
 80025f6:	e009      	b.n	800260c <HAL_I2C_Init+0xe8>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025fe:	fb02 f303 	mul.w	r3, r2, r3
 8002602:	4a69      	ldr	r2, [pc, #420]	@ (80027a8 <HAL_I2C_Init+0x284>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	099b      	lsrs	r3, r3, #6
 800260a:	3301      	adds	r3, #1
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	430b      	orrs	r3, r1
 8002612:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800261e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	495c      	ldr	r1, [pc, #368]	@ (8002798 <HAL_I2C_Init+0x274>)
 8002628:	428b      	cmp	r3, r1
 800262a:	d819      	bhi.n	8002660 <HAL_I2C_Init+0x13c>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e59      	subs	r1, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fbb1 f3f3 	udiv	r3, r1, r3
 800263a:	1c59      	adds	r1, r3, #1
 800263c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002640:	400b      	ands	r3, r1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_I2C_Init+0x138>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1e59      	subs	r1, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fbb1 f3f3 	udiv	r3, r1, r3
 8002654:	3301      	adds	r3, #1
 8002656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265a:	e051      	b.n	8002700 <HAL_I2C_Init+0x1dc>
 800265c:	2304      	movs	r3, #4
 800265e:	e04f      	b.n	8002700 <HAL_I2C_Init+0x1dc>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d111      	bne.n	800268c <HAL_I2C_Init+0x168>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1e58      	subs	r0, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	440b      	add	r3, r1
 8002676:	fbb0 f3f3 	udiv	r3, r0, r3
 800267a:	3301      	adds	r3, #1
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e012      	b.n	80026b2 <HAL_I2C_Init+0x18e>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e58      	subs	r0, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	0099      	lsls	r1, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Init+0x196>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e022      	b.n	8002700 <HAL_I2C_Init+0x1dc>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10e      	bne.n	80026e0 <HAL_I2C_Init+0x1bc>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1e58      	subs	r0, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	440b      	add	r3, r1
 80026d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d4:	3301      	adds	r3, #1
 80026d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026de:	e00f      	b.n	8002700 <HAL_I2C_Init+0x1dc>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1e58      	subs	r0, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	0099      	lsls	r1, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	6809      	ldr	r1, [r1, #0]
 8002704:	4313      	orrs	r3, r2
 8002706:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69da      	ldr	r2, [r3, #28]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800272e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6911      	ldr	r1, [r2, #16]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68d2      	ldr	r2, [r2, #12]
 800273a:	4311      	orrs	r1, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	430b      	orrs	r3, r1
 8002742:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	000186a0 	.word	0x000186a0
 800279c:	001e847f 	.word	0x001e847f
 80027a0:	003d08ff 	.word	0x003d08ff
 80027a4:	431bde83 	.word	0x431bde83
 80027a8:	10624dd3 	.word	0x10624dd3

080027ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	461a      	mov	r2, r3
 80027b8:	460b      	mov	r3, r1
 80027ba:	817b      	strh	r3, [r7, #10]
 80027bc:	4613      	mov	r3, r2
 80027be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027c0:	f7ff f884 	bl	80018cc <HAL_GetTick>
 80027c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	f040 80e0 	bne.w	8002994 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2319      	movs	r3, #25
 80027da:	2201      	movs	r2, #1
 80027dc:	4970      	ldr	r1, [pc, #448]	@ (80029a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fc64 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027ea:	2302      	movs	r3, #2
 80027ec:	e0d3      	b.n	8002996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_I2C_Master_Transmit+0x50>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e0cc      	b.n	8002996 <HAL_I2C_Master_Transmit+0x1ea>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d007      	beq.n	8002822 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2221      	movs	r2, #33	@ 0x21
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2210      	movs	r2, #16
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	893a      	ldrh	r2, [r7, #8]
 8002852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4a50      	ldr	r2, [pc, #320]	@ (80029a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002862:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002864:	8979      	ldrh	r1, [r7, #10]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	6a3a      	ldr	r2, [r7, #32]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 face 	bl	8002e0c <I2C_MasterRequestWrite>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e08d      	b.n	8002996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002890:	e066      	b.n	8002960 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	6a39      	ldr	r1, [r7, #32]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fd22 	bl	80032e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d107      	bne.n	80028ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e06b      	b.n	8002996 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	781a      	ldrb	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d11b      	bne.n	8002934 <HAL_I2C_Master_Transmit+0x188>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	d017      	beq.n	8002934 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	6a39      	ldr	r1, [r7, #32]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fd19 	bl	8003370 <I2C_WaitOnBTFFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00d      	beq.n	8002960 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	2b04      	cmp	r3, #4
 800294a:	d107      	bne.n	800295c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e01a      	b.n	8002996 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d194      	bne.n	8002892 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	00100002 	.word	0x00100002
 80029a4:	ffff0000 	.word	0xffff0000

080029a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	@ 0x30
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	461a      	mov	r2, r3
 80029b4:	460b      	mov	r3, r1
 80029b6:	817b      	strh	r3, [r7, #10]
 80029b8:	4613      	mov	r3, r2
 80029ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029bc:	f7fe ff86 	bl	80018cc <HAL_GetTick>
 80029c0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	f040 8217 	bne.w	8002dfe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2319      	movs	r3, #25
 80029d6:	2201      	movs	r2, #1
 80029d8:	497c      	ldr	r1, [pc, #496]	@ (8002bcc <HAL_I2C_Master_Receive+0x224>)
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fb66 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
 80029e8:	e20a      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_I2C_Master_Receive+0x50>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e203      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d007      	beq.n	8002a1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2222      	movs	r2, #34	@ 0x22
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	893a      	ldrh	r2, [r7, #8]
 8002a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd0 <HAL_I2C_Master_Receive+0x228>)
 8002a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a60:	8979      	ldrh	r1, [r7, #10]
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fa52 	bl	8002f10 <I2C_MasterRequestRead>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e1c4      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d113      	bne.n	8002aa6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	623b      	str	r3, [r7, #32]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	623b      	str	r3, [r7, #32]
 8002a92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e198      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d11b      	bne.n	8002ae6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002abc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e178      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d11b      	bne.n	8002b26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002afc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	e158      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b4c:	e144      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	f200 80f1 	bhi.w	8002d3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d123      	bne.n	8002ba8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fc4b 	bl	8003400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e145      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ba6:	e117      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d14e      	bne.n	8002c4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	4906      	ldr	r1, [pc, #24]	@ (8002bd4 <HAL_I2C_Master_Receive+0x22c>)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fa76 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e11a      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
 8002bca:	bf00      	nop
 8002bcc:	00100002 	.word	0x00100002
 8002bd0:	ffff0000 	.word	0xffff0000
 8002bd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c4c:	e0c4      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c54:	2200      	movs	r2, #0
 8002c56:	496c      	ldr	r1, [pc, #432]	@ (8002e08 <HAL_I2C_Master_Receive+0x460>)
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 fa27 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0cb      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	4955      	ldr	r1, [pc, #340]	@ (8002e08 <HAL_I2C_Master_Receive+0x460>)
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f9f9 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e09d      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d38:	e04e      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fb5e 	bl	8003400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e058      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d124      	bne.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d107      	bne.n	8002da6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002da4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f47f aeb6 	bne.w	8002b4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
  }
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3728      	adds	r7, #40	@ 0x28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	00010004 	.word	0x00010004

08002e0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d006      	beq.n	8002e36 <I2C_MasterRequestWrite+0x2a>
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d003      	beq.n	8002e36 <I2C_MasterRequestWrite+0x2a>
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e34:	d108      	bne.n	8002e48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	e00b      	b.n	8002e60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4c:	2b12      	cmp	r3, #18
 8002e4e:	d107      	bne.n	8002e60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f91d 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00d      	beq.n	8002e94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e86:	d103      	bne.n	8002e90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e035      	b.n	8002f00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e9c:	d108      	bne.n	8002eb0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002eac:	611a      	str	r2, [r3, #16]
 8002eae:	e01b      	b.n	8002ee8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002eb0:	897b      	ldrh	r3, [r7, #10]
 8002eb2:	11db      	asrs	r3, r3, #7
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f003 0306 	and.w	r3, r3, #6
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f063 030f 	orn	r3, r3, #15
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	490e      	ldr	r1, [pc, #56]	@ (8002f08 <I2C_MasterRequestWrite+0xfc>)
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f966 	bl	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e010      	b.n	8002f00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ede:	897b      	ldrh	r3, [r7, #10]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4907      	ldr	r1, [pc, #28]	@ (8002f0c <I2C_MasterRequestWrite+0x100>)
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f956 	bl	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	00010008 	.word	0x00010008
 8002f0c:	00010002 	.word	0x00010002

08002f10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d006      	beq.n	8002f4a <I2C_MasterRequestRead+0x3a>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d003      	beq.n	8002f4a <I2C_MasterRequestRead+0x3a>
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f48:	d108      	bne.n	8002f5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e00b      	b.n	8002f74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f60:	2b11      	cmp	r3, #17
 8002f62:	d107      	bne.n	8002f74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f893 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00d      	beq.n	8002fa8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f9a:	d103      	bne.n	8002fa4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fa2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e079      	b.n	800309c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fb0:	d108      	bne.n	8002fc4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fb2:	897b      	ldrh	r3, [r7, #10]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	611a      	str	r2, [r3, #16]
 8002fc2:	e05f      	b.n	8003084 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fc4:	897b      	ldrh	r3, [r7, #10]
 8002fc6:	11db      	asrs	r3, r3, #7
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f003 0306 	and.w	r3, r3, #6
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f063 030f 	orn	r3, r3, #15
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4930      	ldr	r1, [pc, #192]	@ (80030a4 <I2C_MasterRequestRead+0x194>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f8dc 	bl	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e054      	b.n	800309c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ff2:	897b      	ldrh	r3, [r7, #10]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4929      	ldr	r1, [pc, #164]	@ (80030a8 <I2C_MasterRequestRead+0x198>)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f8cc 	bl	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e044      	b.n	800309c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003036:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f831 	bl	80030ac <I2C_WaitOnFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00d      	beq.n	800306c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800305e:	d103      	bne.n	8003068 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003066:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e017      	b.n	800309c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800306c:	897b      	ldrh	r3, [r7, #10]
 800306e:	11db      	asrs	r3, r3, #7
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f003 0306 	and.w	r3, r3, #6
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f063 030e 	orn	r3, r3, #14
 800307c:	b2da      	uxtb	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	4907      	ldr	r1, [pc, #28]	@ (80030a8 <I2C_MasterRequestRead+0x198>)
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f888 	bl	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	00010008 	.word	0x00010008
 80030a8:	00010002 	.word	0x00010002

080030ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030bc:	e048      	b.n	8003150 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d044      	beq.n	8003150 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c6:	f7fe fc01 	bl	80018cc <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d302      	bcc.n	80030dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d139      	bne.n	8003150 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	0c1b      	lsrs	r3, r3, #16
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d10d      	bne.n	8003102 <I2C_WaitOnFlagUntilTimeout+0x56>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	43da      	mvns	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4013      	ands	r3, r2
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	e00c      	b.n	800311c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	43da      	mvns	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4013      	ands	r3, r2
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	429a      	cmp	r2, r3
 8003120:	d116      	bne.n	8003150 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e023      	b.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	0c1b      	lsrs	r3, r3, #16
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d10d      	bne.n	8003176 <I2C_WaitOnFlagUntilTimeout+0xca>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	43da      	mvns	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4013      	ands	r3, r2
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	e00c      	b.n	8003190 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	43da      	mvns	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	4013      	ands	r3, r2
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	429a      	cmp	r2, r3
 8003194:	d093      	beq.n	80030be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031ae:	e071      	b.n	8003294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031be:	d123      	bne.n	8003208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	f043 0204 	orr.w	r2, r3, #4
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e067      	b.n	80032d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320e:	d041      	beq.n	8003294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003210:	f7fe fb5c 	bl	80018cc <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	429a      	cmp	r2, r3
 800321e:	d302      	bcc.n	8003226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d136      	bne.n	8003294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	d10c      	bne.n	800324a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	43da      	mvns	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4013      	ands	r3, r2
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf14      	ite	ne
 8003242:	2301      	movne	r3, #1
 8003244:	2300      	moveq	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	e00b      	b.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	43da      	mvns	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	4013      	ands	r3, r2
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d016      	beq.n	8003294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e021      	b.n	80032d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	0c1b      	lsrs	r3, r3, #16
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d10c      	bne.n	80032b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	43da      	mvns	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	4013      	ands	r3, r2
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e00b      	b.n	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	43da      	mvns	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4013      	ands	r3, r2
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bf14      	ite	ne
 80032ca:	2301      	movne	r3, #1
 80032cc:	2300      	moveq	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f47f af6d 	bne.w	80031b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ec:	e034      	b.n	8003358 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f8e3 	bl	80034ba <I2C_IsAcknowledgeFailed>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e034      	b.n	8003368 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d028      	beq.n	8003358 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003306:	f7fe fae1 	bl	80018cc <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	429a      	cmp	r2, r3
 8003314:	d302      	bcc.n	800331c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d11d      	bne.n	8003358 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003326:	2b80      	cmp	r3, #128	@ 0x80
 8003328:	d016      	beq.n	8003358 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e007      	b.n	8003368 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003362:	2b80      	cmp	r3, #128	@ 0x80
 8003364:	d1c3      	bne.n	80032ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800337c:	e034      	b.n	80033e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f89b 	bl	80034ba <I2C_IsAcknowledgeFailed>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e034      	b.n	80033f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d028      	beq.n	80033e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003396:	f7fe fa99 	bl	80018cc <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d302      	bcc.n	80033ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d11d      	bne.n	80033e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d016      	beq.n	80033e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e007      	b.n	80033f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d1c3      	bne.n	800337e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800340c:	e049      	b.n	80034a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b10      	cmp	r3, #16
 800341a:	d119      	bne.n	8003450 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0210 	mvn.w	r2, #16
 8003424:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e030      	b.n	80034b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003450:	f7fe fa3c 	bl	80018cc <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	d302      	bcc.n	8003466 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11d      	bne.n	80034a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003470:	2b40      	cmp	r3, #64	@ 0x40
 8003472:	d016      	beq.n	80034a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f043 0220 	orr.w	r2, r3, #32
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e007      	b.n	80034b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ac:	2b40      	cmp	r3, #64	@ 0x40
 80034ae:	d1ae      	bne.n	800340e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d0:	d11b      	bne.n	800350a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	f043 0204 	orr.w	r2, r3, #4
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e128      	b.n	800377c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a90      	ldr	r2, [pc, #576]	@ (8003784 <HAL_I2S_Init+0x26c>)
 8003542:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7fe f81d 	bl	8001584 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2202      	movs	r2, #2
 800354e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003560:	f023 030f 	bic.w	r3, r3, #15
 8003564:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2202      	movs	r2, #2
 800356c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d060      	beq.n	8003638 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800357e:	2310      	movs	r3, #16
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	e001      	b.n	8003588 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003584:	2320      	movs	r3, #32
 8003586:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b20      	cmp	r3, #32
 800358e:	d802      	bhi.n	8003596 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003596:	2001      	movs	r0, #1
 8003598:	f001 facc 	bl	8004b34 <HAL_RCCEx_GetPeriphCLKFreq>
 800359c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035a6:	d125      	bne.n	80035f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d010      	beq.n	80035d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	461a      	mov	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	3305      	adds	r3, #5
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	e01f      	b.n	8003612 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	461a      	mov	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ee:	3305      	adds	r3, #5
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	e00e      	b.n	8003612 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	461a      	mov	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	fbb2 f3f3 	udiv	r3, r2, r3
 800360e:	3305      	adds	r3, #5
 8003610:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4a5c      	ldr	r2, [pc, #368]	@ (8003788 <HAL_I2S_Init+0x270>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	08db      	lsrs	r3, r3, #3
 800361c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	085b      	lsrs	r3, r3, #1
 800362e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	e003      	b.n	8003640 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003638:	2302      	movs	r3, #2
 800363a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d902      	bls.n	800364c <HAL_I2S_Init+0x134>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	2bff      	cmp	r3, #255	@ 0xff
 800364a:	d907      	bls.n	800365c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003650:	f043 0210 	orr.w	r2, r3, #16
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e08f      	b.n	800377c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	ea42 0103 	orr.w	r1, r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	430a      	orrs	r2, r1
 800366e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800367a:	f023 030f 	bic.w	r3, r3, #15
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6851      	ldr	r1, [r2, #4]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6892      	ldr	r2, [r2, #8]
 8003686:	4311      	orrs	r1, r2
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68d2      	ldr	r2, [r2, #12]
 800368c:	4311      	orrs	r1, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6992      	ldr	r2, [r2, #24]
 8003692:	430a      	orrs	r2, r1
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800369e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d161      	bne.n	800376c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a38      	ldr	r2, [pc, #224]	@ (800378c <HAL_I2S_Init+0x274>)
 80036ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a37      	ldr	r2, [pc, #220]	@ (8003790 <HAL_I2S_Init+0x278>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d101      	bne.n	80036bc <HAL_I2S_Init+0x1a4>
 80036b8:	4b36      	ldr	r3, [pc, #216]	@ (8003794 <HAL_I2S_Init+0x27c>)
 80036ba:	e001      	b.n	80036c0 <HAL_I2S_Init+0x1a8>
 80036bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	4932      	ldr	r1, [pc, #200]	@ (8003790 <HAL_I2S_Init+0x278>)
 80036c8:	428a      	cmp	r2, r1
 80036ca:	d101      	bne.n	80036d0 <HAL_I2S_Init+0x1b8>
 80036cc:	4a31      	ldr	r2, [pc, #196]	@ (8003794 <HAL_I2S_Init+0x27c>)
 80036ce:	e001      	b.n	80036d4 <HAL_I2S_Init+0x1bc>
 80036d0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80036d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80036d8:	f023 030f 	bic.w	r3, r3, #15
 80036dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003790 <HAL_I2S_Init+0x278>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_I2S_Init+0x1d4>
 80036e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003794 <HAL_I2S_Init+0x27c>)
 80036ea:	e001      	b.n	80036f0 <HAL_I2S_Init+0x1d8>
 80036ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036f0:	2202      	movs	r2, #2
 80036f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a25      	ldr	r2, [pc, #148]	@ (8003790 <HAL_I2S_Init+0x278>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_I2S_Init+0x1ea>
 80036fe:	4b25      	ldr	r3, [pc, #148]	@ (8003794 <HAL_I2S_Init+0x27c>)
 8003700:	e001      	b.n	8003706 <HAL_I2S_Init+0x1ee>
 8003702:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003712:	d003      	beq.n	800371c <HAL_I2S_Init+0x204>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d103      	bne.n	8003724 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800371c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	e001      	b.n	8003728 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003732:	4313      	orrs	r3, r2
 8003734:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800373c:	4313      	orrs	r3, r2
 800373e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003746:	4313      	orrs	r3, r2
 8003748:	b29a      	uxth	r2, r3
 800374a:	897b      	ldrh	r3, [r7, #10]
 800374c:	4313      	orrs	r3, r2
 800374e:	b29b      	uxth	r3, r3
 8003750:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003754:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a0d      	ldr	r2, [pc, #52]	@ (8003790 <HAL_I2S_Init+0x278>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_I2S_Init+0x24c>
 8003760:	4b0c      	ldr	r3, [pc, #48]	@ (8003794 <HAL_I2S_Init+0x27c>)
 8003762:	e001      	b.n	8003768 <HAL_I2S_Init+0x250>
 8003764:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003768:	897a      	ldrh	r2, [r7, #10]
 800376a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	08003a85 	.word	0x08003a85
 8003788:	cccccccd 	.word	0xcccccccd
 800378c:	08003b99 	.word	0x08003b99
 8003790:	40003800 	.word	0x40003800
 8003794:	40003400 	.word	0x40003400

08003798 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_I2S_Transmit_DMA+0x1a>
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e08a      	b.n	80038cc <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d001      	beq.n	80037c6 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
 80037c4:	e082      	b.n	80038cc <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_I2S_Transmit_DMA+0x3e>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e07a      	b.n	80038cc <HAL_I2S_Transmit_DMA+0x134>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2203      	movs	r2, #3
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d002      	beq.n	800380a <HAL_I2S_Transmit_DMA+0x72>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b05      	cmp	r3, #5
 8003808:	d10a      	bne.n	8003820 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800381e:	e005      	b.n	800382c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	88fa      	ldrh	r2, [r7, #6]
 800382a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003830:	4a28      	ldr	r2, [pc, #160]	@ (80038d4 <HAL_I2S_Transmit_DMA+0x13c>)
 8003832:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003838:	4a27      	ldr	r2, [pc, #156]	@ (80038d8 <HAL_I2S_Transmit_DMA+0x140>)
 800383a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003840:	4a26      	ldr	r2, [pc, #152]	@ (80038dc <HAL_I2S_Transmit_DMA+0x144>)
 8003842:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800384c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003854:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800385c:	f7fe fa02 	bl	8001c64 <HAL_DMA_Start_IT>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00f      	beq.n	8003886 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	f043 0208 	orr.w	r2, r3, #8
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e022      	b.n	80038cc <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d107      	bne.n	80038ac <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0202 	orr.w	r2, r2, #2
 80038aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d107      	bne.n	80038ca <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038c8:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	08003963 	.word	0x08003963
 80038d8:	08003921 	.word	0x08003921
 80038dc:	0800397f 	.word	0x0800397f

080038e0 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10e      	bne.n	8003954 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0202 	bic.w	r2, r2, #2
 8003944:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f7fd fd8b 	bl	8001470 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7fd fd87 	bl	8001484 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0203 	bic.w	r2, r2, #3
 800399a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b4:	f043 0208 	orr.w	r2, r3, #8
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff ffa5 	bl	800390c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	881a      	ldrh	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	1c9a      	adds	r2, r3, #2
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10e      	bne.n	8003a1e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a0e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7fd fd29 	bl	8001470 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	b292      	uxth	r2, r2
 8003a3a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	1c9a      	adds	r2, r3, #2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10e      	bne.n	8003a7c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a6c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff ff3e 	bl	80038f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d13a      	bne.n	8003b16 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d109      	bne.n	8003abe <I2S_IRQHandler+0x3a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab4:	2b40      	cmp	r3, #64	@ 0x40
 8003ab6:	d102      	bne.n	8003abe <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ffb4 	bl	8003a26 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac4:	2b40      	cmp	r3, #64	@ 0x40
 8003ac6:	d126      	bne.n	8003b16 <I2S_IRQHandler+0x92>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	d11f      	bne.n	8003b16 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ae4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b08:	f043 0202 	orr.w	r2, r3, #2
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff fefb 	bl	800390c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d136      	bne.n	8003b90 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d109      	bne.n	8003b40 <I2S_IRQHandler+0xbc>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b36:	2b80      	cmp	r3, #128	@ 0x80
 8003b38:	d102      	bne.n	8003b40 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ff45 	bl	80039ca <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d122      	bne.n	8003b90 <I2S_IRQHandler+0x10c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d11b      	bne.n	8003b90 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b66:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	f043 0204 	orr.w	r2, r3, #4
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff febe 	bl	800390c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b90:	bf00      	nop
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a92      	ldr	r2, [pc, #584]	@ (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003bb2:	4b92      	ldr	r3, [pc, #584]	@ (8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bb4:	e001      	b.n	8003bba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003bb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a8b      	ldr	r2, [pc, #556]	@ (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d101      	bne.n	8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003bd0:	4b8a      	ldr	r3, [pc, #552]	@ (8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bd2:	e001      	b.n	8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003bd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be4:	d004      	beq.n	8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f040 8099 	bne.w	8003d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d107      	bne.n	8003c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f925 	bl	8003e54 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d107      	bne.n	8003c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9c8 	bl	8003fb4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2a:	2b40      	cmp	r3, #64	@ 0x40
 8003c2c:	d13a      	bne.n	8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d035      	beq.n	8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a6e      	ldr	r2, [pc, #440]	@ (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c42:	4b6e      	ldr	r3, [pc, #440]	@ (8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c44:	e001      	b.n	8003c4a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4969      	ldr	r1, [pc, #420]	@ (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c52:	428b      	cmp	r3, r1
 8003c54:	d101      	bne.n	8003c5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c56:	4b69      	ldr	r3, [pc, #420]	@ (8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c58:	e001      	b.n	8003c5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c62:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c96:	f043 0202 	orr.w	r2, r3, #2
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff fe34 	bl	800390c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	f040 80c3 	bne.w	8003e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80bd 	beq.w	8003e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a49      	ldr	r2, [pc, #292]	@ (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003cd6:	4b49      	ldr	r3, [pc, #292]	@ (8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cd8:	e001      	b.n	8003cde <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003cda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4944      	ldr	r1, [pc, #272]	@ (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ce6:	428b      	cmp	r3, r1
 8003ce8:	d101      	bne.n	8003cee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003cea:	4b44      	ldr	r3, [pc, #272]	@ (8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cec:	e001      	b.n	8003cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003cee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cf2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cf6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d12:	f043 0204 	orr.w	r2, r3, #4
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff fdf6 	bl	800390c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d20:	e089      	b.n	8003e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d107      	bne.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f8be 	bl	8003eb8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d107      	bne.n	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f8fd 	bl	8003f50 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5c:	2b40      	cmp	r3, #64	@ 0x40
 8003d5e:	d12f      	bne.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d02a      	beq.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d78:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d101      	bne.n	8003d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d84:	4b1d      	ldr	r3, [pc, #116]	@ (8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d86:	e001      	b.n	8003d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4919      	ldr	r1, [pc, #100]	@ (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d94:	428b      	cmp	r3, r1
 8003d96:	d101      	bne.n	8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d9a:	e001      	b.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003da0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003da4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db2:	f043 0202 	orr.w	r2, r3, #2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff fda6 	bl	800390c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d136      	bne.n	8003e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d031      	beq.n	8003e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a07      	ldr	r2, [pc, #28]	@ (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003dde:	4b07      	ldr	r3, [pc, #28]	@ (8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003de0:	e001      	b.n	8003de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003de2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4902      	ldr	r1, [pc, #8]	@ (8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dee:	428b      	cmp	r3, r1
 8003df0:	d106      	bne.n	8003e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003df2:	4b02      	ldr	r3, [pc, #8]	@ (8003dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df4:	e006      	b.n	8003e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003df6:	bf00      	nop
 8003df8:	40003800 	.word	0x40003800
 8003dfc:	40003400 	.word	0x40003400
 8003e00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e08:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	f043 0204 	orr.w	r2, r3, #4
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff fd6c 	bl	800390c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e34:	e000      	b.n	8003e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e36:	bf00      	nop
}
 8003e38:	bf00      	nop
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	1c99      	adds	r1, r3, #2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6251      	str	r1, [r2, #36]	@ 0x24
 8003e66:	881a      	ldrh	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d113      	bne.n	8003eae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e94:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d106      	bne.n	8003eae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff ffc9 	bl	8003e40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	1c99      	adds	r1, r3, #2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6251      	str	r1, [r2, #36]	@ 0x24
 8003eca:	8819      	ldrh	r1, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f48 <I2SEx_TxISR_I2SExt+0x90>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <I2SEx_TxISR_I2SExt+0x22>
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f4c <I2SEx_TxISR_I2SExt+0x94>)
 8003ed8:	e001      	b.n	8003ede <I2SEx_TxISR_I2SExt+0x26>
 8003eda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ede:	460a      	mov	r2, r1
 8003ee0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d121      	bne.n	8003f3e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a12      	ldr	r2, [pc, #72]	@ (8003f48 <I2SEx_TxISR_I2SExt+0x90>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d101      	bne.n	8003f08 <I2SEx_TxISR_I2SExt+0x50>
 8003f04:	4b11      	ldr	r3, [pc, #68]	@ (8003f4c <I2SEx_TxISR_I2SExt+0x94>)
 8003f06:	e001      	b.n	8003f0c <I2SEx_TxISR_I2SExt+0x54>
 8003f08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	490d      	ldr	r1, [pc, #52]	@ (8003f48 <I2SEx_TxISR_I2SExt+0x90>)
 8003f14:	428b      	cmp	r3, r1
 8003f16:	d101      	bne.n	8003f1c <I2SEx_TxISR_I2SExt+0x64>
 8003f18:	4b0c      	ldr	r3, [pc, #48]	@ (8003f4c <I2SEx_TxISR_I2SExt+0x94>)
 8003f1a:	e001      	b.n	8003f20 <I2SEx_TxISR_I2SExt+0x68>
 8003f1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ff81 	bl	8003e40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40003800 	.word	0x40003800
 8003f4c:	40003400 	.word	0x40003400

08003f50 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68d8      	ldr	r0, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	1c99      	adds	r1, r3, #2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003f68:	b282      	uxth	r2, r0
 8003f6a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d113      	bne.n	8003fac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f92:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff ff4a 	bl	8003e40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fac:	bf00      	nop
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a20      	ldr	r2, [pc, #128]	@ (8004044 <I2SEx_RxISR_I2SExt+0x90>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d101      	bne.n	8003fca <I2SEx_RxISR_I2SExt+0x16>
 8003fc6:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <I2SEx_RxISR_I2SExt+0x94>)
 8003fc8:	e001      	b.n	8003fce <I2SEx_RxISR_I2SExt+0x1a>
 8003fca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fce:	68d8      	ldr	r0, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	1c99      	adds	r1, r3, #2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003fda:	b282      	uxth	r2, r0
 8003fdc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d121      	bne.n	800403a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a12      	ldr	r2, [pc, #72]	@ (8004044 <I2SEx_RxISR_I2SExt+0x90>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d101      	bne.n	8004004 <I2SEx_RxISR_I2SExt+0x50>
 8004000:	4b11      	ldr	r3, [pc, #68]	@ (8004048 <I2SEx_RxISR_I2SExt+0x94>)
 8004002:	e001      	b.n	8004008 <I2SEx_RxISR_I2SExt+0x54>
 8004004:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	490d      	ldr	r1, [pc, #52]	@ (8004044 <I2SEx_RxISR_I2SExt+0x90>)
 8004010:	428b      	cmp	r3, r1
 8004012:	d101      	bne.n	8004018 <I2SEx_RxISR_I2SExt+0x64>
 8004014:	4b0c      	ldr	r3, [pc, #48]	@ (8004048 <I2SEx_RxISR_I2SExt+0x94>)
 8004016:	e001      	b.n	800401c <I2SEx_RxISR_I2SExt+0x68>
 8004018:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800401c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004020:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ff03 	bl	8003e40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40003800 	.word	0x40003800
 8004048:	40003400 	.word	0x40003400

0800404c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e267      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d075      	beq.n	8004156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800406a:	4b88      	ldr	r3, [pc, #544]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b04      	cmp	r3, #4
 8004074:	d00c      	beq.n	8004090 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004076:	4b85      	ldr	r3, [pc, #532]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800407e:	2b08      	cmp	r3, #8
 8004080:	d112      	bne.n	80040a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004082:	4b82      	ldr	r3, [pc, #520]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800408a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800408e:	d10b      	bne.n	80040a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004090:	4b7e      	ldr	r3, [pc, #504]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d05b      	beq.n	8004154 <HAL_RCC_OscConfig+0x108>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d157      	bne.n	8004154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e242      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b0:	d106      	bne.n	80040c0 <HAL_RCC_OscConfig+0x74>
 80040b2:	4b76      	ldr	r3, [pc, #472]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a75      	ldr	r2, [pc, #468]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80040b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e01d      	b.n	80040fc <HAL_RCC_OscConfig+0xb0>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x98>
 80040ca:	4b70      	ldr	r3, [pc, #448]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a6f      	ldr	r2, [pc, #444]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80040d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4b6d      	ldr	r3, [pc, #436]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a6c      	ldr	r2, [pc, #432]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e00b      	b.n	80040fc <HAL_RCC_OscConfig+0xb0>
 80040e4:	4b69      	ldr	r3, [pc, #420]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a68      	ldr	r2, [pc, #416]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80040ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4b66      	ldr	r3, [pc, #408]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a65      	ldr	r2, [pc, #404]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d013      	beq.n	800412c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004104:	f7fd fbe2 	bl	80018cc <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410c:	f7fd fbde 	bl	80018cc <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	@ 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e207      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	4b5b      	ldr	r3, [pc, #364]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0xc0>
 800412a:	e014      	b.n	8004156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412c:	f7fd fbce 	bl	80018cc <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004134:	f7fd fbca 	bl	80018cc <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	@ 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e1f3      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004146:	4b51      	ldr	r3, [pc, #324]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0xe8>
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d063      	beq.n	800422a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004162:	4b4a      	ldr	r3, [pc, #296]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800416e:	4b47      	ldr	r3, [pc, #284]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004176:	2b08      	cmp	r3, #8
 8004178:	d11c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800417a:	4b44      	ldr	r3, [pc, #272]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d116      	bne.n	80041b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004186:	4b41      	ldr	r3, [pc, #260]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_RCC_OscConfig+0x152>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d001      	beq.n	800419e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e1c7      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419e:	4b3b      	ldr	r3, [pc, #236]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4937      	ldr	r1, [pc, #220]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b2:	e03a      	b.n	800422a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d020      	beq.n	80041fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041bc:	4b34      	ldr	r3, [pc, #208]	@ (8004290 <HAL_RCC_OscConfig+0x244>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fd fb83 	bl	80018cc <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ca:	f7fd fb7f 	bl	80018cc <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e1a8      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041dc:	4b2b      	ldr	r3, [pc, #172]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e8:	4b28      	ldr	r3, [pc, #160]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4925      	ldr	r1, [pc, #148]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]
 80041fc:	e015      	b.n	800422a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041fe:	4b24      	ldr	r3, [pc, #144]	@ (8004290 <HAL_RCC_OscConfig+0x244>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fd fb62 	bl	80018cc <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420c:	f7fd fb5e 	bl	80018cc <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e187      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421e:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d036      	beq.n	80042a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d016      	beq.n	800426c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800423e:	4b15      	ldr	r3, [pc, #84]	@ (8004294 <HAL_RCC_OscConfig+0x248>)
 8004240:	2201      	movs	r2, #1
 8004242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004244:	f7fd fb42 	bl	80018cc <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800424c:	f7fd fb3e 	bl	80018cc <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e167      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425e:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <HAL_RCC_OscConfig+0x240>)
 8004260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0x200>
 800426a:	e01b      	b.n	80042a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800426c:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <HAL_RCC_OscConfig+0x248>)
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004272:	f7fd fb2b 	bl	80018cc <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004278:	e00e      	b.n	8004298 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427a:	f7fd fb27 	bl	80018cc <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d907      	bls.n	8004298 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e150      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
 800428c:	40023800 	.word	0x40023800
 8004290:	42470000 	.word	0x42470000
 8004294:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004298:	4b88      	ldr	r3, [pc, #544]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 800429a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ea      	bne.n	800427a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8097 	beq.w	80043e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b2:	2300      	movs	r3, #0
 80042b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b6:	4b81      	ldr	r3, [pc, #516]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10f      	bne.n	80042e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	4b7d      	ldr	r3, [pc, #500]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	4a7c      	ldr	r2, [pc, #496]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 80042cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042d2:	4b7a      	ldr	r3, [pc, #488]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042de:	2301      	movs	r3, #1
 80042e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e2:	4b77      	ldr	r3, [pc, #476]	@ (80044c0 <HAL_RCC_OscConfig+0x474>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d118      	bne.n	8004320 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ee:	4b74      	ldr	r3, [pc, #464]	@ (80044c0 <HAL_RCC_OscConfig+0x474>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a73      	ldr	r2, [pc, #460]	@ (80044c0 <HAL_RCC_OscConfig+0x474>)
 80042f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fa:	f7fd fae7 	bl	80018cc <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004302:	f7fd fae3 	bl	80018cc <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e10c      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004314:	4b6a      	ldr	r3, [pc, #424]	@ (80044c0 <HAL_RCC_OscConfig+0x474>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d106      	bne.n	8004336 <HAL_RCC_OscConfig+0x2ea>
 8004328:	4b64      	ldr	r3, [pc, #400]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 800432a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432c:	4a63      	ldr	r2, [pc, #396]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	6713      	str	r3, [r2, #112]	@ 0x70
 8004334:	e01c      	b.n	8004370 <HAL_RCC_OscConfig+0x324>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b05      	cmp	r3, #5
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0x30c>
 800433e:	4b5f      	ldr	r3, [pc, #380]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004342:	4a5e      	ldr	r2, [pc, #376]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 8004344:	f043 0304 	orr.w	r3, r3, #4
 8004348:	6713      	str	r3, [r2, #112]	@ 0x70
 800434a:	4b5c      	ldr	r3, [pc, #368]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434e:	4a5b      	ldr	r2, [pc, #364]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	6713      	str	r3, [r2, #112]	@ 0x70
 8004356:	e00b      	b.n	8004370 <HAL_RCC_OscConfig+0x324>
 8004358:	4b58      	ldr	r3, [pc, #352]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 800435a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435c:	4a57      	ldr	r2, [pc, #348]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	6713      	str	r3, [r2, #112]	@ 0x70
 8004364:	4b55      	ldr	r3, [pc, #340]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 8004366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004368:	4a54      	ldr	r2, [pc, #336]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 800436a:	f023 0304 	bic.w	r3, r3, #4
 800436e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d015      	beq.n	80043a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fd faa8 	bl	80018cc <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437e:	e00a      	b.n	8004396 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004380:	f7fd faa4 	bl	80018cc <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e0cb      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004396:	4b49      	ldr	r3, [pc, #292]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0ee      	beq.n	8004380 <HAL_RCC_OscConfig+0x334>
 80043a2:	e014      	b.n	80043ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a4:	f7fd fa92 	bl	80018cc <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043aa:	e00a      	b.n	80043c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ac:	f7fd fa8e 	bl	80018cc <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e0b5      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c2:	4b3e      	ldr	r3, [pc, #248]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1ee      	bne.n	80043ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d105      	bne.n	80043e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d4:	4b39      	ldr	r3, [pc, #228]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	4a38      	ldr	r2, [pc, #224]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 80043da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80a1 	beq.w	800452c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ea:	4b34      	ldr	r3, [pc, #208]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d05c      	beq.n	80044b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d141      	bne.n	8004482 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fe:	4b31      	ldr	r3, [pc, #196]	@ (80044c4 <HAL_RCC_OscConfig+0x478>)
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fd fa62 	bl	80018cc <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440c:	f7fd fa5e 	bl	80018cc <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e087      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441e:	4b27      	ldr	r3, [pc, #156]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004438:	019b      	lsls	r3, r3, #6
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	085b      	lsrs	r3, r3, #1
 8004442:	3b01      	subs	r3, #1
 8004444:	041b      	lsls	r3, r3, #16
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	491b      	ldr	r1, [pc, #108]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004454:	4b1b      	ldr	r3, [pc, #108]	@ (80044c4 <HAL_RCC_OscConfig+0x478>)
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445a:	f7fd fa37 	bl	80018cc <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004462:	f7fd fa33 	bl	80018cc <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e05c      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004474:	4b11      	ldr	r3, [pc, #68]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x416>
 8004480:	e054      	b.n	800452c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b10      	ldr	r3, [pc, #64]	@ (80044c4 <HAL_RCC_OscConfig+0x478>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fd fa20 	bl	80018cc <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004490:	f7fd fa1c 	bl	80018cc <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e045      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a2:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <HAL_RCC_OscConfig+0x470>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x444>
 80044ae:	e03d      	b.n	800452c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d107      	bne.n	80044c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e038      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
 80044bc:	40023800 	.word	0x40023800
 80044c0:	40007000 	.word	0x40007000
 80044c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004538 <HAL_RCC_OscConfig+0x4ec>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d028      	beq.n	8004528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d121      	bne.n	8004528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d11a      	bne.n	8004528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044f8:	4013      	ands	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004500:	4293      	cmp	r3, r2
 8004502:	d111      	bne.n	8004528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	3b01      	subs	r3, #1
 8004512:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d107      	bne.n	8004528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004522:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40023800 	.word	0x40023800

0800453c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0cc      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004550:	4b68      	ldr	r3, [pc, #416]	@ (80046f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d90c      	bls.n	8004578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455e:	4b65      	ldr	r3, [pc, #404]	@ (80046f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004566:	4b63      	ldr	r3, [pc, #396]	@ (80046f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d001      	beq.n	8004578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0b8      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d020      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004590:	4b59      	ldr	r3, [pc, #356]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4a58      	ldr	r2, [pc, #352]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800459a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a8:	4b53      	ldr	r3, [pc, #332]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	4a52      	ldr	r2, [pc, #328]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b4:	4b50      	ldr	r3, [pc, #320]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	494d      	ldr	r1, [pc, #308]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d044      	beq.n	800465c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045da:	4b47      	ldr	r3, [pc, #284]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d119      	bne.n	800461a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e07f      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d003      	beq.n	80045fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fa:	4b3f      	ldr	r3, [pc, #252]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e06f      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460a:	4b3b      	ldr	r3, [pc, #236]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e067      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461a:	4b37      	ldr	r3, [pc, #220]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f023 0203 	bic.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4934      	ldr	r1, [pc, #208]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	4313      	orrs	r3, r2
 800462a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800462c:	f7fd f94e 	bl	80018cc <HAL_GetTick>
 8004630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	e00a      	b.n	800464a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004634:	f7fd f94a 	bl	80018cc <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e04f      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464a:	4b2b      	ldr	r3, [pc, #172]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 020c 	and.w	r2, r3, #12
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	429a      	cmp	r2, r3
 800465a:	d1eb      	bne.n	8004634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800465c:	4b25      	ldr	r3, [pc, #148]	@ (80046f4 <HAL_RCC_ClockConfig+0x1b8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d20c      	bcs.n	8004684 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b22      	ldr	r3, [pc, #136]	@ (80046f4 <HAL_RCC_ClockConfig+0x1b8>)
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004672:	4b20      	ldr	r3, [pc, #128]	@ (80046f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e032      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004690:	4b19      	ldr	r3, [pc, #100]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4916      	ldr	r1, [pc, #88]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ae:	4b12      	ldr	r3, [pc, #72]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	490e      	ldr	r1, [pc, #56]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046c2:	f000 f821 	bl	8004708 <HAL_RCC_GetSysClockFreq>
 80046c6:	4602      	mov	r2, r0
 80046c8:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	490a      	ldr	r1, [pc, #40]	@ (80046fc <HAL_RCC_ClockConfig+0x1c0>)
 80046d4:	5ccb      	ldrb	r3, [r1, r3]
 80046d6:	fa22 f303 	lsr.w	r3, r2, r3
 80046da:	4a09      	ldr	r2, [pc, #36]	@ (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 80046dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046de:	4b09      	ldr	r3, [pc, #36]	@ (8004704 <HAL_RCC_ClockConfig+0x1c8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fd f8ae 	bl	8001844 <HAL_InitTick>

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40023c00 	.word	0x40023c00
 80046f8:	40023800 	.word	0x40023800
 80046fc:	08005cf8 	.word	0x08005cf8
 8004700:	20000004 	.word	0x20000004
 8004704:	20000008 	.word	0x20000008

08004708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800470c:	b094      	sub	sp, #80	@ 0x50
 800470e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004720:	4b79      	ldr	r3, [pc, #484]	@ (8004908 <HAL_RCC_GetSysClockFreq+0x200>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 030c 	and.w	r3, r3, #12
 8004728:	2b08      	cmp	r3, #8
 800472a:	d00d      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0x40>
 800472c:	2b08      	cmp	r3, #8
 800472e:	f200 80e1 	bhi.w	80048f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0x34>
 8004736:	2b04      	cmp	r3, #4
 8004738:	d003      	beq.n	8004742 <HAL_RCC_GetSysClockFreq+0x3a>
 800473a:	e0db      	b.n	80048f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800473c:	4b73      	ldr	r3, [pc, #460]	@ (800490c <HAL_RCC_GetSysClockFreq+0x204>)
 800473e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004740:	e0db      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004742:	4b73      	ldr	r3, [pc, #460]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x208>)
 8004744:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004746:	e0d8      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004748:	4b6f      	ldr	r3, [pc, #444]	@ (8004908 <HAL_RCC_GetSysClockFreq+0x200>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004750:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004752:	4b6d      	ldr	r3, [pc, #436]	@ (8004908 <HAL_RCC_GetSysClockFreq+0x200>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d063      	beq.n	8004826 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475e:	4b6a      	ldr	r3, [pc, #424]	@ (8004908 <HAL_RCC_GetSysClockFreq+0x200>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	099b      	lsrs	r3, r3, #6
 8004764:	2200      	movs	r2, #0
 8004766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004768:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800476a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004770:	633b      	str	r3, [r7, #48]	@ 0x30
 8004772:	2300      	movs	r3, #0
 8004774:	637b      	str	r3, [r7, #52]	@ 0x34
 8004776:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800477a:	4622      	mov	r2, r4
 800477c:	462b      	mov	r3, r5
 800477e:	f04f 0000 	mov.w	r0, #0
 8004782:	f04f 0100 	mov.w	r1, #0
 8004786:	0159      	lsls	r1, r3, #5
 8004788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800478c:	0150      	lsls	r0, r2, #5
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4621      	mov	r1, r4
 8004794:	1a51      	subs	r1, r2, r1
 8004796:	6139      	str	r1, [r7, #16]
 8004798:	4629      	mov	r1, r5
 800479a:	eb63 0301 	sbc.w	r3, r3, r1
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047ac:	4659      	mov	r1, fp
 80047ae:	018b      	lsls	r3, r1, #6
 80047b0:	4651      	mov	r1, sl
 80047b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047b6:	4651      	mov	r1, sl
 80047b8:	018a      	lsls	r2, r1, #6
 80047ba:	4651      	mov	r1, sl
 80047bc:	ebb2 0801 	subs.w	r8, r2, r1
 80047c0:	4659      	mov	r1, fp
 80047c2:	eb63 0901 	sbc.w	r9, r3, r1
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047da:	4690      	mov	r8, r2
 80047dc:	4699      	mov	r9, r3
 80047de:	4623      	mov	r3, r4
 80047e0:	eb18 0303 	adds.w	r3, r8, r3
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	462b      	mov	r3, r5
 80047e8:	eb49 0303 	adc.w	r3, r9, r3
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047fa:	4629      	mov	r1, r5
 80047fc:	024b      	lsls	r3, r1, #9
 80047fe:	4621      	mov	r1, r4
 8004800:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004804:	4621      	mov	r1, r4
 8004806:	024a      	lsls	r2, r1, #9
 8004808:	4610      	mov	r0, r2
 800480a:	4619      	mov	r1, r3
 800480c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480e:	2200      	movs	r2, #0
 8004810:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004812:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004814:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004818:	f7fc f874 	bl	8000904 <__aeabi_uldivmod>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4613      	mov	r3, r2
 8004822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004824:	e058      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004826:	4b38      	ldr	r3, [pc, #224]	@ (8004908 <HAL_RCC_GetSysClockFreq+0x200>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	099b      	lsrs	r3, r3, #6
 800482c:	2200      	movs	r2, #0
 800482e:	4618      	mov	r0, r3
 8004830:	4611      	mov	r1, r2
 8004832:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004836:	623b      	str	r3, [r7, #32]
 8004838:	2300      	movs	r3, #0
 800483a:	627b      	str	r3, [r7, #36]	@ 0x24
 800483c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	f04f 0000 	mov.w	r0, #0
 8004848:	f04f 0100 	mov.w	r1, #0
 800484c:	0159      	lsls	r1, r3, #5
 800484e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004852:	0150      	lsls	r0, r2, #5
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4641      	mov	r1, r8
 800485a:	ebb2 0a01 	subs.w	sl, r2, r1
 800485e:	4649      	mov	r1, r9
 8004860:	eb63 0b01 	sbc.w	fp, r3, r1
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004870:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004874:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004878:	ebb2 040a 	subs.w	r4, r2, sl
 800487c:	eb63 050b 	sbc.w	r5, r3, fp
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	00eb      	lsls	r3, r5, #3
 800488a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800488e:	00e2      	lsls	r2, r4, #3
 8004890:	4614      	mov	r4, r2
 8004892:	461d      	mov	r5, r3
 8004894:	4643      	mov	r3, r8
 8004896:	18e3      	adds	r3, r4, r3
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	464b      	mov	r3, r9
 800489c:	eb45 0303 	adc.w	r3, r5, r3
 80048a0:	607b      	str	r3, [r7, #4]
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ae:	4629      	mov	r1, r5
 80048b0:	028b      	lsls	r3, r1, #10
 80048b2:	4621      	mov	r1, r4
 80048b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048b8:	4621      	mov	r1, r4
 80048ba:	028a      	lsls	r2, r1, #10
 80048bc:	4610      	mov	r0, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048c2:	2200      	movs	r2, #0
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	61fa      	str	r2, [r7, #28]
 80048c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048cc:	f7fc f81a 	bl	8000904 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4613      	mov	r3, r2
 80048d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004908 <HAL_RCC_GetSysClockFreq+0x200>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	0c1b      	lsrs	r3, r3, #16
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	3301      	adds	r3, #1
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80048e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048f2:	e002      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048f4:	4b05      	ldr	r3, [pc, #20]	@ (800490c <HAL_RCC_GetSysClockFreq+0x204>)
 80048f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3750      	adds	r7, #80	@ 0x50
 8004900:	46bd      	mov	sp, r7
 8004902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004906:	bf00      	nop
 8004908:	40023800 	.word	0x40023800
 800490c:	00f42400 	.word	0x00f42400
 8004910:	007a1200 	.word	0x007a1200

08004914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004918:	4b03      	ldr	r3, [pc, #12]	@ (8004928 <HAL_RCC_GetHCLKFreq+0x14>)
 800491a:	681b      	ldr	r3, [r3, #0]
}
 800491c:	4618      	mov	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000004 	.word	0x20000004

0800492c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004930:	f7ff fff0 	bl	8004914 <HAL_RCC_GetHCLKFreq>
 8004934:	4602      	mov	r2, r0
 8004936:	4b05      	ldr	r3, [pc, #20]	@ (800494c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	0a9b      	lsrs	r3, r3, #10
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	4903      	ldr	r1, [pc, #12]	@ (8004950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004942:	5ccb      	ldrb	r3, [r1, r3]
 8004944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004948:	4618      	mov	r0, r3
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40023800 	.word	0x40023800
 8004950:	08005d08 	.word	0x08005d08

08004954 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d105      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004978:	2b00      	cmp	r3, #0
 800497a:	d038      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800497c:	4b68      	ldr	r3, [pc, #416]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004982:	f7fc ffa3 	bl	80018cc <HAL_GetTick>
 8004986:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004988:	e008      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800498a:	f7fc ff9f 	bl	80018cc <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0bd      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800499c:	4b61      	ldr	r3, [pc, #388]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f0      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	071b      	lsls	r3, r3, #28
 80049ba:	495a      	ldr	r1, [pc, #360]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049c2:	4b57      	ldr	r3, [pc, #348]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049c8:	f7fc ff80 	bl	80018cc <HAL_GetTick>
 80049cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049d0:	f7fc ff7c 	bl	80018cc <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e09a      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049e2:	4b50      	ldr	r3, [pc, #320]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 8083 	beq.w	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	4b48      	ldr	r3, [pc, #288]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a04:	4a47      	ldr	r2, [pc, #284]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a0c:	4b45      	ldr	r3, [pc, #276]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a18:	4b43      	ldr	r3, [pc, #268]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a42      	ldr	r2, [pc, #264]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a22:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a24:	f7fc ff52 	bl	80018cc <HAL_GetTick>
 8004a28:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2c:	f7fc ff4e 	bl	80018cc <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e06c      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a4a:	4b36      	ldr	r3, [pc, #216]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a52:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d02f      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d028      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a68:	4b2e      	ldr	r3, [pc, #184]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a70:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a72:	4b2e      	ldr	r3, [pc, #184]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a78:	4b2c      	ldr	r3, [pc, #176]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a7e:	4a29      	ldr	r2, [pc, #164]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a84:	4b27      	ldr	r3, [pc, #156]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d114      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a90:	f7fc ff1c 	bl	80018cc <HAL_GetTick>
 8004a94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a96:	e00a      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a98:	f7fc ff18 	bl	80018cc <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e034      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aae:	4b1d      	ldr	r3, [pc, #116]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0ee      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ac2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ac6:	d10d      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004ac8:	4b16      	ldr	r3, [pc, #88]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004adc:	4911      	ldr	r1, [pc, #68]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]
 8004ae2:	e005      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004aee:	6093      	str	r3, [r2, #8]
 8004af0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afc:	4909      	ldr	r1, [pc, #36]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	7d1a      	ldrb	r2, [r3, #20]
 8004b12:	4b07      	ldr	r3, [pc, #28]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004b14:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	42470068 	.word	0x42470068
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40007000 	.word	0x40007000
 8004b2c:	42470e40 	.word	0x42470e40
 8004b30:	424711e0 	.word	0x424711e0

08004b34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d141      	bne.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b52:	4b25      	ldr	r3, [pc, #148]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d006      	beq.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b68:	d131      	bne.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b6a:	4b20      	ldr	r3, [pc, #128]	@ (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004b6c:	617b      	str	r3, [r7, #20]
          break;
 8004b6e:	e031      	b.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b70:	4b1d      	ldr	r3, [pc, #116]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b7c:	d109      	bne.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b88:	4a19      	ldr	r2, [pc, #100]	@ (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	e008      	b.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004b92:	4b15      	ldr	r3, [pc, #84]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b9c:	4a15      	ldr	r2, [pc, #84]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ba4:	4b10      	ldr	r3, [pc, #64]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004baa:	099b      	lsrs	r3, r3, #6
 8004bac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bbe:	0f1b      	lsrs	r3, r3, #28
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bca:	617b      	str	r3, [r7, #20]
          break;
 8004bcc:	e002      	b.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
          break;
 8004bd2:	bf00      	nop
        }
      }
      break;
 8004bd4:	e000      	b.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8004bd6:	bf00      	nop
    }
  }
  return frequency;
 8004bd8:	697b      	ldr	r3, [r7, #20]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40023800 	.word	0x40023800
 8004bec:	00bb8000 	.word	0x00bb8000
 8004bf0:	007a1200 	.word	0x007a1200
 8004bf4:	00f42400 	.word	0x00f42400

08004bf8 <memset>:
 8004bf8:	4402      	add	r2, r0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d100      	bne.n	8004c02 <memset+0xa>
 8004c00:	4770      	bx	lr
 8004c02:	f803 1b01 	strb.w	r1, [r3], #1
 8004c06:	e7f9      	b.n	8004bfc <memset+0x4>

08004c08 <__libc_init_array>:
 8004c08:	b570      	push	{r4, r5, r6, lr}
 8004c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8004c40 <__libc_init_array+0x38>)
 8004c0c:	4c0d      	ldr	r4, [pc, #52]	@ (8004c44 <__libc_init_array+0x3c>)
 8004c0e:	1b64      	subs	r4, r4, r5
 8004c10:	10a4      	asrs	r4, r4, #2
 8004c12:	2600      	movs	r6, #0
 8004c14:	42a6      	cmp	r6, r4
 8004c16:	d109      	bne.n	8004c2c <__libc_init_array+0x24>
 8004c18:	4d0b      	ldr	r5, [pc, #44]	@ (8004c48 <__libc_init_array+0x40>)
 8004c1a:	4c0c      	ldr	r4, [pc, #48]	@ (8004c4c <__libc_init_array+0x44>)
 8004c1c:	f001 f858 	bl	8005cd0 <_init>
 8004c20:	1b64      	subs	r4, r4, r5
 8004c22:	10a4      	asrs	r4, r4, #2
 8004c24:	2600      	movs	r6, #0
 8004c26:	42a6      	cmp	r6, r4
 8004c28:	d105      	bne.n	8004c36 <__libc_init_array+0x2e>
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
 8004c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c30:	4798      	blx	r3
 8004c32:	3601      	adds	r6, #1
 8004c34:	e7ee      	b.n	8004c14 <__libc_init_array+0xc>
 8004c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3a:	4798      	blx	r3
 8004c3c:	3601      	adds	r6, #1
 8004c3e:	e7f2      	b.n	8004c26 <__libc_init_array+0x1e>
 8004c40:	08005ef8 	.word	0x08005ef8
 8004c44:	08005ef8 	.word	0x08005ef8
 8004c48:	08005ef8 	.word	0x08005ef8
 8004c4c:	08005efc 	.word	0x08005efc

08004c50 <memcpy>:
 8004c50:	440a      	add	r2, r1
 8004c52:	4291      	cmp	r1, r2
 8004c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c58:	d100      	bne.n	8004c5c <memcpy+0xc>
 8004c5a:	4770      	bx	lr
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c66:	4291      	cmp	r1, r2
 8004c68:	d1f9      	bne.n	8004c5e <memcpy+0xe>
 8004c6a:	bd10      	pop	{r4, pc}
 8004c6c:	0000      	movs	r0, r0
	...

08004c70 <sin>:
 8004c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c72:	ec53 2b10 	vmov	r2, r3, d0
 8004c76:	4826      	ldr	r0, [pc, #152]	@ (8004d10 <sin+0xa0>)
 8004c78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004c7c:	4281      	cmp	r1, r0
 8004c7e:	d807      	bhi.n	8004c90 <sin+0x20>
 8004c80:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004d08 <sin+0x98>
 8004c84:	2000      	movs	r0, #0
 8004c86:	b005      	add	sp, #20
 8004c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c8c:	f000 b90c 	b.w	8004ea8 <__kernel_sin>
 8004c90:	4820      	ldr	r0, [pc, #128]	@ (8004d14 <sin+0xa4>)
 8004c92:	4281      	cmp	r1, r0
 8004c94:	d908      	bls.n	8004ca8 <sin+0x38>
 8004c96:	4610      	mov	r0, r2
 8004c98:	4619      	mov	r1, r3
 8004c9a:	f7fb fbcb 	bl	8000434 <__aeabi_dsub>
 8004c9e:	ec41 0b10 	vmov	d0, r0, r1
 8004ca2:	b005      	add	sp, #20
 8004ca4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ca8:	4668      	mov	r0, sp
 8004caa:	f000 f9b9 	bl	8005020 <__ieee754_rem_pio2>
 8004cae:	f000 0003 	and.w	r0, r0, #3
 8004cb2:	2801      	cmp	r0, #1
 8004cb4:	d00c      	beq.n	8004cd0 <sin+0x60>
 8004cb6:	2802      	cmp	r0, #2
 8004cb8:	d011      	beq.n	8004cde <sin+0x6e>
 8004cba:	b9e8      	cbnz	r0, 8004cf8 <sin+0x88>
 8004cbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004cc0:	ed9d 0b00 	vldr	d0, [sp]
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f000 f8ef 	bl	8004ea8 <__kernel_sin>
 8004cca:	ec51 0b10 	vmov	r0, r1, d0
 8004cce:	e7e6      	b.n	8004c9e <sin+0x2e>
 8004cd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004cd4:	ed9d 0b00 	vldr	d0, [sp]
 8004cd8:	f000 f81e 	bl	8004d18 <__kernel_cos>
 8004cdc:	e7f5      	b.n	8004cca <sin+0x5a>
 8004cde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004ce2:	ed9d 0b00 	vldr	d0, [sp]
 8004ce6:	2001      	movs	r0, #1
 8004ce8:	f000 f8de 	bl	8004ea8 <__kernel_sin>
 8004cec:	ec53 2b10 	vmov	r2, r3, d0
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004cf6:	e7d2      	b.n	8004c9e <sin+0x2e>
 8004cf8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004cfc:	ed9d 0b00 	vldr	d0, [sp]
 8004d00:	f000 f80a 	bl	8004d18 <__kernel_cos>
 8004d04:	e7f2      	b.n	8004cec <sin+0x7c>
 8004d06:	bf00      	nop
	...
 8004d10:	3fe921fb 	.word	0x3fe921fb
 8004d14:	7fefffff 	.word	0x7fefffff

08004d18 <__kernel_cos>:
 8004d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	ec57 6b10 	vmov	r6, r7, d0
 8004d20:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004d24:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004d28:	ed8d 1b00 	vstr	d1, [sp]
 8004d2c:	d206      	bcs.n	8004d3c <__kernel_cos+0x24>
 8004d2e:	4630      	mov	r0, r6
 8004d30:	4639      	mov	r1, r7
 8004d32:	f7fb fdbf 	bl	80008b4 <__aeabi_d2iz>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	f000 8088 	beq.w	8004e4c <__kernel_cos+0x134>
 8004d3c:	4632      	mov	r2, r6
 8004d3e:	463b      	mov	r3, r7
 8004d40:	4630      	mov	r0, r6
 8004d42:	4639      	mov	r1, r7
 8004d44:	f7fb fa48 	bl	80001d8 <__aeabi_dmul>
 8004d48:	4b51      	ldr	r3, [pc, #324]	@ (8004e90 <__kernel_cos+0x178>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	460d      	mov	r5, r1
 8004d50:	f7fb fa42 	bl	80001d8 <__aeabi_dmul>
 8004d54:	a340      	add	r3, pc, #256	@ (adr r3, 8004e58 <__kernel_cos+0x140>)
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	4682      	mov	sl, r0
 8004d5c:	468b      	mov	fp, r1
 8004d5e:	4620      	mov	r0, r4
 8004d60:	4629      	mov	r1, r5
 8004d62:	f7fb fa39 	bl	80001d8 <__aeabi_dmul>
 8004d66:	a33e      	add	r3, pc, #248	@ (adr r3, 8004e60 <__kernel_cos+0x148>)
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb fb64 	bl	8000438 <__adddf3>
 8004d70:	4622      	mov	r2, r4
 8004d72:	462b      	mov	r3, r5
 8004d74:	f7fb fa30 	bl	80001d8 <__aeabi_dmul>
 8004d78:	a33b      	add	r3, pc, #236	@ (adr r3, 8004e68 <__kernel_cos+0x150>)
 8004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7e:	f7fb fb59 	bl	8000434 <__aeabi_dsub>
 8004d82:	4622      	mov	r2, r4
 8004d84:	462b      	mov	r3, r5
 8004d86:	f7fb fa27 	bl	80001d8 <__aeabi_dmul>
 8004d8a:	a339      	add	r3, pc, #228	@ (adr r3, 8004e70 <__kernel_cos+0x158>)
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	f7fb fb52 	bl	8000438 <__adddf3>
 8004d94:	4622      	mov	r2, r4
 8004d96:	462b      	mov	r3, r5
 8004d98:	f7fb fa1e 	bl	80001d8 <__aeabi_dmul>
 8004d9c:	a336      	add	r3, pc, #216	@ (adr r3, 8004e78 <__kernel_cos+0x160>)
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	f7fb fb47 	bl	8000434 <__aeabi_dsub>
 8004da6:	4622      	mov	r2, r4
 8004da8:	462b      	mov	r3, r5
 8004daa:	f7fb fa15 	bl	80001d8 <__aeabi_dmul>
 8004dae:	a334      	add	r3, pc, #208	@ (adr r3, 8004e80 <__kernel_cos+0x168>)
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f7fb fb40 	bl	8000438 <__adddf3>
 8004db8:	4622      	mov	r2, r4
 8004dba:	462b      	mov	r3, r5
 8004dbc:	f7fb fa0c 	bl	80001d8 <__aeabi_dmul>
 8004dc0:	4622      	mov	r2, r4
 8004dc2:	462b      	mov	r3, r5
 8004dc4:	f7fb fa08 	bl	80001d8 <__aeabi_dmul>
 8004dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dcc:	4604      	mov	r4, r0
 8004dce:	460d      	mov	r5, r1
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	4639      	mov	r1, r7
 8004dd4:	f7fb fa00 	bl	80001d8 <__aeabi_dmul>
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4602      	mov	r2, r0
 8004ddc:	4629      	mov	r1, r5
 8004dde:	4620      	mov	r0, r4
 8004de0:	f7fb fb28 	bl	8000434 <__aeabi_dsub>
 8004de4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e94 <__kernel_cos+0x17c>)
 8004de6:	4598      	cmp	r8, r3
 8004de8:	4606      	mov	r6, r0
 8004dea:	460f      	mov	r7, r1
 8004dec:	d810      	bhi.n	8004e10 <__kernel_cos+0xf8>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4650      	mov	r0, sl
 8004df4:	4659      	mov	r1, fp
 8004df6:	f7fb fb1d 	bl	8000434 <__aeabi_dsub>
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4926      	ldr	r1, [pc, #152]	@ (8004e98 <__kernel_cos+0x180>)
 8004dfe:	4602      	mov	r2, r0
 8004e00:	2000      	movs	r0, #0
 8004e02:	f7fb fb17 	bl	8000434 <__aeabi_dsub>
 8004e06:	ec41 0b10 	vmov	d0, r0, r1
 8004e0a:	b003      	add	sp, #12
 8004e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e10:	4b22      	ldr	r3, [pc, #136]	@ (8004e9c <__kernel_cos+0x184>)
 8004e12:	4921      	ldr	r1, [pc, #132]	@ (8004e98 <__kernel_cos+0x180>)
 8004e14:	4598      	cmp	r8, r3
 8004e16:	bf8c      	ite	hi
 8004e18:	4d21      	ldrhi	r5, [pc, #132]	@ (8004ea0 <__kernel_cos+0x188>)
 8004e1a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8004e1e:	2400      	movs	r4, #0
 8004e20:	4622      	mov	r2, r4
 8004e22:	462b      	mov	r3, r5
 8004e24:	2000      	movs	r0, #0
 8004e26:	f7fb fb05 	bl	8000434 <__aeabi_dsub>
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	4680      	mov	r8, r0
 8004e2e:	4689      	mov	r9, r1
 8004e30:	462b      	mov	r3, r5
 8004e32:	4650      	mov	r0, sl
 8004e34:	4659      	mov	r1, fp
 8004e36:	f7fb fafd 	bl	8000434 <__aeabi_dsub>
 8004e3a:	4632      	mov	r2, r6
 8004e3c:	463b      	mov	r3, r7
 8004e3e:	f7fb faf9 	bl	8000434 <__aeabi_dsub>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4640      	mov	r0, r8
 8004e48:	4649      	mov	r1, r9
 8004e4a:	e7da      	b.n	8004e02 <__kernel_cos+0xea>
 8004e4c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004e88 <__kernel_cos+0x170>
 8004e50:	e7db      	b.n	8004e0a <__kernel_cos+0xf2>
 8004e52:	bf00      	nop
 8004e54:	f3af 8000 	nop.w
 8004e58:	be8838d4 	.word	0xbe8838d4
 8004e5c:	bda8fae9 	.word	0xbda8fae9
 8004e60:	bdb4b1c4 	.word	0xbdb4b1c4
 8004e64:	3e21ee9e 	.word	0x3e21ee9e
 8004e68:	809c52ad 	.word	0x809c52ad
 8004e6c:	3e927e4f 	.word	0x3e927e4f
 8004e70:	19cb1590 	.word	0x19cb1590
 8004e74:	3efa01a0 	.word	0x3efa01a0
 8004e78:	16c15177 	.word	0x16c15177
 8004e7c:	3f56c16c 	.word	0x3f56c16c
 8004e80:	5555554c 	.word	0x5555554c
 8004e84:	3fa55555 	.word	0x3fa55555
 8004e88:	00000000 	.word	0x00000000
 8004e8c:	3ff00000 	.word	0x3ff00000
 8004e90:	3fe00000 	.word	0x3fe00000
 8004e94:	3fd33332 	.word	0x3fd33332
 8004e98:	3ff00000 	.word	0x3ff00000
 8004e9c:	3fe90000 	.word	0x3fe90000
 8004ea0:	3fd20000 	.word	0x3fd20000
 8004ea4:	00000000 	.word	0x00000000

08004ea8 <__kernel_sin>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	ec55 4b10 	vmov	r4, r5, d0
 8004eb0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004eb4:	b085      	sub	sp, #20
 8004eb6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004eba:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004ebe:	4680      	mov	r8, r0
 8004ec0:	d205      	bcs.n	8004ece <__kernel_sin+0x26>
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	f7fb fcf5 	bl	80008b4 <__aeabi_d2iz>
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d052      	beq.n	8004f74 <__kernel_sin+0xcc>
 8004ece:	4622      	mov	r2, r4
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7fb f97f 	bl	80001d8 <__aeabi_dmul>
 8004eda:	4682      	mov	sl, r0
 8004edc:	468b      	mov	fp, r1
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	f7fb f977 	bl	80001d8 <__aeabi_dmul>
 8004eea:	a342      	add	r3, pc, #264	@ (adr r3, 8004ff4 <__kernel_sin+0x14c>)
 8004eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef0:	e9cd 0100 	strd	r0, r1, [sp]
 8004ef4:	4650      	mov	r0, sl
 8004ef6:	4659      	mov	r1, fp
 8004ef8:	f7fb f96e 	bl	80001d8 <__aeabi_dmul>
 8004efc:	a33f      	add	r3, pc, #252	@ (adr r3, 8004ffc <__kernel_sin+0x154>)
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	f7fb fa97 	bl	8000434 <__aeabi_dsub>
 8004f06:	4652      	mov	r2, sl
 8004f08:	465b      	mov	r3, fp
 8004f0a:	f7fb f965 	bl	80001d8 <__aeabi_dmul>
 8004f0e:	a33d      	add	r3, pc, #244	@ (adr r3, 8005004 <__kernel_sin+0x15c>)
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f7fb fa90 	bl	8000438 <__adddf3>
 8004f18:	4652      	mov	r2, sl
 8004f1a:	465b      	mov	r3, fp
 8004f1c:	f7fb f95c 	bl	80001d8 <__aeabi_dmul>
 8004f20:	a33a      	add	r3, pc, #232	@ (adr r3, 800500c <__kernel_sin+0x164>)
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	f7fb fa85 	bl	8000434 <__aeabi_dsub>
 8004f2a:	4652      	mov	r2, sl
 8004f2c:	465b      	mov	r3, fp
 8004f2e:	f7fb f953 	bl	80001d8 <__aeabi_dmul>
 8004f32:	a338      	add	r3, pc, #224	@ (adr r3, 8005014 <__kernel_sin+0x16c>)
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	f7fb fa7e 	bl	8000438 <__adddf3>
 8004f3c:	4606      	mov	r6, r0
 8004f3e:	460f      	mov	r7, r1
 8004f40:	f1b8 0f00 	cmp.w	r8, #0
 8004f44:	d11b      	bne.n	8004f7e <__kernel_sin+0xd6>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4650      	mov	r0, sl
 8004f4c:	4659      	mov	r1, fp
 8004f4e:	f7fb f943 	bl	80001d8 <__aeabi_dmul>
 8004f52:	a325      	add	r3, pc, #148	@ (adr r3, 8004fe8 <__kernel_sin+0x140>)
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f7fb fa6c 	bl	8000434 <__aeabi_dsub>
 8004f5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f60:	f7fb f93a 	bl	80001d8 <__aeabi_dmul>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4620      	mov	r0, r4
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	f7fb fa64 	bl	8000438 <__adddf3>
 8004f70:	4604      	mov	r4, r0
 8004f72:	460d      	mov	r5, r1
 8004f74:	ec45 4b10 	vmov	d0, r4, r5
 8004f78:	b005      	add	sp, #20
 8004f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f82:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff0 <__kernel_sin+0x148>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	f7fb f927 	bl	80001d8 <__aeabi_dmul>
 8004f8a:	4632      	mov	r2, r6
 8004f8c:	4680      	mov	r8, r0
 8004f8e:	4689      	mov	r9, r1
 8004f90:	463b      	mov	r3, r7
 8004f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f96:	f7fb f91f 	bl	80001d8 <__aeabi_dmul>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4640      	mov	r0, r8
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	f7fb fa47 	bl	8000434 <__aeabi_dsub>
 8004fa6:	4652      	mov	r2, sl
 8004fa8:	465b      	mov	r3, fp
 8004faa:	f7fb f915 	bl	80001d8 <__aeabi_dmul>
 8004fae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fb2:	f7fb fa3f 	bl	8000434 <__aeabi_dsub>
 8004fb6:	a30c      	add	r3, pc, #48	@ (adr r3, 8004fe8 <__kernel_sin+0x140>)
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	460f      	mov	r7, r1
 8004fc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fc4:	f7fb f908 	bl	80001d8 <__aeabi_dmul>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4630      	mov	r0, r6
 8004fce:	4639      	mov	r1, r7
 8004fd0:	f7fb fa32 	bl	8000438 <__adddf3>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4620      	mov	r0, r4
 8004fda:	4629      	mov	r1, r5
 8004fdc:	f7fb fa2a 	bl	8000434 <__aeabi_dsub>
 8004fe0:	e7c6      	b.n	8004f70 <__kernel_sin+0xc8>
 8004fe2:	bf00      	nop
 8004fe4:	f3af 8000 	nop.w
 8004fe8:	55555549 	.word	0x55555549
 8004fec:	3fc55555 	.word	0x3fc55555
 8004ff0:	3fe00000 	.word	0x3fe00000
 8004ff4:	5acfd57c 	.word	0x5acfd57c
 8004ff8:	3de5d93a 	.word	0x3de5d93a
 8004ffc:	8a2b9ceb 	.word	0x8a2b9ceb
 8005000:	3e5ae5e6 	.word	0x3e5ae5e6
 8005004:	57b1fe7d 	.word	0x57b1fe7d
 8005008:	3ec71de3 	.word	0x3ec71de3
 800500c:	19c161d5 	.word	0x19c161d5
 8005010:	3f2a01a0 	.word	0x3f2a01a0
 8005014:	1110f8a6 	.word	0x1110f8a6
 8005018:	3f811111 	.word	0x3f811111
 800501c:	00000000 	.word	0x00000000

08005020 <__ieee754_rem_pio2>:
 8005020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005024:	ec57 6b10 	vmov	r6, r7, d0
 8005028:	4bc5      	ldr	r3, [pc, #788]	@ (8005340 <__ieee754_rem_pio2+0x320>)
 800502a:	b08d      	sub	sp, #52	@ 0x34
 800502c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005030:	4598      	cmp	r8, r3
 8005032:	4604      	mov	r4, r0
 8005034:	9704      	str	r7, [sp, #16]
 8005036:	d807      	bhi.n	8005048 <__ieee754_rem_pio2+0x28>
 8005038:	2200      	movs	r2, #0
 800503a:	2300      	movs	r3, #0
 800503c:	ed80 0b00 	vstr	d0, [r0]
 8005040:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005044:	2500      	movs	r5, #0
 8005046:	e028      	b.n	800509a <__ieee754_rem_pio2+0x7a>
 8005048:	4bbe      	ldr	r3, [pc, #760]	@ (8005344 <__ieee754_rem_pio2+0x324>)
 800504a:	4598      	cmp	r8, r3
 800504c:	d878      	bhi.n	8005140 <__ieee754_rem_pio2+0x120>
 800504e:	9b04      	ldr	r3, [sp, #16]
 8005050:	4dbd      	ldr	r5, [pc, #756]	@ (8005348 <__ieee754_rem_pio2+0x328>)
 8005052:	2b00      	cmp	r3, #0
 8005054:	4630      	mov	r0, r6
 8005056:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005308 <__ieee754_rem_pio2+0x2e8>)
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	4639      	mov	r1, r7
 800505e:	dd38      	ble.n	80050d2 <__ieee754_rem_pio2+0xb2>
 8005060:	f7fb f9e8 	bl	8000434 <__aeabi_dsub>
 8005064:	45a8      	cmp	r8, r5
 8005066:	4606      	mov	r6, r0
 8005068:	460f      	mov	r7, r1
 800506a:	d01a      	beq.n	80050a2 <__ieee754_rem_pio2+0x82>
 800506c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005310 <__ieee754_rem_pio2+0x2f0>)
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	f7fb f9df 	bl	8000434 <__aeabi_dsub>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4680      	mov	r8, r0
 800507c:	4689      	mov	r9, r1
 800507e:	4630      	mov	r0, r6
 8005080:	4639      	mov	r1, r7
 8005082:	f7fb f9d7 	bl	8000434 <__aeabi_dsub>
 8005086:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005310 <__ieee754_rem_pio2+0x2f0>)
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	f7fb f9d2 	bl	8000434 <__aeabi_dsub>
 8005090:	e9c4 8900 	strd	r8, r9, [r4]
 8005094:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005098:	2501      	movs	r5, #1
 800509a:	4628      	mov	r0, r5
 800509c:	b00d      	add	sp, #52	@ 0x34
 800509e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a2:	a39d      	add	r3, pc, #628	@ (adr r3, 8005318 <__ieee754_rem_pio2+0x2f8>)
 80050a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a8:	f7fb f9c4 	bl	8000434 <__aeabi_dsub>
 80050ac:	a39c      	add	r3, pc, #624	@ (adr r3, 8005320 <__ieee754_rem_pio2+0x300>)
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	4606      	mov	r6, r0
 80050b4:	460f      	mov	r7, r1
 80050b6:	f7fb f9bd 	bl	8000434 <__aeabi_dsub>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	4680      	mov	r8, r0
 80050c0:	4689      	mov	r9, r1
 80050c2:	4630      	mov	r0, r6
 80050c4:	4639      	mov	r1, r7
 80050c6:	f7fb f9b5 	bl	8000434 <__aeabi_dsub>
 80050ca:	a395      	add	r3, pc, #596	@ (adr r3, 8005320 <__ieee754_rem_pio2+0x300>)
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	e7dc      	b.n	800508c <__ieee754_rem_pio2+0x6c>
 80050d2:	f7fb f9b1 	bl	8000438 <__adddf3>
 80050d6:	45a8      	cmp	r8, r5
 80050d8:	4606      	mov	r6, r0
 80050da:	460f      	mov	r7, r1
 80050dc:	d018      	beq.n	8005110 <__ieee754_rem_pio2+0xf0>
 80050de:	a38c      	add	r3, pc, #560	@ (adr r3, 8005310 <__ieee754_rem_pio2+0x2f0>)
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f7fb f9a8 	bl	8000438 <__adddf3>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4680      	mov	r8, r0
 80050ee:	4689      	mov	r9, r1
 80050f0:	4630      	mov	r0, r6
 80050f2:	4639      	mov	r1, r7
 80050f4:	f7fb f99e 	bl	8000434 <__aeabi_dsub>
 80050f8:	a385      	add	r3, pc, #532	@ (adr r3, 8005310 <__ieee754_rem_pio2+0x2f0>)
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	f7fb f99b 	bl	8000438 <__adddf3>
 8005102:	f04f 35ff 	mov.w	r5, #4294967295
 8005106:	e9c4 8900 	strd	r8, r9, [r4]
 800510a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800510e:	e7c4      	b.n	800509a <__ieee754_rem_pio2+0x7a>
 8005110:	a381      	add	r3, pc, #516	@ (adr r3, 8005318 <__ieee754_rem_pio2+0x2f8>)
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	f7fb f98f 	bl	8000438 <__adddf3>
 800511a:	a381      	add	r3, pc, #516	@ (adr r3, 8005320 <__ieee754_rem_pio2+0x300>)
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	4606      	mov	r6, r0
 8005122:	460f      	mov	r7, r1
 8005124:	f7fb f988 	bl	8000438 <__adddf3>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4680      	mov	r8, r0
 800512e:	4689      	mov	r9, r1
 8005130:	4630      	mov	r0, r6
 8005132:	4639      	mov	r1, r7
 8005134:	f7fb f97e 	bl	8000434 <__aeabi_dsub>
 8005138:	a379      	add	r3, pc, #484	@ (adr r3, 8005320 <__ieee754_rem_pio2+0x300>)
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	e7de      	b.n	80050fe <__ieee754_rem_pio2+0xde>
 8005140:	4b82      	ldr	r3, [pc, #520]	@ (800534c <__ieee754_rem_pio2+0x32c>)
 8005142:	4598      	cmp	r8, r3
 8005144:	f200 80d1 	bhi.w	80052ea <__ieee754_rem_pio2+0x2ca>
 8005148:	f000 f966 	bl	8005418 <fabs>
 800514c:	ec57 6b10 	vmov	r6, r7, d0
 8005150:	a375      	add	r3, pc, #468	@ (adr r3, 8005328 <__ieee754_rem_pio2+0x308>)
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	4630      	mov	r0, r6
 8005158:	4639      	mov	r1, r7
 800515a:	f7fb f83d 	bl	80001d8 <__aeabi_dmul>
 800515e:	4b7c      	ldr	r3, [pc, #496]	@ (8005350 <__ieee754_rem_pio2+0x330>)
 8005160:	2200      	movs	r2, #0
 8005162:	f7fb f969 	bl	8000438 <__adddf3>
 8005166:	f7fb fba5 	bl	80008b4 <__aeabi_d2iz>
 800516a:	4605      	mov	r5, r0
 800516c:	f7fb fab0 	bl	80006d0 <__aeabi_i2d>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005178:	a363      	add	r3, pc, #396	@ (adr r3, 8005308 <__ieee754_rem_pio2+0x2e8>)
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f7fb f82b 	bl	80001d8 <__aeabi_dmul>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4630      	mov	r0, r6
 8005188:	4639      	mov	r1, r7
 800518a:	f7fb f953 	bl	8000434 <__aeabi_dsub>
 800518e:	a360      	add	r3, pc, #384	@ (adr r3, 8005310 <__ieee754_rem_pio2+0x2f0>)
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	4682      	mov	sl, r0
 8005196:	468b      	mov	fp, r1
 8005198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800519c:	f7fb f81c 	bl	80001d8 <__aeabi_dmul>
 80051a0:	2d1f      	cmp	r5, #31
 80051a2:	4606      	mov	r6, r0
 80051a4:	460f      	mov	r7, r1
 80051a6:	dc0c      	bgt.n	80051c2 <__ieee754_rem_pio2+0x1a2>
 80051a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005354 <__ieee754_rem_pio2+0x334>)
 80051aa:	1e6a      	subs	r2, r5, #1
 80051ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b0:	4543      	cmp	r3, r8
 80051b2:	d006      	beq.n	80051c2 <__ieee754_rem_pio2+0x1a2>
 80051b4:	4632      	mov	r2, r6
 80051b6:	463b      	mov	r3, r7
 80051b8:	4650      	mov	r0, sl
 80051ba:	4659      	mov	r1, fp
 80051bc:	f7fb f93a 	bl	8000434 <__aeabi_dsub>
 80051c0:	e00e      	b.n	80051e0 <__ieee754_rem_pio2+0x1c0>
 80051c2:	463b      	mov	r3, r7
 80051c4:	4632      	mov	r2, r6
 80051c6:	4650      	mov	r0, sl
 80051c8:	4659      	mov	r1, fp
 80051ca:	f7fb f933 	bl	8000434 <__aeabi_dsub>
 80051ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 80051d2:	9305      	str	r3, [sp, #20]
 80051d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80051d8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80051dc:	2b10      	cmp	r3, #16
 80051de:	dc02      	bgt.n	80051e6 <__ieee754_rem_pio2+0x1c6>
 80051e0:	e9c4 0100 	strd	r0, r1, [r4]
 80051e4:	e039      	b.n	800525a <__ieee754_rem_pio2+0x23a>
 80051e6:	a34c      	add	r3, pc, #304	@ (adr r3, 8005318 <__ieee754_rem_pio2+0x2f8>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051f0:	f7fa fff2 	bl	80001d8 <__aeabi_dmul>
 80051f4:	4606      	mov	r6, r0
 80051f6:	460f      	mov	r7, r1
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4650      	mov	r0, sl
 80051fe:	4659      	mov	r1, fp
 8005200:	f7fb f918 	bl	8000434 <__aeabi_dsub>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4680      	mov	r8, r0
 800520a:	4689      	mov	r9, r1
 800520c:	4650      	mov	r0, sl
 800520e:	4659      	mov	r1, fp
 8005210:	f7fb f910 	bl	8000434 <__aeabi_dsub>
 8005214:	4632      	mov	r2, r6
 8005216:	463b      	mov	r3, r7
 8005218:	f7fb f90c 	bl	8000434 <__aeabi_dsub>
 800521c:	a340      	add	r3, pc, #256	@ (adr r3, 8005320 <__ieee754_rem_pio2+0x300>)
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	4606      	mov	r6, r0
 8005224:	460f      	mov	r7, r1
 8005226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800522a:	f7fa ffd5 	bl	80001d8 <__aeabi_dmul>
 800522e:	4632      	mov	r2, r6
 8005230:	463b      	mov	r3, r7
 8005232:	f7fb f8ff 	bl	8000434 <__aeabi_dsub>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4606      	mov	r6, r0
 800523c:	460f      	mov	r7, r1
 800523e:	4640      	mov	r0, r8
 8005240:	4649      	mov	r1, r9
 8005242:	f7fb f8f7 	bl	8000434 <__aeabi_dsub>
 8005246:	9a05      	ldr	r2, [sp, #20]
 8005248:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b31      	cmp	r3, #49	@ 0x31
 8005250:	dc20      	bgt.n	8005294 <__ieee754_rem_pio2+0x274>
 8005252:	e9c4 0100 	strd	r0, r1, [r4]
 8005256:	46c2      	mov	sl, r8
 8005258:	46cb      	mov	fp, r9
 800525a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800525e:	4650      	mov	r0, sl
 8005260:	4642      	mov	r2, r8
 8005262:	464b      	mov	r3, r9
 8005264:	4659      	mov	r1, fp
 8005266:	f7fb f8e5 	bl	8000434 <__aeabi_dsub>
 800526a:	463b      	mov	r3, r7
 800526c:	4632      	mov	r2, r6
 800526e:	f7fb f8e1 	bl	8000434 <__aeabi_dsub>
 8005272:	9b04      	ldr	r3, [sp, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800527a:	f6bf af0e 	bge.w	800509a <__ieee754_rem_pio2+0x7a>
 800527e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005282:	6063      	str	r3, [r4, #4]
 8005284:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005288:	f8c4 8000 	str.w	r8, [r4]
 800528c:	60a0      	str	r0, [r4, #8]
 800528e:	60e3      	str	r3, [r4, #12]
 8005290:	426d      	negs	r5, r5
 8005292:	e702      	b.n	800509a <__ieee754_rem_pio2+0x7a>
 8005294:	a326      	add	r3, pc, #152	@ (adr r3, 8005330 <__ieee754_rem_pio2+0x310>)
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800529e:	f7fa ff9b 	bl	80001d8 <__aeabi_dmul>
 80052a2:	4606      	mov	r6, r0
 80052a4:	460f      	mov	r7, r1
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4640      	mov	r0, r8
 80052ac:	4649      	mov	r1, r9
 80052ae:	f7fb f8c1 	bl	8000434 <__aeabi_dsub>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4682      	mov	sl, r0
 80052b8:	468b      	mov	fp, r1
 80052ba:	4640      	mov	r0, r8
 80052bc:	4649      	mov	r1, r9
 80052be:	f7fb f8b9 	bl	8000434 <__aeabi_dsub>
 80052c2:	4632      	mov	r2, r6
 80052c4:	463b      	mov	r3, r7
 80052c6:	f7fb f8b5 	bl	8000434 <__aeabi_dsub>
 80052ca:	a31b      	add	r3, pc, #108	@ (adr r3, 8005338 <__ieee754_rem_pio2+0x318>)
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	4606      	mov	r6, r0
 80052d2:	460f      	mov	r7, r1
 80052d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052d8:	f7fa ff7e 	bl	80001d8 <__aeabi_dmul>
 80052dc:	4632      	mov	r2, r6
 80052de:	463b      	mov	r3, r7
 80052e0:	f7fb f8a8 	bl	8000434 <__aeabi_dsub>
 80052e4:	4606      	mov	r6, r0
 80052e6:	460f      	mov	r7, r1
 80052e8:	e764      	b.n	80051b4 <__ieee754_rem_pio2+0x194>
 80052ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005358 <__ieee754_rem_pio2+0x338>)
 80052ec:	4598      	cmp	r8, r3
 80052ee:	d935      	bls.n	800535c <__ieee754_rem_pio2+0x33c>
 80052f0:	4632      	mov	r2, r6
 80052f2:	463b      	mov	r3, r7
 80052f4:	4630      	mov	r0, r6
 80052f6:	4639      	mov	r1, r7
 80052f8:	f7fb f89c 	bl	8000434 <__aeabi_dsub>
 80052fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005300:	e9c4 0100 	strd	r0, r1, [r4]
 8005304:	e69e      	b.n	8005044 <__ieee754_rem_pio2+0x24>
 8005306:	bf00      	nop
 8005308:	54400000 	.word	0x54400000
 800530c:	3ff921fb 	.word	0x3ff921fb
 8005310:	1a626331 	.word	0x1a626331
 8005314:	3dd0b461 	.word	0x3dd0b461
 8005318:	1a600000 	.word	0x1a600000
 800531c:	3dd0b461 	.word	0x3dd0b461
 8005320:	2e037073 	.word	0x2e037073
 8005324:	3ba3198a 	.word	0x3ba3198a
 8005328:	6dc9c883 	.word	0x6dc9c883
 800532c:	3fe45f30 	.word	0x3fe45f30
 8005330:	2e000000 	.word	0x2e000000
 8005334:	3ba3198a 	.word	0x3ba3198a
 8005338:	252049c1 	.word	0x252049c1
 800533c:	397b839a 	.word	0x397b839a
 8005340:	3fe921fb 	.word	0x3fe921fb
 8005344:	4002d97b 	.word	0x4002d97b
 8005348:	3ff921fb 	.word	0x3ff921fb
 800534c:	413921fb 	.word	0x413921fb
 8005350:	3fe00000 	.word	0x3fe00000
 8005354:	08005d18 	.word	0x08005d18
 8005358:	7fefffff 	.word	0x7fefffff
 800535c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005360:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005364:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005368:	4630      	mov	r0, r6
 800536a:	460f      	mov	r7, r1
 800536c:	f7fb faa2 	bl	80008b4 <__aeabi_d2iz>
 8005370:	f7fb f9ae 	bl	80006d0 <__aeabi_i2d>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4630      	mov	r0, r6
 800537a:	4639      	mov	r1, r7
 800537c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005380:	f7fb f858 	bl	8000434 <__aeabi_dsub>
 8005384:	4b22      	ldr	r3, [pc, #136]	@ (8005410 <__ieee754_rem_pio2+0x3f0>)
 8005386:	2200      	movs	r2, #0
 8005388:	f7fa ff26 	bl	80001d8 <__aeabi_dmul>
 800538c:	460f      	mov	r7, r1
 800538e:	4606      	mov	r6, r0
 8005390:	f7fb fa90 	bl	80008b4 <__aeabi_d2iz>
 8005394:	f7fb f99c 	bl	80006d0 <__aeabi_i2d>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4630      	mov	r0, r6
 800539e:	4639      	mov	r1, r7
 80053a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80053a4:	f7fb f846 	bl	8000434 <__aeabi_dsub>
 80053a8:	4b19      	ldr	r3, [pc, #100]	@ (8005410 <__ieee754_rem_pio2+0x3f0>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	f7fa ff14 	bl	80001d8 <__aeabi_dmul>
 80053b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80053b4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80053b8:	f04f 0803 	mov.w	r8, #3
 80053bc:	2600      	movs	r6, #0
 80053be:	2700      	movs	r7, #0
 80053c0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80053c4:	4632      	mov	r2, r6
 80053c6:	463b      	mov	r3, r7
 80053c8:	46c2      	mov	sl, r8
 80053ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80053ce:	f7fb fa3f 	bl	8000850 <__aeabi_dcmpeq>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d1f4      	bne.n	80053c0 <__ieee754_rem_pio2+0x3a0>
 80053d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005414 <__ieee754_rem_pio2+0x3f4>)
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	2302      	movs	r3, #2
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	462a      	mov	r2, r5
 80053e0:	4653      	mov	r3, sl
 80053e2:	4621      	mov	r1, r4
 80053e4:	a806      	add	r0, sp, #24
 80053e6:	f000 f81f 	bl	8005428 <__kernel_rem_pio2>
 80053ea:	9b04      	ldr	r3, [sp, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	4605      	mov	r5, r0
 80053f0:	f6bf ae53 	bge.w	800509a <__ieee754_rem_pio2+0x7a>
 80053f4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80053f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80053fc:	e9c4 2300 	strd	r2, r3, [r4]
 8005400:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005404:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005408:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800540c:	e740      	b.n	8005290 <__ieee754_rem_pio2+0x270>
 800540e:	bf00      	nop
 8005410:	41700000 	.word	0x41700000
 8005414:	08005d98 	.word	0x08005d98

08005418 <fabs>:
 8005418:	ec51 0b10 	vmov	r0, r1, d0
 800541c:	4602      	mov	r2, r0
 800541e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005422:	ec43 2b10 	vmov	d0, r2, r3
 8005426:	4770      	bx	lr

08005428 <__kernel_rem_pio2>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	ed2d 8b02 	vpush	{d8}
 8005430:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005434:	f112 0f14 	cmn.w	r2, #20
 8005438:	9306      	str	r3, [sp, #24]
 800543a:	9104      	str	r1, [sp, #16]
 800543c:	4bbe      	ldr	r3, [pc, #760]	@ (8005738 <__kernel_rem_pio2+0x310>)
 800543e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005440:	9008      	str	r0, [sp, #32]
 8005442:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	9b06      	ldr	r3, [sp, #24]
 800544a:	f103 33ff 	add.w	r3, r3, #4294967295
 800544e:	bfa8      	it	ge
 8005450:	1ed4      	subge	r4, r2, #3
 8005452:	9305      	str	r3, [sp, #20]
 8005454:	bfb2      	itee	lt
 8005456:	2400      	movlt	r4, #0
 8005458:	2318      	movge	r3, #24
 800545a:	fb94 f4f3 	sdivge	r4, r4, r3
 800545e:	f06f 0317 	mvn.w	r3, #23
 8005462:	fb04 3303 	mla	r3, r4, r3, r3
 8005466:	eb03 0b02 	add.w	fp, r3, r2
 800546a:	9b00      	ldr	r3, [sp, #0]
 800546c:	9a05      	ldr	r2, [sp, #20]
 800546e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005728 <__kernel_rem_pio2+0x300>
 8005472:	eb03 0802 	add.w	r8, r3, r2
 8005476:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005478:	1aa7      	subs	r7, r4, r2
 800547a:	ae20      	add	r6, sp, #128	@ 0x80
 800547c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005480:	2500      	movs	r5, #0
 8005482:	4545      	cmp	r5, r8
 8005484:	dd13      	ble.n	80054ae <__kernel_rem_pio2+0x86>
 8005486:	9b06      	ldr	r3, [sp, #24]
 8005488:	aa20      	add	r2, sp, #128	@ 0x80
 800548a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800548e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8005492:	f04f 0800 	mov.w	r8, #0
 8005496:	9b00      	ldr	r3, [sp, #0]
 8005498:	4598      	cmp	r8, r3
 800549a:	dc31      	bgt.n	8005500 <__kernel_rem_pio2+0xd8>
 800549c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005728 <__kernel_rem_pio2+0x300>
 80054a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80054a8:	462f      	mov	r7, r5
 80054aa:	2600      	movs	r6, #0
 80054ac:	e01b      	b.n	80054e6 <__kernel_rem_pio2+0xbe>
 80054ae:	42ef      	cmn	r7, r5
 80054b0:	d407      	bmi.n	80054c2 <__kernel_rem_pio2+0x9a>
 80054b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80054b6:	f7fb f90b 	bl	80006d0 <__aeabi_i2d>
 80054ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80054be:	3501      	adds	r5, #1
 80054c0:	e7df      	b.n	8005482 <__kernel_rem_pio2+0x5a>
 80054c2:	ec51 0b18 	vmov	r0, r1, d8
 80054c6:	e7f8      	b.n	80054ba <__kernel_rem_pio2+0x92>
 80054c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80054d0:	f7fa fe82 	bl	80001d8 <__aeabi_dmul>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054dc:	f7fa ffac 	bl	8000438 <__adddf3>
 80054e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054e4:	3601      	adds	r6, #1
 80054e6:	9b05      	ldr	r3, [sp, #20]
 80054e8:	429e      	cmp	r6, r3
 80054ea:	f1a7 0708 	sub.w	r7, r7, #8
 80054ee:	ddeb      	ble.n	80054c8 <__kernel_rem_pio2+0xa0>
 80054f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80054f4:	f108 0801 	add.w	r8, r8, #1
 80054f8:	ecaa 7b02 	vstmia	sl!, {d7}
 80054fc:	3508      	adds	r5, #8
 80054fe:	e7ca      	b.n	8005496 <__kernel_rem_pio2+0x6e>
 8005500:	9b00      	ldr	r3, [sp, #0]
 8005502:	f8dd 8000 	ldr.w	r8, [sp]
 8005506:	aa0c      	add	r2, sp, #48	@ 0x30
 8005508:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800550c:	930a      	str	r3, [sp, #40]	@ 0x28
 800550e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005510:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005514:	9309      	str	r3, [sp, #36]	@ 0x24
 8005516:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800551a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800551c:	ab98      	add	r3, sp, #608	@ 0x260
 800551e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005522:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8005526:	ed8d 7b02 	vstr	d7, [sp, #8]
 800552a:	ac0c      	add	r4, sp, #48	@ 0x30
 800552c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800552e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005532:	46a1      	mov	r9, r4
 8005534:	46c2      	mov	sl, r8
 8005536:	f1ba 0f00 	cmp.w	sl, #0
 800553a:	f1a5 0508 	sub.w	r5, r5, #8
 800553e:	dc77      	bgt.n	8005630 <__kernel_rem_pio2+0x208>
 8005540:	4658      	mov	r0, fp
 8005542:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005546:	f000 fac7 	bl	8005ad8 <scalbn>
 800554a:	ec57 6b10 	vmov	r6, r7, d0
 800554e:	2200      	movs	r2, #0
 8005550:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005554:	4630      	mov	r0, r6
 8005556:	4639      	mov	r1, r7
 8005558:	f7fa fe3e 	bl	80001d8 <__aeabi_dmul>
 800555c:	ec41 0b10 	vmov	d0, r0, r1
 8005560:	f000 fb3a 	bl	8005bd8 <floor>
 8005564:	4b75      	ldr	r3, [pc, #468]	@ (800573c <__kernel_rem_pio2+0x314>)
 8005566:	ec51 0b10 	vmov	r0, r1, d0
 800556a:	2200      	movs	r2, #0
 800556c:	f7fa fe34 	bl	80001d8 <__aeabi_dmul>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4630      	mov	r0, r6
 8005576:	4639      	mov	r1, r7
 8005578:	f7fa ff5c 	bl	8000434 <__aeabi_dsub>
 800557c:	460f      	mov	r7, r1
 800557e:	4606      	mov	r6, r0
 8005580:	f7fb f998 	bl	80008b4 <__aeabi_d2iz>
 8005584:	9002      	str	r0, [sp, #8]
 8005586:	f7fb f8a3 	bl	80006d0 <__aeabi_i2d>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4630      	mov	r0, r6
 8005590:	4639      	mov	r1, r7
 8005592:	f7fa ff4f 	bl	8000434 <__aeabi_dsub>
 8005596:	f1bb 0f00 	cmp.w	fp, #0
 800559a:	4606      	mov	r6, r0
 800559c:	460f      	mov	r7, r1
 800559e:	dd6c      	ble.n	800567a <__kernel_rem_pio2+0x252>
 80055a0:	f108 31ff 	add.w	r1, r8, #4294967295
 80055a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80055a6:	9d02      	ldr	r5, [sp, #8]
 80055a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80055ac:	f1cb 0018 	rsb	r0, fp, #24
 80055b0:	fa43 f200 	asr.w	r2, r3, r0
 80055b4:	4415      	add	r5, r2
 80055b6:	4082      	lsls	r2, r0
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	aa0c      	add	r2, sp, #48	@ 0x30
 80055bc:	9502      	str	r5, [sp, #8]
 80055be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80055c2:	f1cb 0217 	rsb	r2, fp, #23
 80055c6:	fa43 f902 	asr.w	r9, r3, r2
 80055ca:	f1b9 0f00 	cmp.w	r9, #0
 80055ce:	dd64      	ble.n	800569a <__kernel_rem_pio2+0x272>
 80055d0:	9b02      	ldr	r3, [sp, #8]
 80055d2:	2200      	movs	r2, #0
 80055d4:	3301      	adds	r3, #1
 80055d6:	9302      	str	r3, [sp, #8]
 80055d8:	4615      	mov	r5, r2
 80055da:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80055de:	4590      	cmp	r8, r2
 80055e0:	f300 80b8 	bgt.w	8005754 <__kernel_rem_pio2+0x32c>
 80055e4:	f1bb 0f00 	cmp.w	fp, #0
 80055e8:	dd07      	ble.n	80055fa <__kernel_rem_pio2+0x1d2>
 80055ea:	f1bb 0f01 	cmp.w	fp, #1
 80055ee:	f000 80bf 	beq.w	8005770 <__kernel_rem_pio2+0x348>
 80055f2:	f1bb 0f02 	cmp.w	fp, #2
 80055f6:	f000 80c6 	beq.w	8005786 <__kernel_rem_pio2+0x35e>
 80055fa:	f1b9 0f02 	cmp.w	r9, #2
 80055fe:	d14c      	bne.n	800569a <__kernel_rem_pio2+0x272>
 8005600:	4632      	mov	r2, r6
 8005602:	463b      	mov	r3, r7
 8005604:	494e      	ldr	r1, [pc, #312]	@ (8005740 <__kernel_rem_pio2+0x318>)
 8005606:	2000      	movs	r0, #0
 8005608:	f7fa ff14 	bl	8000434 <__aeabi_dsub>
 800560c:	4606      	mov	r6, r0
 800560e:	460f      	mov	r7, r1
 8005610:	2d00      	cmp	r5, #0
 8005612:	d042      	beq.n	800569a <__kernel_rem_pio2+0x272>
 8005614:	4658      	mov	r0, fp
 8005616:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005730 <__kernel_rem_pio2+0x308>
 800561a:	f000 fa5d 	bl	8005ad8 <scalbn>
 800561e:	4630      	mov	r0, r6
 8005620:	4639      	mov	r1, r7
 8005622:	ec53 2b10 	vmov	r2, r3, d0
 8005626:	f7fa ff05 	bl	8000434 <__aeabi_dsub>
 800562a:	4606      	mov	r6, r0
 800562c:	460f      	mov	r7, r1
 800562e:	e034      	b.n	800569a <__kernel_rem_pio2+0x272>
 8005630:	4b44      	ldr	r3, [pc, #272]	@ (8005744 <__kernel_rem_pio2+0x31c>)
 8005632:	2200      	movs	r2, #0
 8005634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005638:	f7fa fdce 	bl	80001d8 <__aeabi_dmul>
 800563c:	f7fb f93a 	bl	80008b4 <__aeabi_d2iz>
 8005640:	f7fb f846 	bl	80006d0 <__aeabi_i2d>
 8005644:	4b40      	ldr	r3, [pc, #256]	@ (8005748 <__kernel_rem_pio2+0x320>)
 8005646:	2200      	movs	r2, #0
 8005648:	4606      	mov	r6, r0
 800564a:	460f      	mov	r7, r1
 800564c:	f7fa fdc4 	bl	80001d8 <__aeabi_dmul>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005658:	f7fa feec 	bl	8000434 <__aeabi_dsub>
 800565c:	f7fb f92a 	bl	80008b4 <__aeabi_d2iz>
 8005660:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005664:	f849 0b04 	str.w	r0, [r9], #4
 8005668:	4639      	mov	r1, r7
 800566a:	4630      	mov	r0, r6
 800566c:	f7fa fee4 	bl	8000438 <__adddf3>
 8005670:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005678:	e75d      	b.n	8005536 <__kernel_rem_pio2+0x10e>
 800567a:	d107      	bne.n	800568c <__kernel_rem_pio2+0x264>
 800567c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005680:	aa0c      	add	r2, sp, #48	@ 0x30
 8005682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005686:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800568a:	e79e      	b.n	80055ca <__kernel_rem_pio2+0x1a2>
 800568c:	4b2f      	ldr	r3, [pc, #188]	@ (800574c <__kernel_rem_pio2+0x324>)
 800568e:	2200      	movs	r2, #0
 8005690:	f7fb f8fc 	bl	800088c <__aeabi_dcmpge>
 8005694:	2800      	cmp	r0, #0
 8005696:	d143      	bne.n	8005720 <__kernel_rem_pio2+0x2f8>
 8005698:	4681      	mov	r9, r0
 800569a:	2200      	movs	r2, #0
 800569c:	2300      	movs	r3, #0
 800569e:	4630      	mov	r0, r6
 80056a0:	4639      	mov	r1, r7
 80056a2:	f7fb f8d5 	bl	8000850 <__aeabi_dcmpeq>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	f000 80bf 	beq.w	800582a <__kernel_rem_pio2+0x402>
 80056ac:	f108 33ff 	add.w	r3, r8, #4294967295
 80056b0:	2200      	movs	r2, #0
 80056b2:	9900      	ldr	r1, [sp, #0]
 80056b4:	428b      	cmp	r3, r1
 80056b6:	da6e      	bge.n	8005796 <__kernel_rem_pio2+0x36e>
 80056b8:	2a00      	cmp	r2, #0
 80056ba:	f000 8089 	beq.w	80057d0 <__kernel_rem_pio2+0x3a8>
 80056be:	f108 38ff 	add.w	r8, r8, #4294967295
 80056c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80056c4:	f1ab 0b18 	sub.w	fp, fp, #24
 80056c8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f6      	beq.n	80056be <__kernel_rem_pio2+0x296>
 80056d0:	4658      	mov	r0, fp
 80056d2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005730 <__kernel_rem_pio2+0x308>
 80056d6:	f000 f9ff 	bl	8005ad8 <scalbn>
 80056da:	f108 0301 	add.w	r3, r8, #1
 80056de:	00da      	lsls	r2, r3, #3
 80056e0:	9205      	str	r2, [sp, #20]
 80056e2:	ec55 4b10 	vmov	r4, r5, d0
 80056e6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80056e8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8005744 <__kernel_rem_pio2+0x31c>
 80056ec:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80056f0:	4646      	mov	r6, r8
 80056f2:	f04f 0a00 	mov.w	sl, #0
 80056f6:	2e00      	cmp	r6, #0
 80056f8:	f280 80cf 	bge.w	800589a <__kernel_rem_pio2+0x472>
 80056fc:	4644      	mov	r4, r8
 80056fe:	2c00      	cmp	r4, #0
 8005700:	f2c0 80fd 	blt.w	80058fe <__kernel_rem_pio2+0x4d6>
 8005704:	4b12      	ldr	r3, [pc, #72]	@ (8005750 <__kernel_rem_pio2+0x328>)
 8005706:	461f      	mov	r7, r3
 8005708:	ab70      	add	r3, sp, #448	@ 0x1c0
 800570a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800570e:	9306      	str	r3, [sp, #24]
 8005710:	f04f 0a00 	mov.w	sl, #0
 8005714:	f04f 0b00 	mov.w	fp, #0
 8005718:	2600      	movs	r6, #0
 800571a:	eba8 0504 	sub.w	r5, r8, r4
 800571e:	e0e2      	b.n	80058e6 <__kernel_rem_pio2+0x4be>
 8005720:	f04f 0902 	mov.w	r9, #2
 8005724:	e754      	b.n	80055d0 <__kernel_rem_pio2+0x1a8>
 8005726:	bf00      	nop
	...
 8005734:	3ff00000 	.word	0x3ff00000
 8005738:	08005ee0 	.word	0x08005ee0
 800573c:	40200000 	.word	0x40200000
 8005740:	3ff00000 	.word	0x3ff00000
 8005744:	3e700000 	.word	0x3e700000
 8005748:	41700000 	.word	0x41700000
 800574c:	3fe00000 	.word	0x3fe00000
 8005750:	08005ea0 	.word	0x08005ea0
 8005754:	f854 3b04 	ldr.w	r3, [r4], #4
 8005758:	b945      	cbnz	r5, 800576c <__kernel_rem_pio2+0x344>
 800575a:	b123      	cbz	r3, 8005766 <__kernel_rem_pio2+0x33e>
 800575c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005760:	f844 3c04 	str.w	r3, [r4, #-4]
 8005764:	2301      	movs	r3, #1
 8005766:	3201      	adds	r2, #1
 8005768:	461d      	mov	r5, r3
 800576a:	e738      	b.n	80055de <__kernel_rem_pio2+0x1b6>
 800576c:	1acb      	subs	r3, r1, r3
 800576e:	e7f7      	b.n	8005760 <__kernel_rem_pio2+0x338>
 8005770:	f108 32ff 	add.w	r2, r8, #4294967295
 8005774:	ab0c      	add	r3, sp, #48	@ 0x30
 8005776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800577a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800577e:	a90c      	add	r1, sp, #48	@ 0x30
 8005780:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005784:	e739      	b.n	80055fa <__kernel_rem_pio2+0x1d2>
 8005786:	f108 32ff 	add.w	r2, r8, #4294967295
 800578a:	ab0c      	add	r3, sp, #48	@ 0x30
 800578c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005790:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005794:	e7f3      	b.n	800577e <__kernel_rem_pio2+0x356>
 8005796:	a90c      	add	r1, sp, #48	@ 0x30
 8005798:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800579c:	3b01      	subs	r3, #1
 800579e:	430a      	orrs	r2, r1
 80057a0:	e787      	b.n	80056b2 <__kernel_rem_pio2+0x28a>
 80057a2:	3401      	adds	r4, #1
 80057a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80057a8:	2a00      	cmp	r2, #0
 80057aa:	d0fa      	beq.n	80057a2 <__kernel_rem_pio2+0x37a>
 80057ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80057b2:	eb0d 0503 	add.w	r5, sp, r3
 80057b6:	9b06      	ldr	r3, [sp, #24]
 80057b8:	aa20      	add	r2, sp, #128	@ 0x80
 80057ba:	4443      	add	r3, r8
 80057bc:	f108 0701 	add.w	r7, r8, #1
 80057c0:	3d98      	subs	r5, #152	@ 0x98
 80057c2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80057c6:	4444      	add	r4, r8
 80057c8:	42bc      	cmp	r4, r7
 80057ca:	da04      	bge.n	80057d6 <__kernel_rem_pio2+0x3ae>
 80057cc:	46a0      	mov	r8, r4
 80057ce:	e6a2      	b.n	8005516 <__kernel_rem_pio2+0xee>
 80057d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057d2:	2401      	movs	r4, #1
 80057d4:	e7e6      	b.n	80057a4 <__kernel_rem_pio2+0x37c>
 80057d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80057dc:	f7fa ff78 	bl	80006d0 <__aeabi_i2d>
 80057e0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005aa8 <__kernel_rem_pio2+0x680>
 80057e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80057e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80057ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057f0:	46b2      	mov	sl, r6
 80057f2:	f04f 0800 	mov.w	r8, #0
 80057f6:	9b05      	ldr	r3, [sp, #20]
 80057f8:	4598      	cmp	r8, r3
 80057fa:	dd05      	ble.n	8005808 <__kernel_rem_pio2+0x3e0>
 80057fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005800:	3701      	adds	r7, #1
 8005802:	eca5 7b02 	vstmia	r5!, {d7}
 8005806:	e7df      	b.n	80057c8 <__kernel_rem_pio2+0x3a0>
 8005808:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800580c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005810:	f7fa fce2 	bl	80001d8 <__aeabi_dmul>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800581c:	f7fa fe0c 	bl	8000438 <__adddf3>
 8005820:	f108 0801 	add.w	r8, r8, #1
 8005824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005828:	e7e5      	b.n	80057f6 <__kernel_rem_pio2+0x3ce>
 800582a:	f1cb 0000 	rsb	r0, fp, #0
 800582e:	ec47 6b10 	vmov	d0, r6, r7
 8005832:	f000 f951 	bl	8005ad8 <scalbn>
 8005836:	ec55 4b10 	vmov	r4, r5, d0
 800583a:	4b9d      	ldr	r3, [pc, #628]	@ (8005ab0 <__kernel_rem_pio2+0x688>)
 800583c:	2200      	movs	r2, #0
 800583e:	4620      	mov	r0, r4
 8005840:	4629      	mov	r1, r5
 8005842:	f7fb f823 	bl	800088c <__aeabi_dcmpge>
 8005846:	b300      	cbz	r0, 800588a <__kernel_rem_pio2+0x462>
 8005848:	4b9a      	ldr	r3, [pc, #616]	@ (8005ab4 <__kernel_rem_pio2+0x68c>)
 800584a:	2200      	movs	r2, #0
 800584c:	4620      	mov	r0, r4
 800584e:	4629      	mov	r1, r5
 8005850:	f7fa fcc2 	bl	80001d8 <__aeabi_dmul>
 8005854:	f7fb f82e 	bl	80008b4 <__aeabi_d2iz>
 8005858:	4606      	mov	r6, r0
 800585a:	f7fa ff39 	bl	80006d0 <__aeabi_i2d>
 800585e:	4b94      	ldr	r3, [pc, #592]	@ (8005ab0 <__kernel_rem_pio2+0x688>)
 8005860:	2200      	movs	r2, #0
 8005862:	f7fa fcb9 	bl	80001d8 <__aeabi_dmul>
 8005866:	460b      	mov	r3, r1
 8005868:	4602      	mov	r2, r0
 800586a:	4629      	mov	r1, r5
 800586c:	4620      	mov	r0, r4
 800586e:	f7fa fde1 	bl	8000434 <__aeabi_dsub>
 8005872:	f7fb f81f 	bl	80008b4 <__aeabi_d2iz>
 8005876:	ab0c      	add	r3, sp, #48	@ 0x30
 8005878:	f10b 0b18 	add.w	fp, fp, #24
 800587c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005880:	f108 0801 	add.w	r8, r8, #1
 8005884:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005888:	e722      	b.n	80056d0 <__kernel_rem_pio2+0x2a8>
 800588a:	4620      	mov	r0, r4
 800588c:	4629      	mov	r1, r5
 800588e:	f7fb f811 	bl	80008b4 <__aeabi_d2iz>
 8005892:	ab0c      	add	r3, sp, #48	@ 0x30
 8005894:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005898:	e71a      	b.n	80056d0 <__kernel_rem_pio2+0x2a8>
 800589a:	ab0c      	add	r3, sp, #48	@ 0x30
 800589c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80058a0:	f7fa ff16 	bl	80006d0 <__aeabi_i2d>
 80058a4:	4622      	mov	r2, r4
 80058a6:	462b      	mov	r3, r5
 80058a8:	f7fa fc96 	bl	80001d8 <__aeabi_dmul>
 80058ac:	4652      	mov	r2, sl
 80058ae:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80058b2:	465b      	mov	r3, fp
 80058b4:	4620      	mov	r0, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	f7fa fc8e 	bl	80001d8 <__aeabi_dmul>
 80058bc:	3e01      	subs	r6, #1
 80058be:	4604      	mov	r4, r0
 80058c0:	460d      	mov	r5, r1
 80058c2:	e718      	b.n	80056f6 <__kernel_rem_pio2+0x2ce>
 80058c4:	9906      	ldr	r1, [sp, #24]
 80058c6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80058ca:	9106      	str	r1, [sp, #24]
 80058cc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80058d0:	f7fa fc82 	bl	80001d8 <__aeabi_dmul>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4650      	mov	r0, sl
 80058da:	4659      	mov	r1, fp
 80058dc:	f7fa fdac 	bl	8000438 <__adddf3>
 80058e0:	3601      	adds	r6, #1
 80058e2:	4682      	mov	sl, r0
 80058e4:	468b      	mov	fp, r1
 80058e6:	9b00      	ldr	r3, [sp, #0]
 80058e8:	429e      	cmp	r6, r3
 80058ea:	dc01      	bgt.n	80058f0 <__kernel_rem_pio2+0x4c8>
 80058ec:	42b5      	cmp	r5, r6
 80058ee:	dae9      	bge.n	80058c4 <__kernel_rem_pio2+0x49c>
 80058f0:	ab48      	add	r3, sp, #288	@ 0x120
 80058f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80058f6:	e9c5 ab00 	strd	sl, fp, [r5]
 80058fa:	3c01      	subs	r4, #1
 80058fc:	e6ff      	b.n	80056fe <__kernel_rem_pio2+0x2d6>
 80058fe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005900:	2b02      	cmp	r3, #2
 8005902:	dc0b      	bgt.n	800591c <__kernel_rem_pio2+0x4f4>
 8005904:	2b00      	cmp	r3, #0
 8005906:	dc39      	bgt.n	800597c <__kernel_rem_pio2+0x554>
 8005908:	d05d      	beq.n	80059c6 <__kernel_rem_pio2+0x59e>
 800590a:	9b02      	ldr	r3, [sp, #8]
 800590c:	f003 0007 	and.w	r0, r3, #7
 8005910:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005914:	ecbd 8b02 	vpop	{d8}
 8005918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800591c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800591e:	2b03      	cmp	r3, #3
 8005920:	d1f3      	bne.n	800590a <__kernel_rem_pio2+0x4e2>
 8005922:	9b05      	ldr	r3, [sp, #20]
 8005924:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005928:	eb0d 0403 	add.w	r4, sp, r3
 800592c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005930:	4625      	mov	r5, r4
 8005932:	46c2      	mov	sl, r8
 8005934:	f1ba 0f00 	cmp.w	sl, #0
 8005938:	f1a5 0508 	sub.w	r5, r5, #8
 800593c:	dc6b      	bgt.n	8005a16 <__kernel_rem_pio2+0x5ee>
 800593e:	4645      	mov	r5, r8
 8005940:	2d01      	cmp	r5, #1
 8005942:	f1a4 0408 	sub.w	r4, r4, #8
 8005946:	f300 8087 	bgt.w	8005a58 <__kernel_rem_pio2+0x630>
 800594a:	9c05      	ldr	r4, [sp, #20]
 800594c:	ab48      	add	r3, sp, #288	@ 0x120
 800594e:	441c      	add	r4, r3
 8005950:	2000      	movs	r0, #0
 8005952:	2100      	movs	r1, #0
 8005954:	f1b8 0f01 	cmp.w	r8, #1
 8005958:	f300 809c 	bgt.w	8005a94 <__kernel_rem_pio2+0x66c>
 800595c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005960:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005964:	f1b9 0f00 	cmp.w	r9, #0
 8005968:	f040 80a6 	bne.w	8005ab8 <__kernel_rem_pio2+0x690>
 800596c:	9b04      	ldr	r3, [sp, #16]
 800596e:	e9c3 7800 	strd	r7, r8, [r3]
 8005972:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005976:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800597a:	e7c6      	b.n	800590a <__kernel_rem_pio2+0x4e2>
 800597c:	9d05      	ldr	r5, [sp, #20]
 800597e:	ab48      	add	r3, sp, #288	@ 0x120
 8005980:	441d      	add	r5, r3
 8005982:	4644      	mov	r4, r8
 8005984:	2000      	movs	r0, #0
 8005986:	2100      	movs	r1, #0
 8005988:	2c00      	cmp	r4, #0
 800598a:	da35      	bge.n	80059f8 <__kernel_rem_pio2+0x5d0>
 800598c:	f1b9 0f00 	cmp.w	r9, #0
 8005990:	d038      	beq.n	8005a04 <__kernel_rem_pio2+0x5dc>
 8005992:	4602      	mov	r2, r0
 8005994:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005998:	9c04      	ldr	r4, [sp, #16]
 800599a:	e9c4 2300 	strd	r2, r3, [r4]
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80059a6:	f7fa fd45 	bl	8000434 <__aeabi_dsub>
 80059aa:	ad4a      	add	r5, sp, #296	@ 0x128
 80059ac:	2401      	movs	r4, #1
 80059ae:	45a0      	cmp	r8, r4
 80059b0:	da2b      	bge.n	8005a0a <__kernel_rem_pio2+0x5e2>
 80059b2:	f1b9 0f00 	cmp.w	r9, #0
 80059b6:	d002      	beq.n	80059be <__kernel_rem_pio2+0x596>
 80059b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80059bc:	4619      	mov	r1, r3
 80059be:	9b04      	ldr	r3, [sp, #16]
 80059c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80059c4:	e7a1      	b.n	800590a <__kernel_rem_pio2+0x4e2>
 80059c6:	9c05      	ldr	r4, [sp, #20]
 80059c8:	ab48      	add	r3, sp, #288	@ 0x120
 80059ca:	441c      	add	r4, r3
 80059cc:	2000      	movs	r0, #0
 80059ce:	2100      	movs	r1, #0
 80059d0:	f1b8 0f00 	cmp.w	r8, #0
 80059d4:	da09      	bge.n	80059ea <__kernel_rem_pio2+0x5c2>
 80059d6:	f1b9 0f00 	cmp.w	r9, #0
 80059da:	d002      	beq.n	80059e2 <__kernel_rem_pio2+0x5ba>
 80059dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80059e0:	4619      	mov	r1, r3
 80059e2:	9b04      	ldr	r3, [sp, #16]
 80059e4:	e9c3 0100 	strd	r0, r1, [r3]
 80059e8:	e78f      	b.n	800590a <__kernel_rem_pio2+0x4e2>
 80059ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80059ee:	f7fa fd23 	bl	8000438 <__adddf3>
 80059f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80059f6:	e7eb      	b.n	80059d0 <__kernel_rem_pio2+0x5a8>
 80059f8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80059fc:	f7fa fd1c 	bl	8000438 <__adddf3>
 8005a00:	3c01      	subs	r4, #1
 8005a02:	e7c1      	b.n	8005988 <__kernel_rem_pio2+0x560>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	e7c6      	b.n	8005998 <__kernel_rem_pio2+0x570>
 8005a0a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005a0e:	f7fa fd13 	bl	8000438 <__adddf3>
 8005a12:	3401      	adds	r4, #1
 8005a14:	e7cb      	b.n	80059ae <__kernel_rem_pio2+0x586>
 8005a16:	ed95 7b00 	vldr	d7, [r5]
 8005a1a:	ed8d 7b00 	vstr	d7, [sp]
 8005a1e:	ed95 7b02 	vldr	d7, [r5, #8]
 8005a22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a26:	ec53 2b17 	vmov	r2, r3, d7
 8005a2a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005a2e:	f7fa fd03 	bl	8000438 <__adddf3>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4606      	mov	r6, r0
 8005a38:	460f      	mov	r7, r1
 8005a3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a3e:	f7fa fcf9 	bl	8000434 <__aeabi_dsub>
 8005a42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a46:	f7fa fcf7 	bl	8000438 <__adddf3>
 8005a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a4e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005a52:	e9c5 6700 	strd	r6, r7, [r5]
 8005a56:	e76d      	b.n	8005934 <__kernel_rem_pio2+0x50c>
 8005a58:	ed94 7b00 	vldr	d7, [r4]
 8005a5c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005a60:	ec51 0b17 	vmov	r0, r1, d7
 8005a64:	4652      	mov	r2, sl
 8005a66:	465b      	mov	r3, fp
 8005a68:	ed8d 7b00 	vstr	d7, [sp]
 8005a6c:	f7fa fce4 	bl	8000438 <__adddf3>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4606      	mov	r6, r0
 8005a76:	460f      	mov	r7, r1
 8005a78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a7c:	f7fa fcda 	bl	8000434 <__aeabi_dsub>
 8005a80:	4652      	mov	r2, sl
 8005a82:	465b      	mov	r3, fp
 8005a84:	f7fa fcd8 	bl	8000438 <__adddf3>
 8005a88:	3d01      	subs	r5, #1
 8005a8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005a8e:	e9c4 6700 	strd	r6, r7, [r4]
 8005a92:	e755      	b.n	8005940 <__kernel_rem_pio2+0x518>
 8005a94:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005a98:	f7fa fcce 	bl	8000438 <__adddf3>
 8005a9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005aa0:	e758      	b.n	8005954 <__kernel_rem_pio2+0x52c>
 8005aa2:	bf00      	nop
 8005aa4:	f3af 8000 	nop.w
	...
 8005ab0:	41700000 	.word	0x41700000
 8005ab4:	3e700000 	.word	0x3e700000
 8005ab8:	9b04      	ldr	r3, [sp, #16]
 8005aba:	9a04      	ldr	r2, [sp, #16]
 8005abc:	601f      	str	r7, [r3, #0]
 8005abe:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005ac2:	605c      	str	r4, [r3, #4]
 8005ac4:	609d      	str	r5, [r3, #8]
 8005ac6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005aca:	60d3      	str	r3, [r2, #12]
 8005acc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ad0:	6110      	str	r0, [r2, #16]
 8005ad2:	6153      	str	r3, [r2, #20]
 8005ad4:	e719      	b.n	800590a <__kernel_rem_pio2+0x4e2>
 8005ad6:	bf00      	nop

08005ad8 <scalbn>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	ec55 4b10 	vmov	r4, r5, d0
 8005ade:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	462b      	mov	r3, r5
 8005ae6:	b991      	cbnz	r1, 8005b0e <scalbn+0x36>
 8005ae8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005aec:	4323      	orrs	r3, r4
 8005aee:	d03d      	beq.n	8005b6c <scalbn+0x94>
 8005af0:	4b35      	ldr	r3, [pc, #212]	@ (8005bc8 <scalbn+0xf0>)
 8005af2:	4620      	mov	r0, r4
 8005af4:	4629      	mov	r1, r5
 8005af6:	2200      	movs	r2, #0
 8005af8:	f7fa fb6e 	bl	80001d8 <__aeabi_dmul>
 8005afc:	4b33      	ldr	r3, [pc, #204]	@ (8005bcc <scalbn+0xf4>)
 8005afe:	429e      	cmp	r6, r3
 8005b00:	4604      	mov	r4, r0
 8005b02:	460d      	mov	r5, r1
 8005b04:	da0f      	bge.n	8005b26 <scalbn+0x4e>
 8005b06:	a328      	add	r3, pc, #160	@ (adr r3, 8005ba8 <scalbn+0xd0>)
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	e01e      	b.n	8005b4c <scalbn+0x74>
 8005b0e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005b12:	4291      	cmp	r1, r2
 8005b14:	d10b      	bne.n	8005b2e <scalbn+0x56>
 8005b16:	4622      	mov	r2, r4
 8005b18:	4620      	mov	r0, r4
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	f7fa fc8c 	bl	8000438 <__adddf3>
 8005b20:	4604      	mov	r4, r0
 8005b22:	460d      	mov	r5, r1
 8005b24:	e022      	b.n	8005b6c <scalbn+0x94>
 8005b26:	460b      	mov	r3, r1
 8005b28:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005b2c:	3936      	subs	r1, #54	@ 0x36
 8005b2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005b32:	4296      	cmp	r6, r2
 8005b34:	dd0d      	ble.n	8005b52 <scalbn+0x7a>
 8005b36:	2d00      	cmp	r5, #0
 8005b38:	a11d      	add	r1, pc, #116	@ (adr r1, 8005bb0 <scalbn+0xd8>)
 8005b3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b3e:	da02      	bge.n	8005b46 <scalbn+0x6e>
 8005b40:	a11d      	add	r1, pc, #116	@ (adr r1, 8005bb8 <scalbn+0xe0>)
 8005b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b46:	a31a      	add	r3, pc, #104	@ (adr r3, 8005bb0 <scalbn+0xd8>)
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f7fa fb44 	bl	80001d8 <__aeabi_dmul>
 8005b50:	e7e6      	b.n	8005b20 <scalbn+0x48>
 8005b52:	1872      	adds	r2, r6, r1
 8005b54:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005b58:	428a      	cmp	r2, r1
 8005b5a:	dcec      	bgt.n	8005b36 <scalbn+0x5e>
 8005b5c:	2a00      	cmp	r2, #0
 8005b5e:	dd08      	ble.n	8005b72 <scalbn+0x9a>
 8005b60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005b64:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005b68:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005b6c:	ec45 4b10 	vmov	d0, r4, r5
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005b76:	da08      	bge.n	8005b8a <scalbn+0xb2>
 8005b78:	2d00      	cmp	r5, #0
 8005b7a:	a10b      	add	r1, pc, #44	@ (adr r1, 8005ba8 <scalbn+0xd0>)
 8005b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b80:	dac1      	bge.n	8005b06 <scalbn+0x2e>
 8005b82:	a10f      	add	r1, pc, #60	@ (adr r1, 8005bc0 <scalbn+0xe8>)
 8005b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b88:	e7bd      	b.n	8005b06 <scalbn+0x2e>
 8005b8a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005b8e:	3236      	adds	r2, #54	@ 0x36
 8005b90:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005b94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005b98:	4620      	mov	r0, r4
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd0 <scalbn+0xf8>)
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	e7d4      	b.n	8005b4c <scalbn+0x74>
 8005ba2:	bf00      	nop
 8005ba4:	f3af 8000 	nop.w
 8005ba8:	c2f8f359 	.word	0xc2f8f359
 8005bac:	01a56e1f 	.word	0x01a56e1f
 8005bb0:	8800759c 	.word	0x8800759c
 8005bb4:	7e37e43c 	.word	0x7e37e43c
 8005bb8:	8800759c 	.word	0x8800759c
 8005bbc:	fe37e43c 	.word	0xfe37e43c
 8005bc0:	c2f8f359 	.word	0xc2f8f359
 8005bc4:	81a56e1f 	.word	0x81a56e1f
 8005bc8:	43500000 	.word	0x43500000
 8005bcc:	ffff3cb0 	.word	0xffff3cb0
 8005bd0:	3c900000 	.word	0x3c900000
 8005bd4:	00000000 	.word	0x00000000

08005bd8 <floor>:
 8005bd8:	ec51 0b10 	vmov	r0, r1, d0
 8005bdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005be8:	2e13      	cmp	r6, #19
 8005bea:	460c      	mov	r4, r1
 8005bec:	4605      	mov	r5, r0
 8005bee:	4680      	mov	r8, r0
 8005bf0:	dc34      	bgt.n	8005c5c <floor+0x84>
 8005bf2:	2e00      	cmp	r6, #0
 8005bf4:	da17      	bge.n	8005c26 <floor+0x4e>
 8005bf6:	a332      	add	r3, pc, #200	@ (adr r3, 8005cc0 <floor+0xe8>)
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f7fa fc1c 	bl	8000438 <__adddf3>
 8005c00:	2200      	movs	r2, #0
 8005c02:	2300      	movs	r3, #0
 8005c04:	f7fa fe4c 	bl	80008a0 <__aeabi_dcmpgt>
 8005c08:	b150      	cbz	r0, 8005c20 <floor+0x48>
 8005c0a:	2c00      	cmp	r4, #0
 8005c0c:	da55      	bge.n	8005cba <floor+0xe2>
 8005c0e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005c12:	432c      	orrs	r4, r5
 8005c14:	2500      	movs	r5, #0
 8005c16:	42ac      	cmp	r4, r5
 8005c18:	4c2b      	ldr	r4, [pc, #172]	@ (8005cc8 <floor+0xf0>)
 8005c1a:	bf08      	it	eq
 8005c1c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005c20:	4621      	mov	r1, r4
 8005c22:	4628      	mov	r0, r5
 8005c24:	e023      	b.n	8005c6e <floor+0x96>
 8005c26:	4f29      	ldr	r7, [pc, #164]	@ (8005ccc <floor+0xf4>)
 8005c28:	4137      	asrs	r7, r6
 8005c2a:	ea01 0307 	and.w	r3, r1, r7
 8005c2e:	4303      	orrs	r3, r0
 8005c30:	d01d      	beq.n	8005c6e <floor+0x96>
 8005c32:	a323      	add	r3, pc, #140	@ (adr r3, 8005cc0 <floor+0xe8>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa fbfe 	bl	8000438 <__adddf3>
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f7fa fe2e 	bl	80008a0 <__aeabi_dcmpgt>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d0eb      	beq.n	8005c20 <floor+0x48>
 8005c48:	2c00      	cmp	r4, #0
 8005c4a:	bfbe      	ittt	lt
 8005c4c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005c50:	4133      	asrlt	r3, r6
 8005c52:	18e4      	addlt	r4, r4, r3
 8005c54:	ea24 0407 	bic.w	r4, r4, r7
 8005c58:	2500      	movs	r5, #0
 8005c5a:	e7e1      	b.n	8005c20 <floor+0x48>
 8005c5c:	2e33      	cmp	r6, #51	@ 0x33
 8005c5e:	dd0a      	ble.n	8005c76 <floor+0x9e>
 8005c60:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005c64:	d103      	bne.n	8005c6e <floor+0x96>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	f7fa fbe5 	bl	8000438 <__adddf3>
 8005c6e:	ec41 0b10 	vmov	d0, r0, r1
 8005c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c76:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005c7a:	f04f 37ff 	mov.w	r7, #4294967295
 8005c7e:	40df      	lsrs	r7, r3
 8005c80:	4207      	tst	r7, r0
 8005c82:	d0f4      	beq.n	8005c6e <floor+0x96>
 8005c84:	a30e      	add	r3, pc, #56	@ (adr r3, 8005cc0 <floor+0xe8>)
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	f7fa fbd5 	bl	8000438 <__adddf3>
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2300      	movs	r3, #0
 8005c92:	f7fa fe05 	bl	80008a0 <__aeabi_dcmpgt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d0c2      	beq.n	8005c20 <floor+0x48>
 8005c9a:	2c00      	cmp	r4, #0
 8005c9c:	da0a      	bge.n	8005cb4 <floor+0xdc>
 8005c9e:	2e14      	cmp	r6, #20
 8005ca0:	d101      	bne.n	8005ca6 <floor+0xce>
 8005ca2:	3401      	adds	r4, #1
 8005ca4:	e006      	b.n	8005cb4 <floor+0xdc>
 8005ca6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005caa:	2301      	movs	r3, #1
 8005cac:	40b3      	lsls	r3, r6
 8005cae:	441d      	add	r5, r3
 8005cb0:	4545      	cmp	r5, r8
 8005cb2:	d3f6      	bcc.n	8005ca2 <floor+0xca>
 8005cb4:	ea25 0507 	bic.w	r5, r5, r7
 8005cb8:	e7b2      	b.n	8005c20 <floor+0x48>
 8005cba:	2500      	movs	r5, #0
 8005cbc:	462c      	mov	r4, r5
 8005cbe:	e7af      	b.n	8005c20 <floor+0x48>
 8005cc0:	8800759c 	.word	0x8800759c
 8005cc4:	7e37e43c 	.word	0x7e37e43c
 8005cc8:	bff00000 	.word	0xbff00000
 8005ccc:	000fffff 	.word	0x000fffff

08005cd0 <_init>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr

08005cdc <_fini>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr
