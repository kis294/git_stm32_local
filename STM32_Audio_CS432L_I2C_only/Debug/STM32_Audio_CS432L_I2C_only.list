
STM32_Audio_CS432L_I2C_only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  08007138  08007138  00008138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007930  08007930  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  08007930  08007930  00008930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007938  08007938  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007938  08007938  00008938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800793c  0800793c  0000893c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007940  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009e10  20000014  08007954  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009e24  08007954  00009e24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9f7  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d0  00000000  00000000  00018a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  0001b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c13  00000000  00000000  0001c080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f29  00000000  00000000  0001cc93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013598  00000000  00000000  00033bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000906b3  00000000  00000000  00047154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7807  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004538  00000000  00000000  000d784c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000dbd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007120 	.word	0x08007120

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08007120 	.word	0x08007120

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000eb0:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <write_register+0x34>)
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <write_register+0x34>)
 8000ebc:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000ebe:	2364      	movs	r3, #100	@ 0x64
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <write_register+0x34>)
 8000ec6:	2194      	movs	r1, #148	@ 0x94
 8000ec8:	4804      	ldr	r0, [pc, #16]	@ (8000edc <write_register+0x38>)
 8000eca:	f001 fff7 	bl	8002ebc <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000030 	.word	0x20000030
 8000edc:	20000034 	.word	0x20000034

08000ee0 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000eec:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <read_register+0x3c>)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000ef2:	2364      	movs	r3, #100	@ 0x64
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	4a08      	ldr	r2, [pc, #32]	@ (8000f1c <read_register+0x3c>)
 8000efa:	2194      	movs	r1, #148	@ 0x94
 8000efc:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <read_register+0x40>)
 8000efe:	f001 ffdd 	bl	8002ebc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000f02:	2364      	movs	r3, #100	@ 0x64
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	2194      	movs	r1, #148	@ 0x94
 8000f0c:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <read_register+0x40>)
 8000f0e:	f002 f8d3 	bl	80030b8 <HAL_I2C_Master_Receive>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000030 	.word	0x20000030
 8000f20:	20000034 	.word	0x20000034

08000f24 <CS43_WriteRegister>:


void CS43_WriteRegister(uint8_t reg, uint8_t *data)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
	write_register(reg, data);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	6839      	ldr	r1, [r7, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ffb5 	bl	8000ea4 <write_register>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <CS43_Init>:
//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000f44:	b084      	sub	sp, #16
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	f107 0c08 	add.w	ip, r7, #8
 8000f4e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000f52:	4b81      	ldr	r3, [pc, #516]	@ (8001158 <CS43_Init+0x214>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001158 <CS43_Init+0x214>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	69da      	ldr	r2, [r3, #28]
 8000f60:	4b7d      	ldr	r3, [pc, #500]	@ (8001158 <CS43_Init+0x214>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000f68:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	487b      	ldr	r0, [pc, #492]	@ (800115c <CS43_Init+0x218>)
 8000f70:	f001 fe46 	bl	8002c00 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000f74:	4b7a      	ldr	r3, [pc, #488]	@ (8001160 <CS43_Init+0x21c>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	2254      	movs	r2, #84	@ 0x54
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f005 f890 	bl	80060a4 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000f84:	4b77      	ldr	r3, [pc, #476]	@ (8001164 <CS43_Init+0x220>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000f8a:	4976      	ldr	r1, [pc, #472]	@ (8001164 <CS43_Init+0x220>)
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f7ff ff89 	bl	8000ea4 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000f92:	4b74      	ldr	r3, [pc, #464]	@ (8001164 <CS43_Init+0x220>)
 8000f94:	2280      	movs	r2, #128	@ 0x80
 8000f96:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000f98:	4b72      	ldr	r3, [pc, #456]	@ (8001164 <CS43_Init+0x220>)
 8000f9a:	785b      	ldrb	r3, [r3, #1]
 8000f9c:	f043 0320 	orr.w	r3, r3, #32
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b70      	ldr	r3, [pc, #448]	@ (8001164 <CS43_Init+0x220>)
 8000fa4:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000fa6:	4b6f      	ldr	r3, [pc, #444]	@ (8001164 <CS43_Init+0x220>)
 8000fa8:	785b      	ldrb	r3, [r3, #1]
 8000faa:	f043 030c 	orr.w	r3, r3, #12
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b6c      	ldr	r3, [pc, #432]	@ (8001164 <CS43_Init+0x220>)
 8000fb2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000fb4:	4b6b      	ldr	r3, [pc, #428]	@ (8001164 <CS43_Init+0x220>)
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	f043 0303 	orr.w	r3, r3, #3
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b69      	ldr	r3, [pc, #420]	@ (8001164 <CS43_Init+0x220>)
 8000fc0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000fc2:	4969      	ldr	r1, [pc, #420]	@ (8001168 <CS43_Init+0x224>)
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	f7ff ff6d 	bl	8000ea4 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000fca:	4b66      	ldr	r3, [pc, #408]	@ (8001164 <CS43_Init+0x220>)
 8000fcc:	2280      	movs	r2, #128	@ 0x80
 8000fce:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000fd0:	4965      	ldr	r1, [pc, #404]	@ (8001168 <CS43_Init+0x224>)
 8000fd2:	2005      	movs	r0, #5
 8000fd4:	f7ff ff66 	bl	8000ea4 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000fd8:	4962      	ldr	r1, [pc, #392]	@ (8001164 <CS43_Init+0x220>)
 8000fda:	2006      	movs	r0, #6
 8000fdc:	f7ff ff80 	bl	8000ee0 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000fe0:	4b60      	ldr	r3, [pc, #384]	@ (8001164 <CS43_Init+0x220>)
 8000fe2:	785b      	ldrb	r3, [r3, #1]
 8000fe4:	f003 0320 	and.w	r3, r3, #32
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b5e      	ldr	r3, [pc, #376]	@ (8001164 <CS43_Init+0x220>)
 8000fec:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8000fee:	4b5d      	ldr	r3, [pc, #372]	@ (8001164 <CS43_Init+0x220>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8001164 <CS43_Init+0x220>)
 8000ffa:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000ffc:	4b59      	ldr	r3, [pc, #356]	@ (8001164 <CS43_Init+0x220>)
 8000ffe:	785b      	ldrb	r3, [r3, #1]
 8001000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b57      	ldr	r3, [pc, #348]	@ (8001164 <CS43_Init+0x220>)
 8001008:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 800100a:	4b56      	ldr	r3, [pc, #344]	@ (8001164 <CS43_Init+0x220>)
 800100c:	785b      	ldrb	r3, [r3, #1]
 800100e:	f023 0310 	bic.w	r3, r3, #16
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b53      	ldr	r3, [pc, #332]	@ (8001164 <CS43_Init+0x220>)
 8001016:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8001018:	4b52      	ldr	r3, [pc, #328]	@ (8001164 <CS43_Init+0x220>)
 800101a:	785b      	ldrb	r3, [r3, #1]
 800101c:	f023 0304 	bic.w	r3, r3, #4
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b50      	ldr	r3, [pc, #320]	@ (8001164 <CS43_Init+0x220>)
 8001024:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8001026:	4b4f      	ldr	r3, [pc, #316]	@ (8001164 <CS43_Init+0x220>)
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b4c      	ldr	r3, [pc, #304]	@ (8001164 <CS43_Init+0x220>)
 8001032:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8001034:	4b4b      	ldr	r3, [pc, #300]	@ (8001164 <CS43_Init+0x220>)
 8001036:	785b      	ldrb	r3, [r3, #1]
 8001038:	f043 0303 	orr.w	r3, r3, #3
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b49      	ldr	r3, [pc, #292]	@ (8001164 <CS43_Init+0x220>)
 8001040:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8001042:	4949      	ldr	r1, [pc, #292]	@ (8001168 <CS43_Init+0x224>)
 8001044:	2006      	movs	r0, #6
 8001046:	f7ff ff2d 	bl	8000ea4 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800104a:	4947      	ldr	r1, [pc, #284]	@ (8001168 <CS43_Init+0x224>)
 800104c:	2008      	movs	r0, #8
 800104e:	f7ff ff47 	bl	8000ee0 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001052:	4b44      	ldr	r3, [pc, #272]	@ (8001164 <CS43_Init+0x220>)
 8001054:	785b      	ldrb	r3, [r3, #1]
 8001056:	f023 030f 	bic.w	r3, r3, #15
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b41      	ldr	r3, [pc, #260]	@ (8001164 <CS43_Init+0x220>)
 800105e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8001060:	4b40      	ldr	r3, [pc, #256]	@ (8001164 <CS43_Init+0x220>)
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b3e      	ldr	r3, [pc, #248]	@ (8001164 <CS43_Init+0x220>)
 800106c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800106e:	493e      	ldr	r1, [pc, #248]	@ (8001168 <CS43_Init+0x224>)
 8001070:	2008      	movs	r0, #8
 8001072:	f7ff ff17 	bl	8000ea4 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8001076:	493c      	ldr	r1, [pc, #240]	@ (8001168 <CS43_Init+0x224>)
 8001078:	2009      	movs	r0, #9
 800107a:	f7ff ff31 	bl	8000ee0 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800107e:	4b39      	ldr	r3, [pc, #228]	@ (8001164 <CS43_Init+0x220>)
 8001080:	785b      	ldrb	r3, [r3, #1]
 8001082:	f023 030f 	bic.w	r3, r3, #15
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b36      	ldr	r3, [pc, #216]	@ (8001164 <CS43_Init+0x220>)
 800108a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 800108c:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <CS43_Init+0x220>)
 800108e:	785b      	ldrb	r3, [r3, #1]
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b33      	ldr	r3, [pc, #204]	@ (8001164 <CS43_Init+0x220>)
 8001098:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 800109a:	4933      	ldr	r1, [pc, #204]	@ (8001168 <CS43_Init+0x224>)
 800109c:	2009      	movs	r0, #9
 800109e:	f7ff ff01 	bl	8000ea4 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 80010a2:	4931      	ldr	r1, [pc, #196]	@ (8001168 <CS43_Init+0x224>)
 80010a4:	200e      	movs	r0, #14
 80010a6:	f7ff ff1b 	bl	8000ee0 <read_register>
	if(outputMode == MODE_ANALOG_AUDIO)
 80010aa:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d123      	bne.n	80010fa <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80010b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001164 <CS43_Init+0x220>)
 80010b4:	785b      	ldrb	r3, [r3, #1]
 80010b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b29      	ldr	r3, [pc, #164]	@ (8001164 <CS43_Init+0x220>)
 80010be:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80010c0:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <CS43_Init+0x220>)
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b26      	ldr	r3, [pc, #152]	@ (8001164 <CS43_Init+0x220>)
 80010cc:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80010ce:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <CS43_Init+0x220>)
 80010d0:	785b      	ldrb	r3, [r3, #1]
 80010d2:	f023 0320 	bic.w	r3, r3, #32
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b22      	ldr	r3, [pc, #136]	@ (8001164 <CS43_Init+0x220>)
 80010da:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80010dc:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <CS43_Init+0x220>)
 80010de:	785b      	ldrb	r3, [r3, #1]
 80010e0:	f023 0310 	bic.w	r3, r3, #16
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <CS43_Init+0x220>)
 80010e8:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80010ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <CS43_Init+0x220>)
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	f023 0308 	bic.w	r3, r3, #8
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <CS43_Init+0x220>)
 80010f6:	705a      	strb	r2, [r3, #1]
 80010f8:	e006      	b.n	8001108 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80010fa:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 8001102:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <CS43_Init+0x220>)
 8001104:	2202      	movs	r2, #2
 8001106:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8001108:	4917      	ldr	r1, [pc, #92]	@ (8001168 <CS43_Init+0x224>)
 800110a:	200e      	movs	r0, #14
 800110c:	f7ff feca 	bl	8000ea4 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8001110:	4915      	ldr	r1, [pc, #84]	@ (8001168 <CS43_Init+0x224>)
 8001112:	200f      	movs	r0, #15
 8001114:	f7ff fee4 	bl	8000ee0 <read_register>
	iData[1] = 0x00;
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <CS43_Init+0x220>)
 800111a:	2200      	movs	r2, #0
 800111c:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800111e:	4912      	ldr	r1, [pc, #72]	@ (8001168 <CS43_Init+0x224>)
 8001120:	200f      	movs	r0, #15
 8001122:	f7ff febf 	bl	8000ea4 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <CS43_Init+0x220>)
 8001128:	2200      	movs	r2, #0
 800112a:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800112c:	490e      	ldr	r1, [pc, #56]	@ (8001168 <CS43_Init+0x224>)
 800112e:	2014      	movs	r0, #20
 8001130:	f7ff feb8 	bl	8000ea4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001134:	490c      	ldr	r1, [pc, #48]	@ (8001168 <CS43_Init+0x224>)
 8001136:	2015      	movs	r0, #21
 8001138:	f7ff feb4 	bl	8000ea4 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800113c:	490a      	ldr	r1, [pc, #40]	@ (8001168 <CS43_Init+0x224>)
 800113e:	201a      	movs	r0, #26
 8001140:	f7ff feb0 	bl	8000ea4 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8001144:	4908      	ldr	r1, [pc, #32]	@ (8001168 <CS43_Init+0x224>)
 8001146:	201b      	movs	r0, #27
 8001148:	f7ff feac 	bl	8000ea4 <write_register>
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001154:	b004      	add	sp, #16
 8001156:	4770      	bx	lr
 8001158:	200000dc 	.word	0x200000dc
 800115c:	40020c00 	.word	0x40020c00
 8001160:	20000034 	.word	0x20000034
 8001164:	20000030 	.word	0x20000030
 8001168:	20000031 	.word	0x20000031

0800116c <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d837      	bhi.n	80011ec <CS43_Enable_RightLeft+0x80>
 800117c:	a201      	add	r2, pc, #4	@ (adr r2, 8001184 <CS43_Enable_RightLeft+0x18>)
 800117e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001182:	bf00      	nop
 8001184:	08001195 	.word	0x08001195
 8001188:	080011ab 	.word	0x080011ab
 800118c:	080011c1 	.word	0x080011c1
 8001190:	080011d7 	.word	0x080011d7
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001194:	4b21      	ldr	r3, [pc, #132]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 8001196:	22c0      	movs	r2, #192	@ 0xc0
 8001198:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800119a:	4b20      	ldr	r3, [pc, #128]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 800119c:	785b      	ldrb	r3, [r3, #1]
 800119e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 80011a6:	705a      	strb	r2, [r3, #1]
			break;
 80011a8:	e021      	b.n	80011ee <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 80011ac:	2280      	movs	r2, #128	@ 0x80
 80011ae:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 80011b2:	785b      	ldrb	r3, [r3, #1]
 80011b4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 80011bc:	705a      	strb	r2, [r3, #1]
			break;
 80011be:	e016      	b.n	80011ee <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 80011c2:	22c0      	movs	r2, #192	@ 0xc0
 80011c4:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 80011c8:	785b      	ldrb	r3, [r3, #1]
 80011ca:	f043 0320 	orr.w	r3, r3, #32
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 80011d2:	705a      	strb	r2, [r3, #1]
			break;
 80011d4:	e00b      	b.n	80011ee <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 80011d8:	2280      	movs	r2, #128	@ 0x80
 80011da:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 80011de:	785b      	ldrb	r3, [r3, #1]
 80011e0:	f043 0320 	orr.w	r3, r3, #32
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 80011e8:	705a      	strb	r2, [r3, #1]
			break;
 80011ea:	e000      	b.n	80011ee <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80011ec:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 80011f0:	785b      	ldrb	r3, [r3, #1]
 80011f2:	f043 030c 	orr.w	r3, r3, #12
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 80011fa:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 80011fe:	785b      	ldrb	r3, [r3, #1]
 8001200:	f043 0303 	orr.w	r3, r3, #3
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b05      	ldr	r3, [pc, #20]	@ (800121c <CS43_Enable_RightLeft+0xb0>)
 8001208:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 800120a:	4905      	ldr	r1, [pc, #20]	@ (8001220 <CS43_Enable_RightLeft+0xb4>)
 800120c:	2004      	movs	r0, #4
 800120e:	f7ff fe49 	bl	8000ea4 <write_register>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000030 	.word	0x20000030
 8001220:	20000031 	.word	0x20000031

08001224 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	3b32      	subs	r3, #50	@ 0x32
 8001232:	b2db      	uxtb	r3, r3
 8001234:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8001242:	4a16      	ldr	r2, [pc, #88]	@ (800129c <CS43_SetVolume+0x78>)
 8001244:	7bbb      	ldrb	r3, [r7, #14]
 8001246:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8001248:	4915      	ldr	r1, [pc, #84]	@ (80012a0 <CS43_SetVolume+0x7c>)
 800124a:	2014      	movs	r0, #20
 800124c:	f7ff fe2a 	bl	8000ea4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001250:	4913      	ldr	r1, [pc, #76]	@ (80012a0 <CS43_SetVolume+0x7c>)
 8001252:	2015      	movs	r0, #21
 8001254:	f7ff fe26 	bl	8000ea4 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b64      	cmp	r3, #100	@ 0x64
 800125c:	d80e      	bhi.n	800127c <CS43_SetVolume+0x58>
 800125e:	79fa      	ldrb	r2, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	4a0e      	ldr	r2, [pc, #56]	@ (80012a4 <CS43_SetVolume+0x80>)
 800126a:	fb82 1203 	smull	r1, r2, r2, r3
 800126e:	1152      	asrs	r2, r2, #5
 8001270:	17db      	asrs	r3, r3, #31
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	3b18      	subs	r3, #24
 8001278:	b2db      	uxtb	r3, r3
 800127a:	e000      	b.n	800127e <CS43_SetVolume+0x5a>
 800127c:	2318      	movs	r3, #24
 800127e:	4a07      	ldr	r2, [pc, #28]	@ (800129c <CS43_SetVolume+0x78>)
 8001280:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8001282:	4907      	ldr	r1, [pc, #28]	@ (80012a0 <CS43_SetVolume+0x7c>)
 8001284:	2020      	movs	r0, #32
 8001286:	f7ff fe0d 	bl	8000ea4 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800128a:	4905      	ldr	r1, [pc, #20]	@ (80012a0 <CS43_SetVolume+0x7c>)
 800128c:	2021      	movs	r0, #33	@ 0x21
 800128e:	f7ff fe09 	bl	8000ea4 <write_register>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000030 	.word	0x20000030
 80012a0:	20000031 	.word	0x20000031
 80012a4:	51eb851f 	.word	0x51eb851f

080012a8 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <CS43_Start+0x7c>)
 80012ae:	2299      	movs	r2, #153	@ 0x99
 80012b0:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80012b2:	491d      	ldr	r1, [pc, #116]	@ (8001328 <CS43_Start+0x80>)
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fdf5 	bl	8000ea4 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <CS43_Start+0x7c>)
 80012bc:	2280      	movs	r2, #128	@ 0x80
 80012be:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80012c0:	4919      	ldr	r1, [pc, #100]	@ (8001328 <CS43_Start+0x80>)
 80012c2:	2047      	movs	r0, #71	@ 0x47
 80012c4:	f7ff fdee 	bl	8000ea4 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80012c8:	4917      	ldr	r1, [pc, #92]	@ (8001328 <CS43_Start+0x80>)
 80012ca:	2032      	movs	r0, #50	@ 0x32
 80012cc:	f7ff fe08 	bl	8000ee0 <read_register>
	iData[1] |= 0x80;
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <CS43_Start+0x7c>)
 80012d2:	785b      	ldrb	r3, [r3, #1]
 80012d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <CS43_Start+0x7c>)
 80012dc:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80012de:	4912      	ldr	r1, [pc, #72]	@ (8001328 <CS43_Start+0x80>)
 80012e0:	2032      	movs	r0, #50	@ 0x32
 80012e2:	f7ff fddf 	bl	8000ea4 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80012e6:	4910      	ldr	r1, [pc, #64]	@ (8001328 <CS43_Start+0x80>)
 80012e8:	2032      	movs	r0, #50	@ 0x32
 80012ea:	f7ff fdf9 	bl	8000ee0 <read_register>
	iData[1] &= ~(0x80);
 80012ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <CS43_Start+0x7c>)
 80012f0:	785b      	ldrb	r3, [r3, #1]
 80012f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <CS43_Start+0x7c>)
 80012fa:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80012fc:	490a      	ldr	r1, [pc, #40]	@ (8001328 <CS43_Start+0x80>)
 80012fe:	2032      	movs	r0, #50	@ 0x32
 8001300:	f7ff fdd0 	bl	8000ea4 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8001304:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <CS43_Start+0x7c>)
 8001306:	2200      	movs	r2, #0
 8001308:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800130a:	4907      	ldr	r1, [pc, #28]	@ (8001328 <CS43_Start+0x80>)
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fdc9 	bl	8000ea4 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8001312:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <CS43_Start+0x7c>)
 8001314:	229e      	movs	r2, #158	@ 0x9e
 8001316:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8001318:	4903      	ldr	r1, [pc, #12]	@ (8001328 <CS43_Start+0x80>)
 800131a:	2002      	movs	r0, #2
 800131c:	f7ff fdc2 	bl	8000ea4 <write_register>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000030 	.word	0x20000030
 8001328:	20000031 	.word	0x20000031

0800132c <CS43_Stop>:

void CS43_Stop(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	iData[1] = 0x01;
 8001330:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <CS43_Stop+0x18>)
 8001332:	2201      	movs	r2, #1
 8001334:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8001336:	4904      	ldr	r1, [pc, #16]	@ (8001348 <CS43_Stop+0x1c>)
 8001338:	2002      	movs	r0, #2
 800133a:	f7ff fdb3 	bl	8000ea4 <write_register>
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000030 	.word	0x20000030
 8001348:	20000031 	.word	0x20000031
 800134c:	00000000 	.word	0x00000000

08001350 <process_buffer>:
int16_t i2s_dma_buffer[I2S_DMA_BUFFER_SIZE];
int nsamples = sizeof(i2s_dma_buffer) / sizeof(i2s_dma_buffer[0]);


void process_buffer(int16_t* buff,float freq,double volume)
{
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	ed87 0a02 	vstr	s0, [r7, #8]
 800135c:	ed87 1b00 	vstr	d1, [r7]
    int i = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
    dma_processing = 1;
 8001364:	4b34      	ldr	r3, [pc, #208]	@ (8001438 <process_buffer+0xe8>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
    double t = 0.0f;
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(i < 2*I2S_DMA_BUFFER_SAMPLES) {
 8001376:	e04c      	b.n	8001412 <process_buffer+0xc2>
//           buff[i] = 100*sin(t);
//           buff[i+1] = buff[i];
//           t = t + (2*PI/I2S_DMA_BUFFER_SAMPLES);
//           i += 2;

    	   t = (2*PI*i*(freq/48000.0));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001382:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800143c <process_buffer+0xec>
 8001386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138a:	ee17 0a90 	vmov	r0, s15
 800138e:	f7ff f887 	bl	80004a0 <__aeabi_f2d>
 8001392:	4604      	mov	r4, r0
 8001394:	460d      	mov	r5, r1
 8001396:	68b8      	ldr	r0, [r7, #8]
 8001398:	f7ff f882 	bl	80004a0 <__aeabi_f2d>
 800139c:	a324      	add	r3, pc, #144	@ (adr r3, 8001430 <process_buffer+0xe0>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff f9ff 	bl	80007a4 <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4620      	mov	r0, r4
 80013ac:	4629      	mov	r1, r5
 80013ae:	f7ff f8cf 	bl	8000550 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		   buff[i] = 100*volume*sin(t); //100*volume*(sin(t));
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <process_buffer+0xf0>)
 80013c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013c4:	f7ff f8c4 	bl	8000550 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4614      	mov	r4, r2
 80013ce:	461d      	mov	r5, r3
 80013d0:	ed97 0b04 	vldr	d0, [r7, #16]
 80013d4:	f004 fe74 	bl	80060c0 <sin>
 80013d8:	ec53 2b10 	vmov	r2, r3, d0
 80013dc:	4620      	mov	r0, r4
 80013de:	4629      	mov	r1, r5
 80013e0:	f7ff f8b6 	bl	8000550 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	18d4      	adds	r4, r2, r3
 80013f4:	f7ff fb46 	bl	8000a84 <__aeabi_d2iz>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	8023      	strh	r3, [r4, #0]
		   buff[i+1] = 0;//-100;//buff[i];// buff[i];
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	2200      	movs	r2, #0
 800140a:	801a      	strh	r2, [r3, #0]
		   i += 2;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	3302      	adds	r3, #2
 8001410:	61fb      	str	r3, [r7, #28]
    while(i < 2*I2S_DMA_BUFFER_SAMPLES) {
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001418:	4293      	cmp	r3, r2
 800141a:	ddad      	ble.n	8001378 <process_buffer+0x28>
    }
    dma_processing = 0;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <process_buffer+0xe8>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
}
 8001422:	bf00      	nop
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bdb0      	pop	{r4, r5, r7, pc}
 800142a:	bf00      	nop
 800142c:	f3af 8000 	nop.w
 8001430:	00000000 	.word	0x00000000
 8001434:	40e77000 	.word	0x40e77000
 8001438:	200001cc 	.word	0x200001cc
 800143c:	40c90fd0 	.word	0x40c90fd0
 8001440:	40590000 	.word	0x40590000

08001444 <play_note>:


void play_note(float freq,uint16_t duration,double vol)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	ed87 0a03 	vstr	s0, [r7, #12]
 800144e:	4603      	mov	r3, r0
 8001450:	ed87 1b00 	vstr	d1, [r7]
 8001454:	817b      	strh	r3, [r7, #10]
	start_dac();
 8001456:	f000 f847 	bl	80014e8 <start_dac>
	CS43_Start();
 800145a:	f7ff ff25 	bl	80012a8 <CS43_Start>
	memset(i2s_dma_buffer,0,nsamples);
 800145e:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <play_note+0x88>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	2100      	movs	r1, #0
 8001466:	481a      	ldr	r0, [pc, #104]	@ (80014d0 <play_note+0x8c>)
 8001468:	f004 fdf0 	bl	800604c <memset>
	process_buffer(i2s_dma_buffer, freq, vol);
 800146c:	ed97 1b00 	vldr	d1, [r7]
 8001470:	ed97 0a03 	vldr	s0, [r7, #12]
 8001474:	4816      	ldr	r0, [pc, #88]	@ (80014d0 <play_note+0x8c>)
 8001476:	f7ff ff6b 	bl	8001350 <process_buffer>
	timer_elapsed = 0;
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <play_note+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
	full_cpt = 0;
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <play_note+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
	mytimeperiod = (duration) - 1;
 8001486:	897b      	ldrh	r3, [r7, #10]
 8001488:	3b01      	subs	r3, #1
 800148a:	461a      	mov	r2, r3
 800148c:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <play_note+0x98>)
 800148e:	601a      	str	r2, [r3, #0]
	MX_TIM2_Init();
 8001490:	f000 f95e 	bl	8001750 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8001494:	4812      	ldr	r0, [pc, #72]	@ (80014e0 <play_note+0x9c>)
 8001496:	f004 f99b 	bl	80057d0 <HAL_TIM_Base_Start_IT>

    //CS43_SetVolume(50);
	//CS43_SetVolume(0);
	HAL_I2S_Transmit_DMA(&hi2s3, i2s_dma_buffer,nsamples);
 800149a:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <play_note+0x88>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	490b      	ldr	r1, [pc, #44]	@ (80014d0 <play_note+0x8c>)
 80014a4:	480f      	ldr	r0, [pc, #60]	@ (80014e4 <play_note+0xa0>)
 80014a6:	f002 fcff 	bl	8003ea8 <HAL_I2S_Transmit_DMA>
	while((timer_elapsed == 0));
 80014aa:	bf00      	nop
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <play_note+0x90>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0fb      	beq.n	80014ac <play_note+0x68>
	while(full_cpt == 0);
 80014b4:	bf00      	nop
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <play_note+0x94>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0fb      	beq.n	80014b6 <play_note+0x72>

	//memset(i2s_dma_buffer,0,nsamples);
	stop_dac();
 80014be:	f000 f831 	bl	8001524 <stop_dac>
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000004 	.word	0x20000004
 80014d0:	200001e0 	.word	0x200001e0
 80014d4:	200001d8 	.word	0x200001d8
 80014d8:	200001dc 	.word	0x200001dc
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000184 	.word	0x20000184
 80014e4:	200000dc 	.word	0x200000dc

080014e8 <start_dac>:

void start_dac()
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b093      	sub	sp, #76	@ 0x4c
 80014ec:	af12      	add	r7, sp, #72	@ 0x48
 	CS43_Init(hi2c1, MODE_I2S);
 80014ee:	4c0c      	ldr	r4, [pc, #48]	@ (8001520 <start_dac+0x38>)
 80014f0:	2300      	movs	r3, #0
 80014f2:	9311      	str	r3, [sp, #68]	@ 0x44
 80014f4:	4668      	mov	r0, sp
 80014f6:	f104 0310 	add.w	r3, r4, #16
 80014fa:	2244      	movs	r2, #68	@ 0x44
 80014fc:	4619      	mov	r1, r3
 80014fe:	f004 fdd1 	bl	80060a4 <memcpy>
 8001502:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001506:	f7ff fd1d 	bl	8000f44 <CS43_Init>
 	CS43_SetVolume(50); //0 - 100,, 40
 800150a:	2032      	movs	r0, #50	@ 0x32
 800150c:	f7ff fe8a 	bl	8001224 <CS43_SetVolume>
 	//CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 	CS43_Enable_RightLeft(CS43_LEFT);
 8001510:	2002      	movs	r0, #2
 8001512:	f7ff fe2b 	bl	800116c <CS43_Enable_RightLeft>
// 	CS43_Start();
}
 8001516:	bf00      	nop
 8001518:	3704      	adds	r7, #4
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	20000088 	.word	0x20000088

08001524 <stop_dac>:

void stop_dac()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	CS43_SetVolume(0);
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff fe7a 	bl	8001224 <CS43_SetVolume>

	uint8_t data = 0x00;
 8001530:	2300      	movs	r3, #0
 8001532:	71fb      	strb	r3, [r7, #7]
	CS43_WriteRegister(0x0A,&data);
 8001534:	1dfb      	adds	r3, r7, #7
 8001536:	4619      	mov	r1, r3
 8001538:	200a      	movs	r0, #10
 800153a:	f7ff fcf3 	bl	8000f24 <CS43_WriteRegister>

	data = 0x9F;
 800153e:	239f      	movs	r3, #159	@ 0x9f
 8001540:	71fb      	strb	r3, [r7, #7]
	CS43_WriteRegister(0x02,&data);
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	4619      	mov	r1, r3
 8001546:	2002      	movs	r0, #2
 8001548:	f7ff fcec 	bl	8000f24 <CS43_WriteRegister>

	HAL_Delay(1);
 800154c:	2001      	movs	r0, #1
 800154e:	f000 fcbd 	bl	8001ecc <HAL_Delay>
	CS43_Stop();
 8001552:	f7ff feeb 	bl	800132c <CS43_Stop>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2110      	movs	r1, #16
 800155a:	4803      	ldr	r0, [pc, #12]	@ (8001568 <stop_dac+0x44>)
 800155c:	f001 fb50 	bl	8002c00 <HAL_GPIO_WritePin>

}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40020c00 	.word	0x40020c00

0800156c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	sample_dt = F_OUT/F_SAMPLE;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <main+0x4c>)
 8001574:	f04f 5274 	mov.w	r2, #1023410176	@ 0x3d000000
 8001578:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <main+0x50>)
 800157c:	2220      	movs	r2, #32
 800157e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001580:	f000 fc32 	bl	8001de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001584:	f000 f820 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001588:	f000 f95a 	bl	8001840 <MX_GPIO_Init>
  MX_DMA_Init();
 800158c:	f000 f938 	bl	8001800 <MX_DMA_Init>
  MX_I2C1_Init();
 8001590:	f000 f882 	bl	8001698 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001594:	f000 f8ae 	bl	80016f4 <MX_I2S3_Init>
  MX_TIM2_Init();
 8001598:	f000 f8da 	bl	8001750 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
   start_dac();
 800159c:	f7ff ffa4 	bl	80014e8 <start_dac>

    HAL_StatusTypeDef res;
   uint8_t temp = full_cpt;
 80015a0:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <main+0x54>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	71fb      	strb	r3, [r7, #7]
   //test_notes();

   //play_melody(mary_lamb_melody, MARY_LAMB_LENGTH);
  // play_melody(star_wars_theme,21);
   play_melody(twinkle_twinkle_melody_complete,48);
 80015a6:	2130      	movs	r1, #48	@ 0x30
 80015a8:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <main+0x58>)
 80015aa:	f000 f9f1 	bl	8001990 <play_melody>
   stop_dac();
 80015ae:	f7ff ffb9 	bl	8001524 <stop_dac>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015b2:	bf00      	nop
 80015b4:	e7fd      	b.n	80015b2 <main+0x46>
 80015b6:	bf00      	nop
 80015b8:	200001d0 	.word	0x200001d0
 80015bc:	200001d4 	.word	0x200001d4
 80015c0:	200001dc 	.word	0x200001dc
 80015c4:	08007138 	.word	0x08007138

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b094      	sub	sp, #80	@ 0x50
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	2230      	movs	r2, #48	@ 0x30
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 fd38 	bl	800604c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	4b27      	ldr	r3, [pc, #156]	@ (8001690 <SystemClock_Config+0xc8>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f4:	4a26      	ldr	r2, [pc, #152]	@ (8001690 <SystemClock_Config+0xc8>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fc:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <SystemClock_Config+0xc8>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <SystemClock_Config+0xcc>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a20      	ldr	r2, [pc, #128]	@ (8001694 <SystemClock_Config+0xcc>)
 8001612:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <SystemClock_Config+0xcc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001624:	2302      	movs	r3, #2
 8001626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001628:	2301      	movs	r3, #1
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162c:	2310      	movs	r3, #16
 800162e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001630:	2302      	movs	r3, #2
 8001632:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001634:	2300      	movs	r3, #0
 8001636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001638:	2308      	movs	r3, #8
 800163a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800163c:	2332      	movs	r3, #50	@ 0x32
 800163e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001640:	2302      	movs	r3, #2
 8001642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001644:	2308      	movs	r3, #8
 8001646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fa99 	bl	8004b84 <HAL_RCC_OscConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001658:	f000 f994 	bl	8001984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165c:	230f      	movs	r3, #15
 800165e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001660:	2302      	movs	r3, #2
 8001662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800166c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001670:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2101      	movs	r1, #1
 8001678:	4618      	mov	r0, r3
 800167a:	f003 fcfb 	bl	8005074 <HAL_RCC_ClockConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001684:	f000 f97e 	bl	8001984 <Error_Handler>
  }
}
 8001688:	bf00      	nop
 800168a:	3750      	adds	r7, #80	@ 0x50
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	40007000 	.word	0x40007000

08001698 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800169c:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <MX_I2C1_Init+0x50>)
 800169e:	4a13      	ldr	r2, [pc, #76]	@ (80016ec <MX_I2C1_Init+0x54>)
 80016a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016a4:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <MX_I2C1_Init+0x58>)
 80016a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016d6:	f001 faad 	bl	8002c34 <HAL_I2C_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016e0:	f000 f950 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000088 	.word	0x20000088
 80016ec:	40005400 	.word	0x40005400
 80016f0:	000186a0 	.word	0x000186a0

080016f4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <MX_I2S3_Init+0x54>)
 80016fa:	4a14      	ldr	r2, [pc, #80]	@ (800174c <MX_I2S3_Init+0x58>)
 80016fc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80016fe:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <MX_I2S3_Init+0x54>)
 8001700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001704:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <MX_I2S3_Init+0x54>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800170c:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <MX_I2S3_Init+0x54>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <MX_I2S3_Init+0x54>)
 8001714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001718:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800171a:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <MX_I2S3_Init+0x54>)
 800171c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001720:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <MX_I2S3_Init+0x54>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001728:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <MX_I2S3_Init+0x54>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <MX_I2S3_Init+0x54>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	@ (8001748 <MX_I2S3_Init+0x54>)
 8001736:	f002 fa77 	bl	8003c28 <HAL_I2S_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001740:	f000 f920 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200000dc 	.word	0x200000dc
 800174c:	40003c00 	.word	0x40003c00

08001750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	463b      	mov	r3, r7
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800176c:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <MX_TIM2_Init+0xa8>)
 800176e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4999;
 8001774:	4b20      	ldr	r3, [pc, #128]	@ (80017f8 <MX_TIM2_Init+0xa8>)
 8001776:	f241 3287 	movw	r2, #4999	@ 0x1387
 800177a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177c:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <MX_TIM2_Init+0xa8>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = mytimeperiod;
 8001782:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <MX_TIM2_Init+0xac>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1c      	ldr	r2, [pc, #112]	@ (80017f8 <MX_TIM2_Init+0xa8>)
 8001788:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <MX_TIM2_Init+0xa8>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001790:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <MX_TIM2_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001796:	4818      	ldr	r0, [pc, #96]	@ (80017f8 <MX_TIM2_Init+0xa8>)
 8001798:	f003 ffca 	bl	8005730 <HAL_TIM_Base_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017a2:	f000 f8ef 	bl	8001984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	4619      	mov	r1, r3
 80017b2:	4811      	ldr	r0, [pc, #68]	@ (80017f8 <MX_TIM2_Init+0xa8>)
 80017b4:	f004 f9b8 	bl	8005b28 <HAL_TIM_ConfigClockSource>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017be:	f000 f8e1 	bl	8001984 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80017c2:	2108      	movs	r1, #8
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <MX_TIM2_Init+0xa8>)
 80017c6:	f004 f865 	bl	8005894 <HAL_TIM_OnePulse_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017d0:	f000 f8d8 	bl	8001984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017dc:	463b      	mov	r3, r7
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	@ (80017f8 <MX_TIM2_Init+0xa8>)
 80017e2:	f004 fbb1 	bl	8005f48 <HAL_TIMEx_MasterConfigSynchronization>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80017ec:	f000 f8ca 	bl	8001984 <Error_Handler>
//  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(TIM2_IRQn);

  /* USER CODE END TIM2_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000184 	.word	0x20000184
 80017fc:	20000000 	.word	0x20000000

08001800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <MX_DMA_Init+0x3c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a0b      	ldr	r2, [pc, #44]	@ (800183c <MX_DMA_Init+0x3c>)
 8001810:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <MX_DMA_Init+0x3c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	2010      	movs	r0, #16
 8001828:	f000 fc4f 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800182c:	2010      	movs	r0, #16
 800182e:	f000 fc68 	bl	8002102 <HAL_NVIC_EnableIRQ>

}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <MX_GPIO_Init+0xd0>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a2c      	ldr	r2, [pc, #176]	@ (8001910 <MX_GPIO_Init+0xd0>)
 8001860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <MX_GPIO_Init+0xd0>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b26      	ldr	r3, [pc, #152]	@ (8001910 <MX_GPIO_Init+0xd0>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a25      	ldr	r2, [pc, #148]	@ (8001910 <MX_GPIO_Init+0xd0>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b23      	ldr	r3, [pc, #140]	@ (8001910 <MX_GPIO_Init+0xd0>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <MX_GPIO_Init+0xd0>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a1e      	ldr	r2, [pc, #120]	@ (8001910 <MX_GPIO_Init+0xd0>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <MX_GPIO_Init+0xd0>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <MX_GPIO_Init+0xd0>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a17      	ldr	r2, [pc, #92]	@ (8001910 <MX_GPIO_Init+0xd0>)
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <MX_GPIO_Init+0xd0>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <MX_GPIO_Init+0xd0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a10      	ldr	r2, [pc, #64]	@ (8001910 <MX_GPIO_Init+0xd0>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <MX_GPIO_Init+0xd0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2110      	movs	r1, #16
 80018e6:	480b      	ldr	r0, [pc, #44]	@ (8001914 <MX_GPIO_Init+0xd4>)
 80018e8:	f001 f98a 	bl	8002c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018ec:	2310      	movs	r3, #16
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4804      	ldr	r0, [pc, #16]	@ (8001914 <MX_GPIO_Init+0xd4>)
 8001904:	f000 fff8 	bl	80028f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	@ 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	40020c00 	.word	0x40020c00

08001918 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001928:	d102      	bne.n	8001930 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
    // Timer expired - one-shot complete
    //HAL_I2S_DMAStop(&hi2s3);
    timer_elapsed = 1;
 800192a:	4b04      	ldr	r3, [pc, #16]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]
  }
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	200001d8 	.word	0x200001d8

08001940 <HAL_I2S_TxCpltCallback>:


void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
//   else
//   {
// 	 process_buffer(&i2s_dma_buffer[2*I2S_DMA_BUFFER_SAMPLES]);
// 	 full_cpt = 1;
//   }
	full_cpt = 1;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_I2S_TxCpltCallback+0x24>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]

	if(timer_elapsed == 1)
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_I2S_TxCpltCallback+0x28>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d102      	bne.n	800195c <HAL_I2S_TxCpltCallback+0x1c>
	{
    	HAL_I2S_DMAStop(&hi2s3);
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <HAL_I2S_TxCpltCallback+0x2c>)
 8001958:	f002 fb4a 	bl	8003ff0 <HAL_I2S_DMAStop>
	}
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200001dc 	.word	0x200001dc
 8001968:	200001d8 	.word	0x200001d8
 800196c:	200000dc 	.word	0x200000dc

08001970 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
//   else
//   {
//	  process_buffer(&i2s_dma_buffer[0]);
//	   half_cpt = 1;
//   }
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001988:	b672      	cpsid	i
}
 800198a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <Error_Handler+0x8>

08001990 <play_melody>:
    {C4, HALF_NOTE, VOLUME_MEZZO_FORTE, NORMAL},
    {REST, QUARTER_NOTE, VOLUME_SILENCE, NORMAL},
};

void play_melody(const melody_s* mel,int len)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
	for(int i=0;i<len;i++)
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e02f      	b.n	8001a00 <play_melody+0x70>
	{
		play_note( mel[i].frequency , mel[i].duration * 1000 , mel[i].volume );
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	015b      	lsls	r3, r3, #5
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff f8b0 	bl	8000b14 <__aeabi_d2f>
 80019b4:	4604      	mov	r4, r0
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	015b      	lsls	r3, r3, #5
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <play_melody+0x84>)
 80019c8:	f7fe fdc2 	bl	8000550 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f87e 	bl	8000ad4 <__aeabi_d2uiz>
 80019d8:	4603      	mov	r3, r0
 80019da:	b299      	uxth	r1, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	015b      	lsls	r3, r3, #5
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	ed93 7b04 	vldr	d7, [r3, #16]
 80019e8:	eeb0 1a47 	vmov.f32	s2, s14
 80019ec:	eef0 1a67 	vmov.f32	s3, s15
 80019f0:	4608      	mov	r0, r1
 80019f2:	ee00 4a10 	vmov	s0, r4
 80019f6:	f7ff fd25 	bl	8001444 <play_note>
	for(int i=0;i<len;i++)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3301      	adds	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbcb      	blt.n	80019a0 <play_melody+0x10>
	}
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	408f4000 	.word	0x408f4000

08001a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	4a0f      	ldr	r2, [pc, #60]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	4a08      	ldr	r2, [pc, #32]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a56:	2007      	movs	r0, #7
 8001a58:	f000 fb2c 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800

08001a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a19      	ldr	r2, [pc, #100]	@ (8001aec <HAL_I2C_MspInit+0x84>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d12c      	bne.n	8001ae4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <HAL_I2C_MspInit+0x88>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	4a17      	ldr	r2, [pc, #92]	@ (8001af0 <HAL_I2C_MspInit+0x88>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_I2C_MspInit+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001aa6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aac:	2312      	movs	r3, #18
 8001aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <HAL_I2C_MspInit+0x8c>)
 8001ac4:	f000 ff18 	bl	80028f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <HAL_I2C_MspInit+0x88>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	4a07      	ldr	r2, [pc, #28]	@ (8001af0 <HAL_I2C_MspInit+0x88>)
 8001ad2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ad6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_I2C_MspInit+0x88>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	@ 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40005400 	.word	0x40005400
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020400 	.word	0x40020400

08001af8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b090      	sub	sp, #64	@ 0x40
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
 8001b20:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a52      	ldr	r2, [pc, #328]	@ (8001c70 <HAL_I2S_MspInit+0x178>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	f040 809c 	bne.w	8001c66 <HAL_I2S_MspInit+0x16e>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001b32:	23c8      	movs	r3, #200	@ 0xc8
 8001b34:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8001b36:	2308      	movs	r3, #8
 8001b38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fca2 	bl	800548c <HAL_RCCEx_PeriphCLKConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001b4e:	f7ff ff19 	bl	8001984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b47      	ldr	r3, [pc, #284]	@ (8001c74 <HAL_I2S_MspInit+0x17c>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	4a46      	ldr	r2, [pc, #280]	@ (8001c74 <HAL_I2S_MspInit+0x17c>)
 8001b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b62:	4b44      	ldr	r3, [pc, #272]	@ (8001c74 <HAL_I2S_MspInit+0x17c>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b40      	ldr	r3, [pc, #256]	@ (8001c74 <HAL_I2S_MspInit+0x17c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a3f      	ldr	r2, [pc, #252]	@ (8001c74 <HAL_I2S_MspInit+0x17c>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <HAL_I2S_MspInit+0x17c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	4b39      	ldr	r3, [pc, #228]	@ (8001c74 <HAL_I2S_MspInit+0x17c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	4a38      	ldr	r2, [pc, #224]	@ (8001c74 <HAL_I2S_MspInit+0x17c>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9a:	4b36      	ldr	r3, [pc, #216]	@ (8001c74 <HAL_I2S_MspInit+0x17c>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	482d      	ldr	r0, [pc, #180]	@ (8001c78 <HAL_I2S_MspInit+0x180>)
 8001bc2:	f000 fe99 	bl	80028f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001bc6:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bd8:	2306      	movs	r3, #6
 8001bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001be0:	4619      	mov	r1, r3
 8001be2:	4826      	ldr	r0, [pc, #152]	@ (8001c7c <HAL_I2S_MspInit+0x184>)
 8001be4:	f000 fe88 	bl	80028f8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001be8:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001bea:	4a26      	ldr	r2, [pc, #152]	@ (8001c84 <HAL_I2S_MspInit+0x18c>)
 8001bec:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001bee:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bf4:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001bf6:	2240      	movs	r2, #64	@ 0x40
 8001bf8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfa:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c00:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001c02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c06:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c08:	4b1d      	ldr	r3, [pc, #116]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001c14:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001c16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c1a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c22:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001c24:	2204      	movs	r2, #4
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c28:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001c3a:	4811      	ldr	r0, [pc, #68]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001c3c:	f000 fa7c 	bl	8002138 <HAL_DMA_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_I2S_MspInit+0x152>
    {
      Error_Handler();
 8001c46:	f7ff fe9d 	bl	8001984 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001c4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c50:	4a0b      	ldr	r2, [pc, #44]	@ (8001c80 <HAL_I2S_MspInit+0x188>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2033      	movs	r0, #51	@ 0x33
 8001c5c:	f000 fa35 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001c60:	2033      	movs	r0, #51	@ 0x33
 8001c62:	f000 fa4e 	bl	8002102 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001c66:	bf00      	nop
 8001c68:	3740      	adds	r7, #64	@ 0x40
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40003c00 	.word	0x40003c00
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020800 	.word	0x40020800
 8001c80:	20000124 	.word	0x20000124
 8001c84:	40026088 	.word	0x40026088

08001c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c98:	d115      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x48>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x48>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x48>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	201c      	movs	r0, #28
 8001cbc:	f000 fa05 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cc0:	201c      	movs	r0, #28
 8001cc2:	f000 fa1e 	bl	8002102 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <NMI_Handler+0x4>

08001cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <HardFault_Handler+0x4>

08001ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <MemManage_Handler+0x4>

08001cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d2a:	f000 f8af 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <DMA1_Stream5_IRQHandler+0x10>)
 8001d3a:	f000 fb73 	bl	8002424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000124 	.word	0x20000124

08001d48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <TIM2_IRQHandler+0x10>)
 8001d4e:	f003 fdfb 	bl	8005948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000184 	.word	0x20000184

08001d5c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001d60:	4802      	ldr	r0, [pc, #8]	@ (8001d6c <SPI3_IRQHandler+0x10>)
 8001d62:	f002 fb1f 	bl	80043a4 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200000dc 	.word	0x200000dc

08001d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <SystemInit+0x20>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7a:	4a05      	ldr	r2, [pc, #20]	@ (8001d90 <SystemInit+0x20>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d98:	f7ff ffea 	bl	8001d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d9c:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d9e:	490d      	ldr	r1, [pc, #52]	@ (8001dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001da0:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db4:	4c0a      	ldr	r4, [pc, #40]	@ (8001de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f004 f94b 	bl	800605c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc6:	f7ff fbd1 	bl	800156c <main>
  bx  lr    
 8001dca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001dd8:	08007940 	.word	0x08007940
  ldr r2, =_sbss
 8001ddc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001de0:	20009e24 	.word	0x20009e24

08001de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC_IRQHandler>
	...

08001de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dec:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e28 <HAL_Init+0x40>)
 8001df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001e28 <HAL_Init+0x40>)
 8001dfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e04:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a07      	ldr	r2, [pc, #28]	@ (8001e28 <HAL_Init+0x40>)
 8001e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 f94f 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 f808 	bl	8001e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1c:	f7ff fdfc 	bl	8001a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023c00 	.word	0x40023c00

08001e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e34:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <HAL_InitTick+0x54>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_InitTick+0x58>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f967 	bl	800211e <HAL_SYSTICK_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00e      	b.n	8001e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b0f      	cmp	r3, #15
 8001e5e:	d80a      	bhi.n	8001e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f000 f92f 	bl	80020ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e6c:	4a06      	ldr	r2, [pc, #24]	@ (8001e88 <HAL_InitTick+0x5c>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000008 	.word	0x20000008
 8001e84:	20000010 	.word	0x20000010
 8001e88:	2000000c 	.word	0x2000000c

08001e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000010 	.word	0x20000010
 8001eb0:	20009e20 	.word	0x20009e20

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20009e20 	.word	0x20009e20

08001ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff ffee 	bl	8001eb4 <HAL_GetTick>
 8001ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d005      	beq.n	8001ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <HAL_Delay+0x44>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ef2:	bf00      	nop
 8001ef4:	f7ff ffde 	bl	8001eb4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d8f7      	bhi.n	8001ef4 <HAL_Delay+0x28>
  {
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000010 	.word	0x20000010

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4907      	ldr	r1, [pc, #28]	@ (8001fb0 <__NVIC_EnableIRQ+0x38>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	@ (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	@ (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	@ 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	@ 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff8e 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff29 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff3e 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff8e 	bl	8002008 <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5d 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff31 	bl	8001f78 <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa2 	bl	8002070 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff feb6 	bl	8001eb4 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e099      	b.n	8002288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002174:	e00f      	b.n	8002196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002176:	f7ff fe9d 	bl	8001eb4 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b05      	cmp	r3, #5
 8002182:	d908      	bls.n	8002196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2203      	movs	r2, #3
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e078      	b.n	8002288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1e8      	bne.n	8002176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4b38      	ldr	r3, [pc, #224]	@ (8002290 <HAL_DMA_Init+0x158>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d107      	bne.n	8002200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f8:	4313      	orrs	r3, r2
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f023 0307 	bic.w	r3, r3, #7
 8002216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002226:	2b04      	cmp	r3, #4
 8002228:	d117      	bne.n	800225a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4313      	orrs	r3, r2
 8002232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00e      	beq.n	800225a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 fadf 	bl	8002800 <DMA_CheckFifoParam>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2240      	movs	r2, #64	@ 0x40
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002256:	2301      	movs	r3, #1
 8002258:	e016      	b.n	8002288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fa96 	bl	8002794 <DMA_CalcBaseAndBitshift>
 8002268:	4603      	mov	r3, r0
 800226a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002270:	223f      	movs	r2, #63	@ 0x3f
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	f010803f 	.word	0xf010803f

08002294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_DMA_Start_IT+0x26>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e040      	b.n	800233c <HAL_DMA_Start_IT+0xa8>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d12f      	bne.n	800232e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2202      	movs	r2, #2
 80022d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fa28 	bl	8002738 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ec:	223f      	movs	r2, #63	@ 0x3f
 80022ee:	409a      	lsls	r2, r3
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0216 	orr.w	r2, r2, #22
 8002302:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d007      	beq.n	800231c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0208 	orr.w	r2, r2, #8
 800231a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	e005      	b.n	800233a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002336:	2302      	movs	r3, #2
 8002338:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800233a:	7dfb      	ldrb	r3, [r7, #23]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002350:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002352:	f7ff fdaf 	bl	8001eb4 <HAL_GetTick>
 8002356:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d008      	beq.n	8002376 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2280      	movs	r2, #128	@ 0x80
 8002368:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e052      	b.n	800241c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0216 	bic.w	r2, r2, #22
 8002384:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002394:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	d103      	bne.n	80023a6 <HAL_DMA_Abort+0x62>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0208 	bic.w	r2, r2, #8
 80023b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c6:	e013      	b.n	80023f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023c8:	f7ff fd74 	bl	8001eb4 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b05      	cmp	r3, #5
 80023d4:	d90c      	bls.n	80023f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2203      	movs	r2, #3
 80023e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e015      	b.n	800241c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1e4      	bne.n	80023c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002402:	223f      	movs	r2, #63	@ 0x3f
 8002404:	409a      	lsls	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002430:	4b8e      	ldr	r3, [pc, #568]	@ (800266c <HAL_DMA_IRQHandler+0x248>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a8e      	ldr	r2, [pc, #568]	@ (8002670 <HAL_DMA_IRQHandler+0x24c>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0a9b      	lsrs	r3, r3, #10
 800243c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244e:	2208      	movs	r2, #8
 8002450:	409a      	lsls	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4013      	ands	r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01a      	beq.n	8002490 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0204 	bic.w	r2, r2, #4
 8002476:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247c:	2208      	movs	r2, #8
 800247e:	409a      	lsls	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002494:	2201      	movs	r2, #1
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d012      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b2:	2201      	movs	r2, #1
 80024b4:	409a      	lsls	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024be:	f043 0202 	orr.w	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ca:	2204      	movs	r2, #4
 80024cc:	409a      	lsls	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d012      	beq.n	80024fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00b      	beq.n	80024fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e8:	2204      	movs	r2, #4
 80024ea:	409a      	lsls	r2, r3
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f4:	f043 0204 	orr.w	r2, r3, #4
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002500:	2210      	movs	r2, #16
 8002502:	409a      	lsls	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d043      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d03c      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251e:	2210      	movs	r2, #16
 8002520:	409a      	lsls	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d018      	beq.n	8002566 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d024      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
 8002552:	e01f      	b.n	8002594 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01b      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4798      	blx	r3
 8002564:	e016      	b.n	8002594 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d107      	bne.n	8002584 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0208 	bic.w	r2, r2, #8
 8002582:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002598:	2220      	movs	r2, #32
 800259a:	409a      	lsls	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 808f 	beq.w	80026c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8087 	beq.w	80026c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ba:	2220      	movs	r2, #32
 80025bc:	409a      	lsls	r2, r3
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d136      	bne.n	800263c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0216 	bic.w	r2, r2, #22
 80025dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <HAL_DMA_IRQHandler+0x1da>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0208 	bic.w	r2, r2, #8
 800260c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002612:	223f      	movs	r2, #63	@ 0x3f
 8002614:	409a      	lsls	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800262e:	2b00      	cmp	r3, #0
 8002630:	d07e      	beq.n	8002730 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	4798      	blx	r3
        }
        return;
 800263a:	e079      	b.n	8002730 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01d      	beq.n	8002686 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10d      	bne.n	8002674 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265c:	2b00      	cmp	r3, #0
 800265e:	d031      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
 8002668:	e02c      	b.n	80026c4 <HAL_DMA_IRQHandler+0x2a0>
 800266a:	bf00      	nop
 800266c:	20000008 	.word	0x20000008
 8002670:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d023      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
 8002684:	e01e      	b.n	80026c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10f      	bne.n	80026b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0210 	bic.w	r2, r2, #16
 80026a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d032      	beq.n	8002732 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d022      	beq.n	800271e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2205      	movs	r2, #5
 80026dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	3301      	adds	r3, #1
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d307      	bcc.n	800270c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f2      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x2cc>
 800270a:	e000      	b.n	800270e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800270c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	4798      	blx	r3
 800272e:	e000      	b.n	8002732 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002730:	bf00      	nop
    }
  }
}
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002754:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b40      	cmp	r3, #64	@ 0x40
 8002764:	d108      	bne.n	8002778 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002776:	e007      	b.n	8002788 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	60da      	str	r2, [r3, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	3b10      	subs	r3, #16
 80027a4:	4a14      	ldr	r2, [pc, #80]	@ (80027f8 <DMA_CalcBaseAndBitshift+0x64>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027ae:	4a13      	ldr	r2, [pc, #76]	@ (80027fc <DMA_CalcBaseAndBitshift+0x68>)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d909      	bls.n	80027d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027ca:	f023 0303 	bic.w	r3, r3, #3
 80027ce:	1d1a      	adds	r2, r3, #4
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80027d4:	e007      	b.n	80027e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	aaaaaaab 	.word	0xaaaaaaab
 80027fc:	08007750 	.word	0x08007750

08002800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11f      	bne.n	800285a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d856      	bhi.n	80028ce <DMA_CheckFifoParam+0xce>
 8002820:	a201      	add	r2, pc, #4	@ (adr r2, 8002828 <DMA_CheckFifoParam+0x28>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	08002839 	.word	0x08002839
 800282c:	0800284b 	.word	0x0800284b
 8002830:	08002839 	.word	0x08002839
 8002834:	080028cf 	.word	0x080028cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d046      	beq.n	80028d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002848:	e043      	b.n	80028d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002852:	d140      	bne.n	80028d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002858:	e03d      	b.n	80028d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002862:	d121      	bne.n	80028a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d837      	bhi.n	80028da <DMA_CheckFifoParam+0xda>
 800286a:	a201      	add	r2, pc, #4	@ (adr r2, 8002870 <DMA_CheckFifoParam+0x70>)
 800286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002870:	08002881 	.word	0x08002881
 8002874:	08002887 	.word	0x08002887
 8002878:	08002881 	.word	0x08002881
 800287c:	08002899 	.word	0x08002899
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      break;
 8002884:	e030      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d025      	beq.n	80028de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002896:	e022      	b.n	80028de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028a0:	d11f      	bne.n	80028e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028a6:	e01c      	b.n	80028e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d903      	bls.n	80028b6 <DMA_CheckFifoParam+0xb6>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d003      	beq.n	80028bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028b4:	e018      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
      break;
 80028ba:	e015      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00e      	beq.n	80028e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      break;
 80028cc:	e00b      	b.n	80028e6 <DMA_CheckFifoParam+0xe6>
      break;
 80028ce:	bf00      	nop
 80028d0:	e00a      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028d2:	bf00      	nop
 80028d4:	e008      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028d6:	bf00      	nop
 80028d8:	e006      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
 80028dc:	e004      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e002      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
    }
  } 
  
  return status; 
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	@ 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e159      	b.n	8002bc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	429a      	cmp	r2, r3
 800292e:	f040 8148 	bne.w	8002bc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d005      	beq.n	800294a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002946:	2b02      	cmp	r3, #2
 8002948:	d130      	bne.n	80029ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	2203      	movs	r2, #3
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002980:	2201      	movs	r2, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 0201 	and.w	r2, r3, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d017      	beq.n	80029e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d123      	bne.n	8002a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	08da      	lsrs	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	08da      	lsrs	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3208      	adds	r2, #8
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0203 	and.w	r2, r3, #3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80a2 	beq.w	8002bc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b57      	ldr	r3, [pc, #348]	@ (8002be0 <HAL_GPIO_Init+0x2e8>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	4a56      	ldr	r2, [pc, #344]	@ (8002be0 <HAL_GPIO_Init+0x2e8>)
 8002a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a8e:	4b54      	ldr	r3, [pc, #336]	@ (8002be0 <HAL_GPIO_Init+0x2e8>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a9a:	4a52      	ldr	r2, [pc, #328]	@ (8002be4 <HAL_GPIO_Init+0x2ec>)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a49      	ldr	r2, [pc, #292]	@ (8002be8 <HAL_GPIO_Init+0x2f0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d019      	beq.n	8002afa <HAL_GPIO_Init+0x202>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a48      	ldr	r2, [pc, #288]	@ (8002bec <HAL_GPIO_Init+0x2f4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_GPIO_Init+0x1fe>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a47      	ldr	r2, [pc, #284]	@ (8002bf0 <HAL_GPIO_Init+0x2f8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00d      	beq.n	8002af2 <HAL_GPIO_Init+0x1fa>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a46      	ldr	r2, [pc, #280]	@ (8002bf4 <HAL_GPIO_Init+0x2fc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <HAL_GPIO_Init+0x1f6>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a45      	ldr	r2, [pc, #276]	@ (8002bf8 <HAL_GPIO_Init+0x300>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <HAL_GPIO_Init+0x1f2>
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	e008      	b.n	8002afc <HAL_GPIO_Init+0x204>
 8002aea:	2307      	movs	r3, #7
 8002aec:	e006      	b.n	8002afc <HAL_GPIO_Init+0x204>
 8002aee:	2303      	movs	r3, #3
 8002af0:	e004      	b.n	8002afc <HAL_GPIO_Init+0x204>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e002      	b.n	8002afc <HAL_GPIO_Init+0x204>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_GPIO_Init+0x204>
 8002afa:	2300      	movs	r3, #0
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	f002 0203 	and.w	r2, r2, #3
 8002b02:	0092      	lsls	r2, r2, #2
 8002b04:	4093      	lsls	r3, r2
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b0c:	4935      	ldr	r1, [pc, #212]	@ (8002be4 <HAL_GPIO_Init+0x2ec>)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	3302      	adds	r3, #2
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1a:	4b38      	ldr	r3, [pc, #224]	@ (8002bfc <HAL_GPIO_Init+0x304>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002bfc <HAL_GPIO_Init+0x304>)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b44:	4b2d      	ldr	r3, [pc, #180]	@ (8002bfc <HAL_GPIO_Init+0x304>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b68:	4a24      	ldr	r2, [pc, #144]	@ (8002bfc <HAL_GPIO_Init+0x304>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b6e:	4b23      	ldr	r3, [pc, #140]	@ (8002bfc <HAL_GPIO_Init+0x304>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b92:	4a1a      	ldr	r2, [pc, #104]	@ (8002bfc <HAL_GPIO_Init+0x304>)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b98:	4b18      	ldr	r3, [pc, #96]	@ (8002bfc <HAL_GPIO_Init+0x304>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002bfc <HAL_GPIO_Init+0x304>)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	2b0f      	cmp	r3, #15
 8002bcc:	f67f aea2 	bls.w	8002914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3724      	adds	r7, #36	@ 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40013800 	.word	0x40013800
 8002be8:	40020000 	.word	0x40020000
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	40020800 	.word	0x40020800
 8002bf4:	40020c00 	.word	0x40020c00
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40013c00 	.word	0x40013c00

08002c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c10:	787b      	ldrb	r3, [r7, #1]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c1c:	e003      	b.n	8002c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	041a      	lsls	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	619a      	str	r2, [r3, #24]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e12b      	b.n	8002e9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fe ff04 	bl	8001a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2224      	movs	r2, #36	@ 0x24
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c98:	f002 fbe4 	bl	8005464 <HAL_RCC_GetPCLK1Freq>
 8002c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4a81      	ldr	r2, [pc, #516]	@ (8002ea8 <HAL_I2C_Init+0x274>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d807      	bhi.n	8002cb8 <HAL_I2C_Init+0x84>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a80      	ldr	r2, [pc, #512]	@ (8002eac <HAL_I2C_Init+0x278>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	bf94      	ite	ls
 8002cb0:	2301      	movls	r3, #1
 8002cb2:	2300      	movhi	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	e006      	b.n	8002cc6 <HAL_I2C_Init+0x92>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a7d      	ldr	r2, [pc, #500]	@ (8002eb0 <HAL_I2C_Init+0x27c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	bf94      	ite	ls
 8002cc0:	2301      	movls	r3, #1
 8002cc2:	2300      	movhi	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0e7      	b.n	8002e9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4a78      	ldr	r2, [pc, #480]	@ (8002eb4 <HAL_I2C_Init+0x280>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	0c9b      	lsrs	r3, r3, #18
 8002cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a6a      	ldr	r2, [pc, #424]	@ (8002ea8 <HAL_I2C_Init+0x274>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d802      	bhi.n	8002d08 <HAL_I2C_Init+0xd4>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3301      	adds	r3, #1
 8002d06:	e009      	b.n	8002d1c <HAL_I2C_Init+0xe8>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	4a69      	ldr	r2, [pc, #420]	@ (8002eb8 <HAL_I2C_Init+0x284>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	099b      	lsrs	r3, r3, #6
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	495c      	ldr	r1, [pc, #368]	@ (8002ea8 <HAL_I2C_Init+0x274>)
 8002d38:	428b      	cmp	r3, r1
 8002d3a:	d819      	bhi.n	8002d70 <HAL_I2C_Init+0x13c>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e59      	subs	r1, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4a:	1c59      	adds	r1, r3, #1
 8002d4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d50:	400b      	ands	r3, r1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_I2C_Init+0x138>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1e59      	subs	r1, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6a:	e051      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	e04f      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d111      	bne.n	8002d9c <HAL_I2C_Init+0x168>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1e58      	subs	r0, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	440b      	add	r3, r1
 8002d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e012      	b.n	8002dc2 <HAL_I2C_Init+0x18e>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1e58      	subs	r0, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	0099      	lsls	r1, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db2:	3301      	adds	r3, #1
 8002db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Init+0x196>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e022      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10e      	bne.n	8002df0 <HAL_I2C_Init+0x1bc>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1e58      	subs	r0, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	440b      	add	r3, r1
 8002de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de4:	3301      	adds	r3, #1
 8002de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dee:	e00f      	b.n	8002e10 <HAL_I2C_Init+0x1dc>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1e58      	subs	r0, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	0099      	lsls	r1, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	6809      	ldr	r1, [r1, #0]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6911      	ldr	r1, [r2, #16]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68d2      	ldr	r2, [r2, #12]
 8002e4a:	4311      	orrs	r1, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	000186a0 	.word	0x000186a0
 8002eac:	001e847f 	.word	0x001e847f
 8002eb0:	003d08ff 	.word	0x003d08ff
 8002eb4:	431bde83 	.word	0x431bde83
 8002eb8:	10624dd3 	.word	0x10624dd3

08002ebc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	460b      	mov	r3, r1
 8002eca:	817b      	strh	r3, [r7, #10]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ed0:	f7fe fff0 	bl	8001eb4 <HAL_GetTick>
 8002ed4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	f040 80e0 	bne.w	80030a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2319      	movs	r3, #25
 8002eea:	2201      	movs	r2, #1
 8002eec:	4970      	ldr	r1, [pc, #448]	@ (80030b0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fc64 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
 8002efc:	e0d3      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_I2C_Master_Transmit+0x50>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e0cc      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ea>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d007      	beq.n	8002f32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2221      	movs	r2, #33	@ 0x21
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	893a      	ldrh	r2, [r7, #8]
 8002f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4a50      	ldr	r2, [pc, #320]	@ (80030b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f74:	8979      	ldrh	r1, [r7, #10]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	6a3a      	ldr	r2, [r7, #32]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 face 	bl	800351c <I2C_MasterRequestWrite>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e08d      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fa0:	e066      	b.n	8003070 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	6a39      	ldr	r1, [r7, #32]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 fd22 	bl	80039f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00d      	beq.n	8002fce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d107      	bne.n	8002fca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e06b      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d11b      	bne.n	8003044 <HAL_I2C_Master_Transmit+0x188>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003010:	2b00      	cmp	r3, #0
 8003012:	d017      	beq.n	8003044 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	6a39      	ldr	r1, [r7, #32]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fd19 	bl	8003a80 <I2C_WaitOnBTFFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00d      	beq.n	8003070 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	2b04      	cmp	r3, #4
 800305a:	d107      	bne.n	800306c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e01a      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	d194      	bne.n	8002fa2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	e000      	b.n	80030a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030a4:	2302      	movs	r3, #2
  }
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	00100002 	.word	0x00100002
 80030b4:	ffff0000 	.word	0xffff0000

080030b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08c      	sub	sp, #48	@ 0x30
 80030bc:	af02      	add	r7, sp, #8
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	461a      	mov	r2, r3
 80030c4:	460b      	mov	r3, r1
 80030c6:	817b      	strh	r3, [r7, #10]
 80030c8:	4613      	mov	r3, r2
 80030ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030cc:	f7fe fef2 	bl	8001eb4 <HAL_GetTick>
 80030d0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b20      	cmp	r3, #32
 80030dc:	f040 8217 	bne.w	800350e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2319      	movs	r3, #25
 80030e6:	2201      	movs	r2, #1
 80030e8:	497c      	ldr	r1, [pc, #496]	@ (80032dc <HAL_I2C_Master_Receive+0x224>)
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fb66 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	e20a      	b.n	8003510 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_I2C_Master_Receive+0x50>
 8003104:	2302      	movs	r3, #2
 8003106:	e203      	b.n	8003510 <HAL_I2C_Master_Receive+0x458>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d007      	beq.n	800312e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0201 	orr.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800313c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2222      	movs	r2, #34	@ 0x22
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2210      	movs	r2, #16
 800314a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	893a      	ldrh	r2, [r7, #8]
 800315e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a5c      	ldr	r2, [pc, #368]	@ (80032e0 <HAL_I2C_Master_Receive+0x228>)
 800316e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003170:	8979      	ldrh	r1, [r7, #10]
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fa52 	bl	8003620 <I2C_MasterRequestRead>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e1c4      	b.n	8003510 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318a:	2b00      	cmp	r3, #0
 800318c:	d113      	bne.n	80031b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318e:	2300      	movs	r3, #0
 8003190:	623b      	str	r3, [r7, #32]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	623b      	str	r3, [r7, #32]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	623b      	str	r3, [r7, #32]
 80031a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e198      	b.n	80034e8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d11b      	bne.n	80031f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e178      	b.n	80034e8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d11b      	bne.n	8003236 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800320c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800321c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	e158      	b.n	80034e8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003244:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800325c:	e144      	b.n	80034e8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003262:	2b03      	cmp	r3, #3
 8003264:	f200 80f1 	bhi.w	800344a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326c:	2b01      	cmp	r3, #1
 800326e:	d123      	bne.n	80032b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003272:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fc4b 	bl	8003b10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e145      	b.n	8003510 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032b6:	e117      	b.n	80034e8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d14e      	bne.n	800335e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c6:	2200      	movs	r2, #0
 80032c8:	4906      	ldr	r1, [pc, #24]	@ (80032e4 <HAL_I2C_Master_Receive+0x22c>)
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fa76 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e11a      	b.n	8003510 <HAL_I2C_Master_Receive+0x458>
 80032da:	bf00      	nop
 80032dc:	00100002 	.word	0x00100002
 80032e0:	ffff0000 	.word	0xffff0000
 80032e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800335c:	e0c4      	b.n	80034e8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003364:	2200      	movs	r2, #0
 8003366:	496c      	ldr	r1, [pc, #432]	@ (8003518 <HAL_I2C_Master_Receive+0x460>)
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 fa27 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0cb      	b.n	8003510 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c0:	2200      	movs	r2, #0
 80033c2:	4955      	ldr	r1, [pc, #340]	@ (8003518 <HAL_I2C_Master_Receive+0x460>)
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f9f9 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e09d      	b.n	8003510 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003448:	e04e      	b.n	80034e8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800344c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fb5e 	bl	8003b10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e058      	b.n	8003510 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b04      	cmp	r3, #4
 800349c:	d124      	bne.n	80034e8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d107      	bne.n	80034b6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034b4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f47f aeb6 	bne.w	800325e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
  }
}
 8003510:	4618      	mov	r0, r3
 8003512:	3728      	adds	r7, #40	@ 0x28
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	00010004 	.word	0x00010004

0800351c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	460b      	mov	r3, r1
 800352a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d006      	beq.n	8003546 <I2C_MasterRequestWrite+0x2a>
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d003      	beq.n	8003546 <I2C_MasterRequestWrite+0x2a>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003544:	d108      	bne.n	8003558 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e00b      	b.n	8003570 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355c:	2b12      	cmp	r3, #18
 800355e:	d107      	bne.n	8003570 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800356e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f91d 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00d      	beq.n	80035a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003596:	d103      	bne.n	80035a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e035      	b.n	8003610 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035ac:	d108      	bne.n	80035c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035bc:	611a      	str	r2, [r3, #16]
 80035be:	e01b      	b.n	80035f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035c0:	897b      	ldrh	r3, [r7, #10]
 80035c2:	11db      	asrs	r3, r3, #7
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f003 0306 	and.w	r3, r3, #6
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f063 030f 	orn	r3, r3, #15
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	490e      	ldr	r1, [pc, #56]	@ (8003618 <I2C_MasterRequestWrite+0xfc>)
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f966 	bl	80038b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e010      	b.n	8003610 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035ee:	897b      	ldrh	r3, [r7, #10]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4907      	ldr	r1, [pc, #28]	@ (800361c <I2C_MasterRequestWrite+0x100>)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f956 	bl	80038b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	00010008 	.word	0x00010008
 800361c:	00010002 	.word	0x00010002

08003620 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	607a      	str	r2, [r7, #4]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	460b      	mov	r3, r1
 800362e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003634:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003644:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d006      	beq.n	800365a <I2C_MasterRequestRead+0x3a>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d003      	beq.n	800365a <I2C_MasterRequestRead+0x3a>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003658:	d108      	bne.n	800366c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e00b      	b.n	8003684 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003670:	2b11      	cmp	r3, #17
 8003672:	d107      	bne.n	8003684 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003682:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f893 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036aa:	d103      	bne.n	80036b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e079      	b.n	80037ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036c0:	d108      	bne.n	80036d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036c2:	897b      	ldrh	r3, [r7, #10]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	611a      	str	r2, [r3, #16]
 80036d2:	e05f      	b.n	8003794 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036d4:	897b      	ldrh	r3, [r7, #10]
 80036d6:	11db      	asrs	r3, r3, #7
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f003 0306 	and.w	r3, r3, #6
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f063 030f 	orn	r3, r3, #15
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4930      	ldr	r1, [pc, #192]	@ (80037b4 <I2C_MasterRequestRead+0x194>)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f8dc 	bl	80038b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e054      	b.n	80037ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003702:	897b      	ldrh	r3, [r7, #10]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4929      	ldr	r1, [pc, #164]	@ (80037b8 <I2C_MasterRequestRead+0x198>)
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f8cc 	bl	80038b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e044      	b.n	80037ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003746:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f831 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00d      	beq.n	800377c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800376e:	d103      	bne.n	8003778 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003776:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e017      	b.n	80037ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800377c:	897b      	ldrh	r3, [r7, #10]
 800377e:	11db      	asrs	r3, r3, #7
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f003 0306 	and.w	r3, r3, #6
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f063 030e 	orn	r3, r3, #14
 800378c:	b2da      	uxtb	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4907      	ldr	r1, [pc, #28]	@ (80037b8 <I2C_MasterRequestRead+0x198>)
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f888 	bl	80038b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	00010008 	.word	0x00010008
 80037b8:	00010002 	.word	0x00010002

080037bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037cc:	e048      	b.n	8003860 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d044      	beq.n	8003860 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d6:	f7fe fb6d 	bl	8001eb4 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d302      	bcc.n	80037ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d139      	bne.n	8003860 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	0c1b      	lsrs	r3, r3, #16
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d10d      	bne.n	8003812 <I2C_WaitOnFlagUntilTimeout+0x56>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	43da      	mvns	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4013      	ands	r3, r2
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	e00c      	b.n	800382c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	43da      	mvns	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4013      	ands	r3, r2
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	429a      	cmp	r2, r3
 8003830:	d116      	bne.n	8003860 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e023      	b.n	80038a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	0c1b      	lsrs	r3, r3, #16
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d10d      	bne.n	8003886 <I2C_WaitOnFlagUntilTimeout+0xca>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	43da      	mvns	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4013      	ands	r3, r2
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	e00c      	b.n	80038a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	43da      	mvns	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4013      	ands	r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d093      	beq.n	80037ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038be:	e071      	b.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ce:	d123      	bne.n	8003918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	f043 0204 	orr.w	r2, r3, #4
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e067      	b.n	80039e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391e:	d041      	beq.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003920:	f7fe fac8 	bl	8001eb4 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	429a      	cmp	r2, r3
 800392e:	d302      	bcc.n	8003936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d136      	bne.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d10c      	bne.n	800395a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	43da      	mvns	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4013      	ands	r3, r2
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	bf14      	ite	ne
 8003952:	2301      	movne	r3, #1
 8003954:	2300      	moveq	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	e00b      	b.n	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	43da      	mvns	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4013      	ands	r3, r2
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf14      	ite	ne
 800396c:	2301      	movne	r3, #1
 800396e:	2300      	moveq	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d016      	beq.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e021      	b.n	80039e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d10c      	bne.n	80039c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	43da      	mvns	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4013      	ands	r3, r2
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e00b      	b.n	80039e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	43da      	mvns	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4013      	ands	r3, r2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	bf14      	ite	ne
 80039da:	2301      	movne	r3, #1
 80039dc:	2300      	moveq	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f47f af6d 	bne.w	80038c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039fc:	e034      	b.n	8003a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f8e3 	bl	8003bca <I2C_IsAcknowledgeFailed>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e034      	b.n	8003a78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d028      	beq.n	8003a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a16:	f7fe fa4d 	bl	8001eb4 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d11d      	bne.n	8003a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a36:	2b80      	cmp	r3, #128	@ 0x80
 8003a38:	d016      	beq.n	8003a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e007      	b.n	8003a78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a72:	2b80      	cmp	r3, #128	@ 0x80
 8003a74:	d1c3      	bne.n	80039fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a8c:	e034      	b.n	8003af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f89b 	bl	8003bca <I2C_IsAcknowledgeFailed>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e034      	b.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d028      	beq.n	8003af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa6:	f7fe fa05 	bl	8001eb4 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11d      	bne.n	8003af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d016      	beq.n	8003af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	f043 0220 	orr.w	r2, r3, #32
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e007      	b.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d1c3      	bne.n	8003a8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b1c:	e049      	b.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d119      	bne.n	8003b60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0210 	mvn.w	r2, #16
 8003b34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e030      	b.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b60:	f7fe f9a8 	bl	8001eb4 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d302      	bcc.n	8003b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d11d      	bne.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b80:	2b40      	cmp	r3, #64	@ 0x40
 8003b82:	d016      	beq.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e007      	b.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbc:	2b40      	cmp	r3, #64	@ 0x40
 8003bbe:	d1ae      	bne.n	8003b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be0:	d11b      	bne.n	8003c1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	f043 0204 	orr.w	r2, r3, #4
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e128      	b.n	8003e8c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a90      	ldr	r2, [pc, #576]	@ (8003e94 <HAL_I2S_Init+0x26c>)
 8003c52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7fd ff4f 	bl	8001af8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c70:	f023 030f 	bic.w	r3, r3, #15
 8003c74:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d060      	beq.n	8003d48 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003c8e:	2310      	movs	r3, #16
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	e001      	b.n	8003c98 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003c94:	2320      	movs	r3, #32
 8003c96:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d802      	bhi.n	8003ca6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003ca6:	2001      	movs	r0, #1
 8003ca8:	f001 fce0 	bl	800566c <HAL_RCCEx_GetPeriphCLKFreq>
 8003cac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb6:	d125      	bne.n	8003d04 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d010      	beq.n	8003ce2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	3305      	adds	r3, #5
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	e01f      	b.n	8003d22 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfe:	3305      	adds	r3, #5
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	e00e      	b.n	8003d22 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	461a      	mov	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1e:	3305      	adds	r3, #5
 8003d20:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4a5c      	ldr	r2, [pc, #368]	@ (8003e98 <HAL_I2S_Init+0x270>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	08db      	lsrs	r3, r3, #3
 8003d2c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	085b      	lsrs	r3, r3, #1
 8003d3e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	e003      	b.n	8003d50 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d902      	bls.n	8003d5c <HAL_I2S_Init+0x134>
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	2bff      	cmp	r3, #255	@ 0xff
 8003d5a:	d907      	bls.n	8003d6c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d60:	f043 0210 	orr.w	r2, r3, #16
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e08f      	b.n	8003e8c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	ea42 0103 	orr.w	r1, r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d8a:	f023 030f 	bic.w	r3, r3, #15
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6851      	ldr	r1, [r2, #4]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6892      	ldr	r2, [r2, #8]
 8003d96:	4311      	orrs	r1, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	68d2      	ldr	r2, [r2, #12]
 8003d9c:	4311      	orrs	r1, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6992      	ldr	r2, [r2, #24]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d161      	bne.n	8003e7c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a38      	ldr	r2, [pc, #224]	@ (8003e9c <HAL_I2S_Init+0x274>)
 8003dbc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a37      	ldr	r2, [pc, #220]	@ (8003ea0 <HAL_I2S_Init+0x278>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <HAL_I2S_Init+0x1a4>
 8003dc8:	4b36      	ldr	r3, [pc, #216]	@ (8003ea4 <HAL_I2S_Init+0x27c>)
 8003dca:	e001      	b.n	8003dd0 <HAL_I2S_Init+0x1a8>
 8003dcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	4932      	ldr	r1, [pc, #200]	@ (8003ea0 <HAL_I2S_Init+0x278>)
 8003dd8:	428a      	cmp	r2, r1
 8003dda:	d101      	bne.n	8003de0 <HAL_I2S_Init+0x1b8>
 8003ddc:	4a31      	ldr	r2, [pc, #196]	@ (8003ea4 <HAL_I2S_Init+0x27c>)
 8003dde:	e001      	b.n	8003de4 <HAL_I2S_Init+0x1bc>
 8003de0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003de4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003de8:	f023 030f 	bic.w	r3, r3, #15
 8003dec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2b      	ldr	r2, [pc, #172]	@ (8003ea0 <HAL_I2S_Init+0x278>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <HAL_I2S_Init+0x1d4>
 8003df8:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea4 <HAL_I2S_Init+0x27c>)
 8003dfa:	e001      	b.n	8003e00 <HAL_I2S_Init+0x1d8>
 8003dfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e00:	2202      	movs	r2, #2
 8003e02:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a25      	ldr	r2, [pc, #148]	@ (8003ea0 <HAL_I2S_Init+0x278>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2S_Init+0x1ea>
 8003e0e:	4b25      	ldr	r3, [pc, #148]	@ (8003ea4 <HAL_I2S_Init+0x27c>)
 8003e10:	e001      	b.n	8003e16 <HAL_I2S_Init+0x1ee>
 8003e12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e22:	d003      	beq.n	8003e2c <HAL_I2S_Init+0x204>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d103      	bne.n	8003e34 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	e001      	b.n	8003e38 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e42:	4313      	orrs	r3, r2
 8003e44:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e56:	4313      	orrs	r3, r2
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	897b      	ldrh	r3, [r7, #10]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e64:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea0 <HAL_I2S_Init+0x278>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <HAL_I2S_Init+0x24c>
 8003e70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea4 <HAL_I2S_Init+0x27c>)
 8003e72:	e001      	b.n	8003e78 <HAL_I2S_Init+0x250>
 8003e74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e78:	897a      	ldrh	r2, [r7, #10]
 8003e7a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	08004549 	.word	0x08004549
 8003e98:	cccccccd 	.word	0xcccccccd
 8003e9c:	080046d1 	.word	0x080046d1
 8003ea0:	40003800 	.word	0x40003800
 8003ea4:	40003400 	.word	0x40003400

08003ea8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_I2S_Transmit_DMA+0x1a>
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e08a      	b.n	8003fdc <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e082      	b.n	8003fdc <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2S_Transmit_DMA+0x3e>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e07a      	b.n	8003fdc <HAL_I2S_Transmit_DMA+0x134>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d002      	beq.n	8003f1a <HAL_I2S_Transmit_DMA+0x72>
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b05      	cmp	r3, #5
 8003f18:	d10a      	bne.n	8003f30 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f2e:	e005      	b.n	8003f3c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	88fa      	ldrh	r2, [r7, #6]
 8003f34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	88fa      	ldrh	r2, [r7, #6]
 8003f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f40:	4a28      	ldr	r2, [pc, #160]	@ (8003fe4 <HAL_I2S_Transmit_DMA+0x13c>)
 8003f42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f48:	4a27      	ldr	r2, [pc, #156]	@ (8003fe8 <HAL_I2S_Transmit_DMA+0x140>)
 8003f4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f50:	4a26      	ldr	r2, [pc, #152]	@ (8003fec <HAL_I2S_Transmit_DMA+0x144>)
 8003f52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f5c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f64:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f6c:	f7fe f992 	bl	8002294 <HAL_DMA_Start_IT>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00f      	beq.n	8003f96 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	f043 0208 	orr.w	r2, r3, #8
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e022      	b.n	8003fdc <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d107      	bne.n	8003fbc <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0202 	orr.w	r2, r2, #2
 8003fba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d107      	bne.n	8003fda <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fd8:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	08004427 	.word	0x08004427
 8003fe8:	080043e5 	.word	0x080043e5
 8003fec:	08004443 	.word	0x08004443

08003ff0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004004:	d004      	beq.n	8004010 <HAL_I2S_DMAStop+0x20>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 80d1 	bne.w	80041b2 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00f      	beq.n	8004038 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe f991 	bl	8002344 <HAL_DMA_Abort>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402c:	f043 0208 	orr.w	r2, r3, #8
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8004038:	2364      	movs	r3, #100	@ 0x64
 800403a:	2201      	movs	r2, #1
 800403c:	2102      	movs	r1, #2
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fb0c 	bl	800465c <I2S_WaitFlagStateUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f043 0201 	orr.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8004062:	2364      	movs	r3, #100	@ 0x64
 8004064:	2200      	movs	r2, #0
 8004066:	2180      	movs	r1, #128	@ 0x80
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 faf7 	bl	800465c <I2S_WaitFlagStateUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00b      	beq.n	800408c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004078:	f043 0201 	orr.w	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69da      	ldr	r2, [r3, #28]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0202 	bic.w	r2, r2, #2
 80040b8:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b05      	cmp	r3, #5
 80040c4:	f040 8165 	bne.w	8004392 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00f      	beq.n	80040f0 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe f935 	bl	8002344 <HAL_DMA_Abort>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e4:	f043 0208 	orr.w	r2, r3, #8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a8a      	ldr	r2, [pc, #552]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d101      	bne.n	80040fe <HAL_I2S_DMAStop+0x10e>
 80040fa:	4b8a      	ldr	r3, [pc, #552]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 80040fc:	e001      	b.n	8004102 <HAL_I2S_DMAStop+0x112>
 80040fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4985      	ldr	r1, [pc, #532]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 800410a:	428b      	cmp	r3, r1
 800410c:	d101      	bne.n	8004112 <HAL_I2S_DMAStop+0x122>
 800410e:	4b85      	ldr	r3, [pc, #532]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 8004110:	e001      	b.n	8004116 <HAL_I2S_DMAStop+0x126>
 8004112:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800411a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a7e      	ldr	r2, [pc, #504]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d101      	bne.n	800412e <HAL_I2S_DMAStop+0x13e>
 800412a:	4b7e      	ldr	r3, [pc, #504]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 800412c:	e001      	b.n	8004132 <HAL_I2S_DMAStop+0x142>
 800412e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a79      	ldr	r2, [pc, #484]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d101      	bne.n	8004144 <HAL_I2S_DMAStop+0x154>
 8004140:	4b78      	ldr	r3, [pc, #480]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 8004142:	e001      	b.n	8004148 <HAL_I2S_DMAStop+0x158>
 8004144:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a73      	ldr	r2, [pc, #460]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d101      	bne.n	800415c <HAL_I2S_DMAStop+0x16c>
 8004158:	4b72      	ldr	r3, [pc, #456]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 800415a:	e001      	b.n	8004160 <HAL_I2S_DMAStop+0x170>
 800415c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	496e      	ldr	r1, [pc, #440]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 8004168:	428b      	cmp	r3, r1
 800416a:	d101      	bne.n	8004170 <HAL_I2S_DMAStop+0x180>
 800416c:	4b6d      	ldr	r3, [pc, #436]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 800416e:	e001      	b.n	8004174 <HAL_I2S_DMAStop+0x184>
 8004170:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10c      	bne.n	800419c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800419a:	e0fa      	b.n	8004392 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a5f      	ldr	r2, [pc, #380]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <HAL_I2S_DMAStop+0x1ba>
 80041a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 80041a8:	e001      	b.n	80041ae <HAL_I2S_DMAStop+0x1be>
 80041aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041ae:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80041b0:	e0ef      	b.n	8004392 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ba:	d005      	beq.n	80041c8 <HAL_I2S_DMAStop+0x1d8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041c4:	f040 80e5 	bne.w	8004392 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00f      	beq.n	80041f0 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fe f8b5 	bl	8002344 <HAL_DMA_Abort>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e4:	f043 0208 	orr.w	r2, r3, #8
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b05      	cmp	r3, #5
 80041fa:	f040 809a 	bne.w	8004332 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00f      	beq.n	8004226 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe f89a 	bl	8002344 <HAL_DMA_Abort>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421a:	f043 0208 	orr.w	r2, r3, #8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8004226:	f7fd fe45 	bl	8001eb4 <HAL_GetTick>
 800422a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800422c:	e012      	b.n	8004254 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800422e:	f7fd fe41 	bl	8001eb4 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b64      	cmp	r3, #100	@ 0x64
 800423a:	d90b      	bls.n	8004254 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004240:	f043 0201 	orr.w	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a31      	ldr	r2, [pc, #196]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_I2S_DMAStop+0x272>
 800425e:	4b31      	ldr	r3, [pc, #196]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 8004260:	e001      	b.n	8004266 <HAL_I2S_DMAStop+0x276>
 8004262:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b02      	cmp	r3, #2
 800426e:	d1de      	bne.n	800422e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004270:	e012      	b.n	8004298 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004272:	f7fd fe1f 	bl	8001eb4 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b64      	cmp	r3, #100	@ 0x64
 800427e:	d90b      	bls.n	8004298 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004284:	f043 0201 	orr.w	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a20      	ldr	r2, [pc, #128]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <HAL_I2S_DMAStop+0x2b6>
 80042a2:	4b20      	ldr	r3, [pc, #128]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 80042a4:	e001      	b.n	80042aa <HAL_I2S_DMAStop+0x2ba>
 80042a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b0:	2b80      	cmp	r3, #128	@ 0x80
 80042b2:	d0de      	beq.n	8004272 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a19      	ldr	r2, [pc, #100]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d101      	bne.n	80042c2 <HAL_I2S_DMAStop+0x2d2>
 80042be:	4b19      	ldr	r3, [pc, #100]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 80042c0:	e001      	b.n	80042c6 <HAL_I2S_DMAStop+0x2d6>
 80042c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4914      	ldr	r1, [pc, #80]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 80042ce:	428b      	cmp	r3, r1
 80042d0:	d101      	bne.n	80042d6 <HAL_I2S_DMAStop+0x2e6>
 80042d2:	4b14      	ldr	r3, [pc, #80]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 80042d4:	e001      	b.n	80042da <HAL_I2S_DMAStop+0x2ea>
 80042d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042de:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d101      	bne.n	80042f2 <HAL_I2S_DMAStop+0x302>
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 80042f0:	e001      	b.n	80042f6 <HAL_I2S_DMAStop+0x306>
 80042f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a07      	ldr	r2, [pc, #28]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <HAL_I2S_DMAStop+0x31a>
 8004306:	4b07      	ldr	r3, [pc, #28]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 8004308:	e001      	b.n	800430e <HAL_I2S_DMAStop+0x31e>
 800430a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4902      	ldr	r1, [pc, #8]	@ (8004320 <HAL_I2S_DMAStop+0x330>)
 8004316:	428b      	cmp	r3, r1
 8004318:	d106      	bne.n	8004328 <HAL_I2S_DMAStop+0x338>
 800431a:	4b02      	ldr	r3, [pc, #8]	@ (8004324 <HAL_I2S_DMAStop+0x334>)
 800431c:	e006      	b.n	800432c <HAL_I2S_DMAStop+0x33c>
 800431e:	bf00      	nop
 8004320:	40003800 	.word	0x40003800
 8004324:	40003400 	.word	0x40003400
 8004328:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800432c:	f022 0202 	bic.w	r2, r2, #2
 8004330:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69da      	ldr	r2, [r3, #28]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004340:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004370:	d10c      	bne.n	800438c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	77fb      	strb	r3, [r7, #31]
 800438a:	e002      	b.n	8004392 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 800439a:	7ffb      	ldrb	r3, [r7, #31]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3720      	adds	r7, #32
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
}
 80043b4:	bf00      	nop
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10e      	bne.n	8004418 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0202 	bic.w	r2, r2, #2
 8004408:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7fd fa91 	bl	8001940 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004432:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7fd fa9b 	bl	8001970 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0203 	bic.w	r2, r2, #3
 800445e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004478:	f043 0208 	orr.w	r2, r3, #8
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff ffa5 	bl	80043d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449a:	881a      	ldrh	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a6:	1c9a      	adds	r2, r3, #2
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10e      	bne.n	80044e2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044d2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7fd fa2f 	bl	8001940 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	b292      	uxth	r2, r2
 80044fe:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	1c9a      	adds	r2, r3, #2
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10e      	bne.n	8004540 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004530:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ff3e 	bl	80043bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b04      	cmp	r3, #4
 8004562:	d13a      	bne.n	80045da <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b01      	cmp	r3, #1
 800456c:	d109      	bne.n	8004582 <I2S_IRQHandler+0x3a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004578:	2b40      	cmp	r3, #64	@ 0x40
 800457a:	d102      	bne.n	8004582 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff ffb4 	bl	80044ea <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004588:	2b40      	cmp	r3, #64	@ 0x40
 800458a:	d126      	bne.n	80045da <I2S_IRQHandler+0x92>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b20      	cmp	r3, #32
 8004598:	d11f      	bne.n	80045da <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045a8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045cc:	f043 0202 	orr.w	r2, r3, #2
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff fefb 	bl	80043d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d136      	bne.n	8004654 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d109      	bne.n	8004604 <I2S_IRQHandler+0xbc>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045fa:	2b80      	cmp	r3, #128	@ 0x80
 80045fc:	d102      	bne.n	8004604 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ff45 	bl	800448e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b08      	cmp	r3, #8
 800460c:	d122      	bne.n	8004654 <I2S_IRQHandler+0x10c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b20      	cmp	r3, #32
 800461a:	d11b      	bne.n	8004654 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800462a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004646:	f043 0204 	orr.w	r2, r3, #4
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff febe 	bl	80043d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004654:	bf00      	nop
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800466c:	f7fd fc22 	bl	8001eb4 <HAL_GetTick>
 8004670:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004672:	e018      	b.n	80046a6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d014      	beq.n	80046a6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800467c:	f7fd fc1a 	bl	8001eb4 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d902      	bls.n	8004692 <I2S_WaitFlagStateUntilTimeout+0x36>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e00f      	b.n	80046c6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4013      	ands	r3, r2
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d1d7      	bne.n	8004674 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a92      	ldr	r2, [pc, #584]	@ (8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80046ea:	4b92      	ldr	r3, [pc, #584]	@ (8004934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046ec:	e001      	b.n	80046f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80046ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a8b      	ldr	r2, [pc, #556]	@ (8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d101      	bne.n	800470c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004708:	4b8a      	ldr	r3, [pc, #552]	@ (8004934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800470a:	e001      	b.n	8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800470c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800471c:	d004      	beq.n	8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 8099 	bne.w	800485a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b02      	cmp	r3, #2
 8004730:	d107      	bne.n	8004742 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f925 	bl	800498c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b01      	cmp	r3, #1
 800474a:	d107      	bne.n	800475c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f9c8 	bl	8004aec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004762:	2b40      	cmp	r3, #64	@ 0x40
 8004764:	d13a      	bne.n	80047dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d035      	beq.n	80047dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a6e      	ldr	r2, [pc, #440]	@ (8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d101      	bne.n	800477e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800477a:	4b6e      	ldr	r3, [pc, #440]	@ (8004934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800477c:	e001      	b.n	8004782 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800477e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4969      	ldr	r1, [pc, #420]	@ (8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800478a:	428b      	cmp	r3, r1
 800478c:	d101      	bne.n	8004792 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800478e:	4b69      	ldr	r3, [pc, #420]	@ (8004934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004790:	e001      	b.n	8004796 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004792:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004796:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800479a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ce:	f043 0202 	orr.w	r2, r3, #2
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff fdfa 	bl	80043d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	f040 80c3 	bne.w	800496e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80bd 	beq.w	800496e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004802:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a49      	ldr	r2, [pc, #292]	@ (8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d101      	bne.n	8004812 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800480e:	4b49      	ldr	r3, [pc, #292]	@ (8004934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004810:	e001      	b.n	8004816 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004812:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4944      	ldr	r1, [pc, #272]	@ (8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800481e:	428b      	cmp	r3, r1
 8004820:	d101      	bne.n	8004826 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004822:	4b44      	ldr	r3, [pc, #272]	@ (8004934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004824:	e001      	b.n	800482a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004826:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800482a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800482e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004830:	2300      	movs	r3, #0
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484a:	f043 0204 	orr.w	r2, r3, #4
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff fdbc 	bl	80043d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004858:	e089      	b.n	800496e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b02      	cmp	r3, #2
 8004862:	d107      	bne.n	8004874 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f8be 	bl	80049f0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b01      	cmp	r3, #1
 800487c:	d107      	bne.n	800488e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f8fd 	bl	8004a88 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004894:	2b40      	cmp	r3, #64	@ 0x40
 8004896:	d12f      	bne.n	80048f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d02a      	beq.n	80048f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048b0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d101      	bne.n	80048c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80048bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048be:	e001      	b.n	80048c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80048c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4919      	ldr	r1, [pc, #100]	@ (8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048cc:	428b      	cmp	r3, r1
 80048ce:	d101      	bne.n	80048d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80048d0:	4b18      	ldr	r3, [pc, #96]	@ (8004934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048d2:	e001      	b.n	80048d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80048d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	f043 0202 	orr.w	r2, r3, #2
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff fd6c 	bl	80043d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d136      	bne.n	8004970 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d031      	beq.n	8004970 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a07      	ldr	r2, [pc, #28]	@ (8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d101      	bne.n	800491a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004916:	4b07      	ldr	r3, [pc, #28]	@ (8004934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004918:	e001      	b.n	800491e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800491a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4902      	ldr	r1, [pc, #8]	@ (8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004926:	428b      	cmp	r3, r1
 8004928:	d106      	bne.n	8004938 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800492a:	4b02      	ldr	r3, [pc, #8]	@ (8004934 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800492c:	e006      	b.n	800493c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800492e:	bf00      	nop
 8004930:	40003800 	.word	0x40003800
 8004934:	40003400 	.word	0x40003400
 8004938:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800493c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004940:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004950:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495e:	f043 0204 	orr.w	r2, r3, #4
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fd32 	bl	80043d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800496c:	e000      	b.n	8004970 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800496e:	bf00      	nop
}
 8004970:	bf00      	nop
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004998:	1c99      	adds	r1, r3, #2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6251      	str	r1, [r2, #36]	@ 0x24
 800499e:	881a      	ldrh	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d113      	bne.n	80049e6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ffc9 	bl	8004978 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	1c99      	adds	r1, r3, #2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6251      	str	r1, [r2, #36]	@ 0x24
 8004a02:	8819      	ldrh	r1, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1d      	ldr	r2, [pc, #116]	@ (8004a80 <I2SEx_TxISR_I2SExt+0x90>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <I2SEx_TxISR_I2SExt+0x22>
 8004a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8004a84 <I2SEx_TxISR_I2SExt+0x94>)
 8004a10:	e001      	b.n	8004a16 <I2SEx_TxISR_I2SExt+0x26>
 8004a12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a16:	460a      	mov	r2, r1
 8004a18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d121      	bne.n	8004a76 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a12      	ldr	r2, [pc, #72]	@ (8004a80 <I2SEx_TxISR_I2SExt+0x90>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d101      	bne.n	8004a40 <I2SEx_TxISR_I2SExt+0x50>
 8004a3c:	4b11      	ldr	r3, [pc, #68]	@ (8004a84 <I2SEx_TxISR_I2SExt+0x94>)
 8004a3e:	e001      	b.n	8004a44 <I2SEx_TxISR_I2SExt+0x54>
 8004a40:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	490d      	ldr	r1, [pc, #52]	@ (8004a80 <I2SEx_TxISR_I2SExt+0x90>)
 8004a4c:	428b      	cmp	r3, r1
 8004a4e:	d101      	bne.n	8004a54 <I2SEx_TxISR_I2SExt+0x64>
 8004a50:	4b0c      	ldr	r3, [pc, #48]	@ (8004a84 <I2SEx_TxISR_I2SExt+0x94>)
 8004a52:	e001      	b.n	8004a58 <I2SEx_TxISR_I2SExt+0x68>
 8004a54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ff81 	bl	8004978 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40003800 	.word	0x40003800
 8004a84:	40003400 	.word	0x40003400

08004a88 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68d8      	ldr	r0, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9a:	1c99      	adds	r1, r3, #2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004aa0:	b282      	uxth	r2, r0
 8004aa2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d113      	bne.n	8004ae4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004aca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff ff4a 	bl	8004978 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a20      	ldr	r2, [pc, #128]	@ (8004b7c <I2SEx_RxISR_I2SExt+0x90>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d101      	bne.n	8004b02 <I2SEx_RxISR_I2SExt+0x16>
 8004afe:	4b20      	ldr	r3, [pc, #128]	@ (8004b80 <I2SEx_RxISR_I2SExt+0x94>)
 8004b00:	e001      	b.n	8004b06 <I2SEx_RxISR_I2SExt+0x1a>
 8004b02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b06:	68d8      	ldr	r0, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0c:	1c99      	adds	r1, r3, #2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004b12:	b282      	uxth	r2, r0
 8004b14:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d121      	bne.n	8004b72 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a12      	ldr	r2, [pc, #72]	@ (8004b7c <I2SEx_RxISR_I2SExt+0x90>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d101      	bne.n	8004b3c <I2SEx_RxISR_I2SExt+0x50>
 8004b38:	4b11      	ldr	r3, [pc, #68]	@ (8004b80 <I2SEx_RxISR_I2SExt+0x94>)
 8004b3a:	e001      	b.n	8004b40 <I2SEx_RxISR_I2SExt+0x54>
 8004b3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	490d      	ldr	r1, [pc, #52]	@ (8004b7c <I2SEx_RxISR_I2SExt+0x90>)
 8004b48:	428b      	cmp	r3, r1
 8004b4a:	d101      	bne.n	8004b50 <I2SEx_RxISR_I2SExt+0x64>
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <I2SEx_RxISR_I2SExt+0x94>)
 8004b4e:	e001      	b.n	8004b54 <I2SEx_RxISR_I2SExt+0x68>
 8004b50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b54:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b58:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d106      	bne.n	8004b72 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff ff03 	bl	8004978 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40003800 	.word	0x40003800
 8004b80:	40003400 	.word	0x40003400

08004b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e267      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d075      	beq.n	8004c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ba2:	4b88      	ldr	r3, [pc, #544]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d00c      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bae:	4b85      	ldr	r3, [pc, #532]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d112      	bne.n	8004be0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bba:	4b82      	ldr	r3, [pc, #520]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bc6:	d10b      	bne.n	8004be0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d05b      	beq.n	8004c8c <HAL_RCC_OscConfig+0x108>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d157      	bne.n	8004c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e242      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x74>
 8004bea:	4b76      	ldr	r3, [pc, #472]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a75      	ldr	r2, [pc, #468]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e01d      	b.n	8004c34 <HAL_RCC_OscConfig+0xb0>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c00:	d10c      	bne.n	8004c1c <HAL_RCC_OscConfig+0x98>
 8004c02:	4b70      	ldr	r3, [pc, #448]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a6f      	ldr	r2, [pc, #444]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a6c      	ldr	r2, [pc, #432]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	e00b      	b.n	8004c34 <HAL_RCC_OscConfig+0xb0>
 8004c1c:	4b69      	ldr	r3, [pc, #420]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a68      	ldr	r2, [pc, #416]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	4b66      	ldr	r3, [pc, #408]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a65      	ldr	r2, [pc, #404]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d013      	beq.n	8004c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f7fd f93a 	bl	8001eb4 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c44:	f7fd f936 	bl	8001eb4 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	@ 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e207      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c56:	4b5b      	ldr	r3, [pc, #364]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0xc0>
 8004c62:	e014      	b.n	8004c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fd f926 	bl	8001eb4 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7fd f922 	bl	8001eb4 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	@ 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e1f3      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7e:	4b51      	ldr	r3, [pc, #324]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0xe8>
 8004c8a:	e000      	b.n	8004c8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d063      	beq.n	8004d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ca6:	4b47      	ldr	r3, [pc, #284]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d11c      	bne.n	8004cec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb2:	4b44      	ldr	r3, [pc, #272]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d116      	bne.n	8004cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbe:	4b41      	ldr	r3, [pc, #260]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x152>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d001      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e1c7      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4937      	ldr	r1, [pc, #220]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cea:	e03a      	b.n	8004d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d020      	beq.n	8004d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf4:	4b34      	ldr	r3, [pc, #208]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fd f8db 	bl	8001eb4 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d02:	f7fd f8d7 	bl	8001eb4 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e1a8      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d14:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d20:	4b28      	ldr	r3, [pc, #160]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4925      	ldr	r1, [pc, #148]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]
 8004d34:	e015      	b.n	8004d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d36:	4b24      	ldr	r3, [pc, #144]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fd f8ba 	bl	8001eb4 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d44:	f7fd f8b6 	bl	8001eb4 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e187      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d56:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d036      	beq.n	8004ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d76:	4b15      	ldr	r3, [pc, #84]	@ (8004dcc <HAL_RCC_OscConfig+0x248>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fd f89a 	bl	8001eb4 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d84:	f7fd f896 	bl	8001eb4 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e167      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d96:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x200>
 8004da2:	e01b      	b.n	8004ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da4:	4b09      	ldr	r3, [pc, #36]	@ (8004dcc <HAL_RCC_OscConfig+0x248>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004daa:	f7fd f883 	bl	8001eb4 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db0:	e00e      	b.n	8004dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db2:	f7fd f87f 	bl	8001eb4 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d907      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e150      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	42470000 	.word	0x42470000
 8004dcc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd0:	4b88      	ldr	r3, [pc, #544]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ea      	bne.n	8004db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8097 	beq.w	8004f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dea:	2300      	movs	r3, #0
 8004dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dee:	4b81      	ldr	r3, [pc, #516]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10f      	bne.n	8004e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	4b7d      	ldr	r3, [pc, #500]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e02:	4a7c      	ldr	r2, [pc, #496]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e0a:	4b7a      	ldr	r3, [pc, #488]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e12:	60bb      	str	r3, [r7, #8]
 8004e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e16:	2301      	movs	r3, #1
 8004e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1a:	4b77      	ldr	r3, [pc, #476]	@ (8004ff8 <HAL_RCC_OscConfig+0x474>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d118      	bne.n	8004e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e26:	4b74      	ldr	r3, [pc, #464]	@ (8004ff8 <HAL_RCC_OscConfig+0x474>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a73      	ldr	r2, [pc, #460]	@ (8004ff8 <HAL_RCC_OscConfig+0x474>)
 8004e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e32:	f7fd f83f 	bl	8001eb4 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3a:	f7fd f83b 	bl	8001eb4 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e10c      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4c:	4b6a      	ldr	r3, [pc, #424]	@ (8004ff8 <HAL_RCC_OscConfig+0x474>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d106      	bne.n	8004e6e <HAL_RCC_OscConfig+0x2ea>
 8004e60:	4b64      	ldr	r3, [pc, #400]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e64:	4a63      	ldr	r2, [pc, #396]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e6c:	e01c      	b.n	8004ea8 <HAL_RCC_OscConfig+0x324>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b05      	cmp	r3, #5
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCC_OscConfig+0x30c>
 8004e76:	4b5f      	ldr	r3, [pc, #380]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7a:	4a5e      	ldr	r2, [pc, #376]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e7c:	f043 0304 	orr.w	r3, r3, #4
 8004e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e82:	4b5c      	ldr	r3, [pc, #368]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e86:	4a5b      	ldr	r2, [pc, #364]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e8e:	e00b      	b.n	8004ea8 <HAL_RCC_OscConfig+0x324>
 8004e90:	4b58      	ldr	r3, [pc, #352]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e94:	4a57      	ldr	r2, [pc, #348]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e96:	f023 0301 	bic.w	r3, r3, #1
 8004e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e9c:	4b55      	ldr	r3, [pc, #340]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea0:	4a54      	ldr	r2, [pc, #336]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	f023 0304 	bic.w	r3, r3, #4
 8004ea6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d015      	beq.n	8004edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb0:	f7fd f800 	bl	8001eb4 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb8:	f7fc fffc 	bl	8001eb4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e0cb      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ece:	4b49      	ldr	r3, [pc, #292]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0ee      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x334>
 8004eda:	e014      	b.n	8004f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004edc:	f7fc ffea 	bl	8001eb4 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee4:	f7fc ffe6 	bl	8001eb4 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e0b5      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1ee      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0c:	4b39      	ldr	r3, [pc, #228]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	4a38      	ldr	r2, [pc, #224]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80a1 	beq.w	8005064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f22:	4b34      	ldr	r3, [pc, #208]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d05c      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d141      	bne.n	8004fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b31      	ldr	r3, [pc, #196]	@ (8004ffc <HAL_RCC_OscConfig+0x478>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fc ffba 	bl	8001eb4 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fc ffb6 	bl	8001eb4 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e087      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	4b27      	ldr	r3, [pc, #156]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	019b      	lsls	r3, r3, #6
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	041b      	lsls	r3, r3, #16
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	061b      	lsls	r3, r3, #24
 8004f86:	491b      	ldr	r1, [pc, #108]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ffc <HAL_RCC_OscConfig+0x478>)
 8004f8e:	2201      	movs	r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f92:	f7fc ff8f 	bl	8001eb4 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9a:	f7fc ff8b 	bl	8001eb4 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e05c      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fac:	4b11      	ldr	r3, [pc, #68]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0f0      	beq.n	8004f9a <HAL_RCC_OscConfig+0x416>
 8004fb8:	e054      	b.n	8005064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fba:	4b10      	ldr	r3, [pc, #64]	@ (8004ffc <HAL_RCC_OscConfig+0x478>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7fc ff78 	bl	8001eb4 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc8:	f7fc ff74 	bl	8001eb4 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e045      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fda:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x444>
 8004fe6:	e03d      	b.n	8005064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d107      	bne.n	8005000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e038      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	40007000 	.word	0x40007000
 8004ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005000:	4b1b      	ldr	r3, [pc, #108]	@ (8005070 <HAL_RCC_OscConfig+0x4ec>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d028      	beq.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005018:	429a      	cmp	r2, r3
 800501a:	d121      	bne.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005026:	429a      	cmp	r2, r3
 8005028:	d11a      	bne.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005030:	4013      	ands	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005038:	4293      	cmp	r3, r2
 800503a:	d111      	bne.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005046:	085b      	lsrs	r3, r3, #1
 8005048:	3b01      	subs	r3, #1
 800504a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800504c:	429a      	cmp	r2, r3
 800504e:	d107      	bne.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800

08005074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0cc      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005088:	4b68      	ldr	r3, [pc, #416]	@ (800522c <HAL_RCC_ClockConfig+0x1b8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d90c      	bls.n	80050b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005096:	4b65      	ldr	r3, [pc, #404]	@ (800522c <HAL_RCC_ClockConfig+0x1b8>)
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509e:	4b63      	ldr	r3, [pc, #396]	@ (800522c <HAL_RCC_ClockConfig+0x1b8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d001      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0b8      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d020      	beq.n	80050fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050c8:	4b59      	ldr	r3, [pc, #356]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4a58      	ldr	r2, [pc, #352]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050e0:	4b53      	ldr	r3, [pc, #332]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4a52      	ldr	r2, [pc, #328]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ec:	4b50      	ldr	r3, [pc, #320]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	494d      	ldr	r1, [pc, #308]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d044      	beq.n	8005194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d107      	bne.n	8005122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005112:	4b47      	ldr	r3, [pc, #284]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d119      	bne.n	8005152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e07f      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d003      	beq.n	8005132 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800512e:	2b03      	cmp	r3, #3
 8005130:	d107      	bne.n	8005142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005132:	4b3f      	ldr	r3, [pc, #252]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e06f      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005142:	4b3b      	ldr	r3, [pc, #236]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e067      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005152:	4b37      	ldr	r3, [pc, #220]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f023 0203 	bic.w	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4934      	ldr	r1, [pc, #208]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	4313      	orrs	r3, r2
 8005162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005164:	f7fc fea6 	bl	8001eb4 <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516a:	e00a      	b.n	8005182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800516c:	f7fc fea2 	bl	8001eb4 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517a:	4293      	cmp	r3, r2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e04f      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005182:	4b2b      	ldr	r3, [pc, #172]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 020c 	and.w	r2, r3, #12
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	429a      	cmp	r2, r3
 8005192:	d1eb      	bne.n	800516c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005194:	4b25      	ldr	r3, [pc, #148]	@ (800522c <HAL_RCC_ClockConfig+0x1b8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d20c      	bcs.n	80051bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a2:	4b22      	ldr	r3, [pc, #136]	@ (800522c <HAL_RCC_ClockConfig+0x1b8>)
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051aa:	4b20      	ldr	r3, [pc, #128]	@ (800522c <HAL_RCC_ClockConfig+0x1b8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d001      	beq.n	80051bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e032      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c8:	4b19      	ldr	r3, [pc, #100]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4916      	ldr	r1, [pc, #88]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051e6:	4b12      	ldr	r3, [pc, #72]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	490e      	ldr	r1, [pc, #56]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051fa:	f000 f821 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 80051fe:	4602      	mov	r2, r0
 8005200:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	490a      	ldr	r1, [pc, #40]	@ (8005234 <HAL_RCC_ClockConfig+0x1c0>)
 800520c:	5ccb      	ldrb	r3, [r1, r3]
 800520e:	fa22 f303 	lsr.w	r3, r2, r3
 8005212:	4a09      	ldr	r2, [pc, #36]	@ (8005238 <HAL_RCC_ClockConfig+0x1c4>)
 8005214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005216:	4b09      	ldr	r3, [pc, #36]	@ (800523c <HAL_RCC_ClockConfig+0x1c8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f7fc fe06 	bl	8001e2c <HAL_InitTick>

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40023c00 	.word	0x40023c00
 8005230:	40023800 	.word	0x40023800
 8005234:	08007738 	.word	0x08007738
 8005238:	20000008 	.word	0x20000008
 800523c:	2000000c 	.word	0x2000000c

08005240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005244:	b094      	sub	sp, #80	@ 0x50
 8005246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005258:	4b79      	ldr	r3, [pc, #484]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x200>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 030c 	and.w	r3, r3, #12
 8005260:	2b08      	cmp	r3, #8
 8005262:	d00d      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x40>
 8005264:	2b08      	cmp	r3, #8
 8005266:	f200 80e1 	bhi.w	800542c <HAL_RCC_GetSysClockFreq+0x1ec>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0x34>
 800526e:	2b04      	cmp	r3, #4
 8005270:	d003      	beq.n	800527a <HAL_RCC_GetSysClockFreq+0x3a>
 8005272:	e0db      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005274:	4b73      	ldr	r3, [pc, #460]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x204>)
 8005276:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005278:	e0db      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800527a:	4b73      	ldr	r3, [pc, #460]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x208>)
 800527c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800527e:	e0d8      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005280:	4b6f      	ldr	r3, [pc, #444]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x200>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005288:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800528a:	4b6d      	ldr	r3, [pc, #436]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x200>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d063      	beq.n	800535e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005296:	4b6a      	ldr	r3, [pc, #424]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x200>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	099b      	lsrs	r3, r3, #6
 800529c:	2200      	movs	r2, #0
 800529e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80052aa:	2300      	movs	r3, #0
 80052ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052b2:	4622      	mov	r2, r4
 80052b4:	462b      	mov	r3, r5
 80052b6:	f04f 0000 	mov.w	r0, #0
 80052ba:	f04f 0100 	mov.w	r1, #0
 80052be:	0159      	lsls	r1, r3, #5
 80052c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052c4:	0150      	lsls	r0, r2, #5
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4621      	mov	r1, r4
 80052cc:	1a51      	subs	r1, r2, r1
 80052ce:	6139      	str	r1, [r7, #16]
 80052d0:	4629      	mov	r1, r5
 80052d2:	eb63 0301 	sbc.w	r3, r3, r1
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	f04f 0300 	mov.w	r3, #0
 80052e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052e4:	4659      	mov	r1, fp
 80052e6:	018b      	lsls	r3, r1, #6
 80052e8:	4651      	mov	r1, sl
 80052ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052ee:	4651      	mov	r1, sl
 80052f0:	018a      	lsls	r2, r1, #6
 80052f2:	4651      	mov	r1, sl
 80052f4:	ebb2 0801 	subs.w	r8, r2, r1
 80052f8:	4659      	mov	r1, fp
 80052fa:	eb63 0901 	sbc.w	r9, r3, r1
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800530a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800530e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005312:	4690      	mov	r8, r2
 8005314:	4699      	mov	r9, r3
 8005316:	4623      	mov	r3, r4
 8005318:	eb18 0303 	adds.w	r3, r8, r3
 800531c:	60bb      	str	r3, [r7, #8]
 800531e:	462b      	mov	r3, r5
 8005320:	eb49 0303 	adc.w	r3, r9, r3
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005332:	4629      	mov	r1, r5
 8005334:	024b      	lsls	r3, r1, #9
 8005336:	4621      	mov	r1, r4
 8005338:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800533c:	4621      	mov	r1, r4
 800533e:	024a      	lsls	r2, r1, #9
 8005340:	4610      	mov	r0, r2
 8005342:	4619      	mov	r1, r3
 8005344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005346:	2200      	movs	r2, #0
 8005348:	62bb      	str	r3, [r7, #40]	@ 0x28
 800534a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800534c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005350:	f7fb fc30 	bl	8000bb4 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4613      	mov	r3, r2
 800535a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800535c:	e058      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535e:	4b38      	ldr	r3, [pc, #224]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x200>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	099b      	lsrs	r3, r3, #6
 8005364:	2200      	movs	r2, #0
 8005366:	4618      	mov	r0, r3
 8005368:	4611      	mov	r1, r2
 800536a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800536e:	623b      	str	r3, [r7, #32]
 8005370:	2300      	movs	r3, #0
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24
 8005374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005378:	4642      	mov	r2, r8
 800537a:	464b      	mov	r3, r9
 800537c:	f04f 0000 	mov.w	r0, #0
 8005380:	f04f 0100 	mov.w	r1, #0
 8005384:	0159      	lsls	r1, r3, #5
 8005386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800538a:	0150      	lsls	r0, r2, #5
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4641      	mov	r1, r8
 8005392:	ebb2 0a01 	subs.w	sl, r2, r1
 8005396:	4649      	mov	r1, r9
 8005398:	eb63 0b01 	sbc.w	fp, r3, r1
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053b0:	ebb2 040a 	subs.w	r4, r2, sl
 80053b4:	eb63 050b 	sbc.w	r5, r3, fp
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	00eb      	lsls	r3, r5, #3
 80053c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053c6:	00e2      	lsls	r2, r4, #3
 80053c8:	4614      	mov	r4, r2
 80053ca:	461d      	mov	r5, r3
 80053cc:	4643      	mov	r3, r8
 80053ce:	18e3      	adds	r3, r4, r3
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	464b      	mov	r3, r9
 80053d4:	eb45 0303 	adc.w	r3, r5, r3
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053e6:	4629      	mov	r1, r5
 80053e8:	028b      	lsls	r3, r1, #10
 80053ea:	4621      	mov	r1, r4
 80053ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053f0:	4621      	mov	r1, r4
 80053f2:	028a      	lsls	r2, r1, #10
 80053f4:	4610      	mov	r0, r2
 80053f6:	4619      	mov	r1, r3
 80053f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053fa:	2200      	movs	r2, #0
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	61fa      	str	r2, [r7, #28]
 8005400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005404:	f7fb fbd6 	bl	8000bb4 <__aeabi_uldivmod>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4613      	mov	r3, r2
 800540e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x200>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	0c1b      	lsrs	r3, r3, #16
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	3301      	adds	r3, #1
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005420:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800542a:	e002      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800542c:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x204>)
 800542e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005434:	4618      	mov	r0, r3
 8005436:	3750      	adds	r7, #80	@ 0x50
 8005438:	46bd      	mov	sp, r7
 800543a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800543e:	bf00      	nop
 8005440:	40023800 	.word	0x40023800
 8005444:	00f42400 	.word	0x00f42400
 8005448:	007a1200 	.word	0x007a1200

0800544c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005450:	4b03      	ldr	r3, [pc, #12]	@ (8005460 <HAL_RCC_GetHCLKFreq+0x14>)
 8005452:	681b      	ldr	r3, [r3, #0]
}
 8005454:	4618      	mov	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20000008 	.word	0x20000008

08005464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005468:	f7ff fff0 	bl	800544c <HAL_RCC_GetHCLKFreq>
 800546c:	4602      	mov	r2, r0
 800546e:	4b05      	ldr	r3, [pc, #20]	@ (8005484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	0a9b      	lsrs	r3, r3, #10
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	4903      	ldr	r1, [pc, #12]	@ (8005488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005480:	4618      	mov	r0, r3
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40023800 	.word	0x40023800
 8005488:	08007748 	.word	0x08007748

0800548c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d105      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d038      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054b4:	4b68      	ldr	r3, [pc, #416]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054ba:	f7fc fcfb 	bl	8001eb4 <HAL_GetTick>
 80054be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054c0:	e008      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054c2:	f7fc fcf7 	bl	8001eb4 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e0bd      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054d4:	4b61      	ldr	r3, [pc, #388]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f0      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	019b      	lsls	r3, r3, #6
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	071b      	lsls	r3, r3, #28
 80054f2:	495a      	ldr	r1, [pc, #360]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054fa:	4b57      	ldr	r3, [pc, #348]	@ (8005658 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005500:	f7fc fcd8 	bl	8001eb4 <HAL_GetTick>
 8005504:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005506:	e008      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005508:	f7fc fcd4 	bl	8001eb4 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e09a      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800551a:	4b50      	ldr	r3, [pc, #320]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f0      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8083 	beq.w	800563a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	4b48      	ldr	r3, [pc, #288]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800553a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553c:	4a47      	ldr	r2, [pc, #284]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800553e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005542:	6413      	str	r3, [r2, #64]	@ 0x40
 8005544:	4b45      	ldr	r3, [pc, #276]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005550:	4b43      	ldr	r3, [pc, #268]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a42      	ldr	r2, [pc, #264]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800555a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800555c:	f7fc fcaa 	bl	8001eb4 <HAL_GetTick>
 8005560:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005564:	f7fc fca6 	bl	8001eb4 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e06c      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005576:	4b3a      	ldr	r3, [pc, #232]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0f0      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005582:	4b36      	ldr	r3, [pc, #216]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558a:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d02f      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	429a      	cmp	r2, r3
 800559e:	d028      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055a0:	4b2e      	ldr	r3, [pc, #184]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055a8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055aa:	4b2e      	ldr	r3, [pc, #184]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055b0:	4b2c      	ldr	r3, [pc, #176]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055b6:	4a29      	ldr	r2, [pc, #164]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055bc:	4b27      	ldr	r3, [pc, #156]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d114      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055c8:	f7fc fc74 	bl	8001eb4 <HAL_GetTick>
 80055cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ce:	e00a      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d0:	f7fc fc70 	bl	8001eb4 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e034      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e6:	4b1d      	ldr	r3, [pc, #116]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0ee      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055fe:	d10d      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005600:	4b16      	ldr	r3, [pc, #88]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005614:	4911      	ldr	r1, [pc, #68]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005616:	4313      	orrs	r3, r2
 8005618:	608b      	str	r3, [r1, #8]
 800561a:	e005      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800561c:	4b0f      	ldr	r3, [pc, #60]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	4a0e      	ldr	r2, [pc, #56]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005622:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005626:	6093      	str	r3, [r2, #8]
 8005628:	4b0c      	ldr	r3, [pc, #48]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800562a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005634:	4909      	ldr	r1, [pc, #36]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005636:	4313      	orrs	r3, r2
 8005638:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	7d1a      	ldrb	r2, [r3, #20]
 800564a:	4b07      	ldr	r3, [pc, #28]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800564c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	42470068 	.word	0x42470068
 800565c:	40023800 	.word	0x40023800
 8005660:	40007000 	.word	0x40007000
 8005664:	42470e40 	.word	0x42470e40
 8005668:	424711e0 	.word	0x424711e0

0800566c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d141      	bne.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800568a:	4b25      	ldr	r3, [pc, #148]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d006      	beq.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056a0:	d131      	bne.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80056a2:	4b20      	ldr	r3, [pc, #128]	@ (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80056a4:	617b      	str	r3, [r7, #20]
          break;
 80056a6:	e031      	b.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80056a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056b4:	d109      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80056b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80056b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056c0:	4a19      	ldr	r2, [pc, #100]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80056c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	e008      	b.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80056ca:	4b15      	ldr	r3, [pc, #84]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80056cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056d4:	4a15      	ldr	r2, [pc, #84]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80056d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056da:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80056dc:	4b10      	ldr	r3, [pc, #64]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80056de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056e2:	099b      	lsrs	r3, r3, #6
 80056e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
 80056ee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80056f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80056f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056f6:	0f1b      	lsrs	r3, r3, #28
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005702:	617b      	str	r3, [r7, #20]
          break;
 8005704:	e002      	b.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
          break;
 800570a:	bf00      	nop
        }
      }
      break;
 800570c:	e000      	b.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 800570e:	bf00      	nop
    }
  }
  return frequency;
 8005710:	697b      	ldr	r3, [r7, #20]
}
 8005712:	4618      	mov	r0, r3
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40023800 	.word	0x40023800
 8005724:	00bb8000 	.word	0x00bb8000
 8005728:	007a1200 	.word	0x007a1200
 800572c:	00f42400 	.word	0x00f42400

08005730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e041      	b.n	80057c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fc fa96 	bl	8001c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3304      	adds	r3, #4
 800576c:	4619      	mov	r1, r3
 800576e:	4610      	mov	r0, r2
 8005770:	f000 faca 	bl	8005d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d001      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e044      	b.n	8005872 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1e      	ldr	r2, [pc, #120]	@ (8005880 <HAL_TIM_Base_Start_IT+0xb0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d018      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x6c>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005812:	d013      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x6c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1a      	ldr	r2, [pc, #104]	@ (8005884 <HAL_TIM_Base_Start_IT+0xb4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00e      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x6c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a19      	ldr	r2, [pc, #100]	@ (8005888 <HAL_TIM_Base_Start_IT+0xb8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d009      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x6c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a17      	ldr	r2, [pc, #92]	@ (800588c <HAL_TIM_Base_Start_IT+0xbc>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x6c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a16      	ldr	r2, [pc, #88]	@ (8005890 <HAL_TIM_Base_Start_IT+0xc0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d111      	bne.n	8005860 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b06      	cmp	r3, #6
 800584c:	d010      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0201 	orr.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585e:	e007      	b.n	8005870 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40010000 	.word	0x40010000
 8005884:	40000400 	.word	0x40000400
 8005888:	40000800 	.word	0x40000800
 800588c:	40000c00 	.word	0x40000c00
 8005890:	40014000 	.word	0x40014000

08005894 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e041      	b.n	800592c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f839 	bl	8005934 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3304      	adds	r3, #4
 80058d2:	4619      	mov	r1, r3
 80058d4:	4610      	mov	r0, r2
 80058d6:	f000 fa17 	bl	8005d08 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0208 	bic.w	r2, r2, #8
 80058e8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6819      	ldr	r1, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d020      	beq.n	80059ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01b      	beq.n	80059ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0202 	mvn.w	r2, #2
 800597c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f999 	bl	8005cca <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f98b 	bl	8005cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f99c 	bl	8005cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d020      	beq.n	80059f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01b      	beq.n	80059f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0204 	mvn.w	r2, #4
 80059c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2202      	movs	r2, #2
 80059ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f973 	bl	8005cca <HAL_TIM_IC_CaptureCallback>
 80059e4:	e005      	b.n	80059f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f965 	bl	8005cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f976 	bl	8005cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d020      	beq.n	8005a44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01b      	beq.n	8005a44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0208 	mvn.w	r2, #8
 8005a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2204      	movs	r2, #4
 8005a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f94d 	bl	8005cca <HAL_TIM_IC_CaptureCallback>
 8005a30:	e005      	b.n	8005a3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f93f 	bl	8005cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f950 	bl	8005cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d020      	beq.n	8005a90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01b      	beq.n	8005a90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0210 	mvn.w	r2, #16
 8005a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2208      	movs	r2, #8
 8005a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f927 	bl	8005cca <HAL_TIM_IC_CaptureCallback>
 8005a7c:	e005      	b.n	8005a8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f919 	bl	8005cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f92a 	bl	8005cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00c      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d007      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0201 	mvn.w	r2, #1
 8005aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fb ff32 	bl	8001918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00c      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fab0 	bl	8006038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00c      	beq.n	8005afc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f8fb 	bl	8005cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00c      	beq.n	8005b20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0220 	mvn.w	r2, #32
 8005b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fa82 	bl	8006024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b20:	bf00      	nop
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIM_ConfigClockSource+0x1c>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e0b4      	b.n	8005cae <HAL_TIM_ConfigClockSource+0x186>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b7c:	d03e      	beq.n	8005bfc <HAL_TIM_ConfigClockSource+0xd4>
 8005b7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b82:	f200 8087 	bhi.w	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b8a:	f000 8086 	beq.w	8005c9a <HAL_TIM_ConfigClockSource+0x172>
 8005b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b92:	d87f      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005b94:	2b70      	cmp	r3, #112	@ 0x70
 8005b96:	d01a      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0xa6>
 8005b98:	2b70      	cmp	r3, #112	@ 0x70
 8005b9a:	d87b      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005b9c:	2b60      	cmp	r3, #96	@ 0x60
 8005b9e:	d050      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x11a>
 8005ba0:	2b60      	cmp	r3, #96	@ 0x60
 8005ba2:	d877      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba4:	2b50      	cmp	r3, #80	@ 0x50
 8005ba6:	d03c      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0xfa>
 8005ba8:	2b50      	cmp	r3, #80	@ 0x50
 8005baa:	d873      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bac:	2b40      	cmp	r3, #64	@ 0x40
 8005bae:	d058      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x13a>
 8005bb0:	2b40      	cmp	r3, #64	@ 0x40
 8005bb2:	d86f      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb4:	2b30      	cmp	r3, #48	@ 0x30
 8005bb6:	d064      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bb8:	2b30      	cmp	r3, #48	@ 0x30
 8005bba:	d86b      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d060      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d867      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d05c      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bc8:	2b10      	cmp	r3, #16
 8005bca:	d05a      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bcc:	e062      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bde:	f000 f993 	bl	8005f08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005bf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	609a      	str	r2, [r3, #8]
      break;
 8005bfa:	e04f      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c0c:	f000 f97c 	bl	8005f08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c1e:	609a      	str	r2, [r3, #8]
      break;
 8005c20:	e03c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f000 f8f0 	bl	8005e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2150      	movs	r1, #80	@ 0x50
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 f949 	bl	8005ed2 <TIM_ITRx_SetConfig>
      break;
 8005c40:	e02c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f000 f90f 	bl	8005e72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2160      	movs	r1, #96	@ 0x60
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f939 	bl	8005ed2 <TIM_ITRx_SetConfig>
      break;
 8005c60:	e01c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f000 f8d0 	bl	8005e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2140      	movs	r1, #64	@ 0x40
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 f929 	bl	8005ed2 <TIM_ITRx_SetConfig>
      break;
 8005c80:	e00c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f000 f920 	bl	8005ed2 <TIM_ITRx_SetConfig>
      break;
 8005c92:	e003      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
      break;
 8005c98:	e000      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
	...

08005d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a37      	ldr	r2, [pc, #220]	@ (8005df8 <TIM_Base_SetConfig+0xf0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00f      	beq.n	8005d40 <TIM_Base_SetConfig+0x38>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d26:	d00b      	beq.n	8005d40 <TIM_Base_SetConfig+0x38>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a34      	ldr	r2, [pc, #208]	@ (8005dfc <TIM_Base_SetConfig+0xf4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d007      	beq.n	8005d40 <TIM_Base_SetConfig+0x38>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a33      	ldr	r2, [pc, #204]	@ (8005e00 <TIM_Base_SetConfig+0xf8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <TIM_Base_SetConfig+0x38>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a32      	ldr	r2, [pc, #200]	@ (8005e04 <TIM_Base_SetConfig+0xfc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d108      	bne.n	8005d52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a28      	ldr	r2, [pc, #160]	@ (8005df8 <TIM_Base_SetConfig+0xf0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d01b      	beq.n	8005d92 <TIM_Base_SetConfig+0x8a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d60:	d017      	beq.n	8005d92 <TIM_Base_SetConfig+0x8a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a25      	ldr	r2, [pc, #148]	@ (8005dfc <TIM_Base_SetConfig+0xf4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d013      	beq.n	8005d92 <TIM_Base_SetConfig+0x8a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a24      	ldr	r2, [pc, #144]	@ (8005e00 <TIM_Base_SetConfig+0xf8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00f      	beq.n	8005d92 <TIM_Base_SetConfig+0x8a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a23      	ldr	r2, [pc, #140]	@ (8005e04 <TIM_Base_SetConfig+0xfc>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00b      	beq.n	8005d92 <TIM_Base_SetConfig+0x8a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a22      	ldr	r2, [pc, #136]	@ (8005e08 <TIM_Base_SetConfig+0x100>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d007      	beq.n	8005d92 <TIM_Base_SetConfig+0x8a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a21      	ldr	r2, [pc, #132]	@ (8005e0c <TIM_Base_SetConfig+0x104>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_Base_SetConfig+0x8a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a20      	ldr	r2, [pc, #128]	@ (8005e10 <TIM_Base_SetConfig+0x108>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d108      	bne.n	8005da4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8005df8 <TIM_Base_SetConfig+0xf0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d103      	bne.n	8005dd2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	691a      	ldr	r2, [r3, #16]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f043 0204 	orr.w	r2, r3, #4
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	601a      	str	r2, [r3, #0]
}
 8005dea:	bf00      	nop
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40010000 	.word	0x40010000
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800
 8005e04:	40000c00 	.word	0x40000c00
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40014400 	.word	0x40014400
 8005e10:	40014800 	.word	0x40014800

08005e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	f023 0201 	bic.w	r2, r3, #1
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f023 030a 	bic.w	r3, r3, #10
 8005e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	621a      	str	r2, [r3, #32]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b087      	sub	sp, #28
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	f023 0210 	bic.w	r2, r3, #16
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	031b      	lsls	r3, r3, #12
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005eae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	621a      	str	r2, [r3, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b085      	sub	sp, #20
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f043 0307 	orr.w	r3, r3, #7
 8005ef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	609a      	str	r2, [r3, #8]
}
 8005efc:	bf00      	nop
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	021a      	lsls	r2, r3, #8
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	609a      	str	r2, [r3, #8]
}
 8005f3c:	bf00      	nop
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e050      	b.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d018      	beq.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fac:	d013      	beq.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a18      	ldr	r2, [pc, #96]	@ (8006014 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a16      	ldr	r2, [pc, #88]	@ (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a15      	ldr	r2, [pc, #84]	@ (800601c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d004      	beq.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a13      	ldr	r2, [pc, #76]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d10c      	bne.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40010000 	.word	0x40010000
 8006014:	40000400 	.word	0x40000400
 8006018:	40000800 	.word	0x40000800
 800601c:	40000c00 	.word	0x40000c00
 8006020:	40014000 	.word	0x40014000

08006024 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <memset>:
 800604c:	4402      	add	r2, r0
 800604e:	4603      	mov	r3, r0
 8006050:	4293      	cmp	r3, r2
 8006052:	d100      	bne.n	8006056 <memset+0xa>
 8006054:	4770      	bx	lr
 8006056:	f803 1b01 	strb.w	r1, [r3], #1
 800605a:	e7f9      	b.n	8006050 <memset+0x4>

0800605c <__libc_init_array>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	4d0d      	ldr	r5, [pc, #52]	@ (8006094 <__libc_init_array+0x38>)
 8006060:	4c0d      	ldr	r4, [pc, #52]	@ (8006098 <__libc_init_array+0x3c>)
 8006062:	1b64      	subs	r4, r4, r5
 8006064:	10a4      	asrs	r4, r4, #2
 8006066:	2600      	movs	r6, #0
 8006068:	42a6      	cmp	r6, r4
 800606a:	d109      	bne.n	8006080 <__libc_init_array+0x24>
 800606c:	4d0b      	ldr	r5, [pc, #44]	@ (800609c <__libc_init_array+0x40>)
 800606e:	4c0c      	ldr	r4, [pc, #48]	@ (80060a0 <__libc_init_array+0x44>)
 8006070:	f001 f856 	bl	8007120 <_init>
 8006074:	1b64      	subs	r4, r4, r5
 8006076:	10a4      	asrs	r4, r4, #2
 8006078:	2600      	movs	r6, #0
 800607a:	42a6      	cmp	r6, r4
 800607c:	d105      	bne.n	800608a <__libc_init_array+0x2e>
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	f855 3b04 	ldr.w	r3, [r5], #4
 8006084:	4798      	blx	r3
 8006086:	3601      	adds	r6, #1
 8006088:	e7ee      	b.n	8006068 <__libc_init_array+0xc>
 800608a:	f855 3b04 	ldr.w	r3, [r5], #4
 800608e:	4798      	blx	r3
 8006090:	3601      	adds	r6, #1
 8006092:	e7f2      	b.n	800607a <__libc_init_array+0x1e>
 8006094:	08007938 	.word	0x08007938
 8006098:	08007938 	.word	0x08007938
 800609c:	08007938 	.word	0x08007938
 80060a0:	0800793c 	.word	0x0800793c

080060a4 <memcpy>:
 80060a4:	440a      	add	r2, r1
 80060a6:	4291      	cmp	r1, r2
 80060a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060ac:	d100      	bne.n	80060b0 <memcpy+0xc>
 80060ae:	4770      	bx	lr
 80060b0:	b510      	push	{r4, lr}
 80060b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060ba:	4291      	cmp	r1, r2
 80060bc:	d1f9      	bne.n	80060b2 <memcpy+0xe>
 80060be:	bd10      	pop	{r4, pc}

080060c0 <sin>:
 80060c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060c2:	ec53 2b10 	vmov	r2, r3, d0
 80060c6:	4826      	ldr	r0, [pc, #152]	@ (8006160 <sin+0xa0>)
 80060c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80060cc:	4281      	cmp	r1, r0
 80060ce:	d807      	bhi.n	80060e0 <sin+0x20>
 80060d0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006158 <sin+0x98>
 80060d4:	2000      	movs	r0, #0
 80060d6:	b005      	add	sp, #20
 80060d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060dc:	f000 b90c 	b.w	80062f8 <__kernel_sin>
 80060e0:	4820      	ldr	r0, [pc, #128]	@ (8006164 <sin+0xa4>)
 80060e2:	4281      	cmp	r1, r0
 80060e4:	d908      	bls.n	80060f8 <sin+0x38>
 80060e6:	4610      	mov	r0, r2
 80060e8:	4619      	mov	r1, r3
 80060ea:	f7fa f879 	bl	80001e0 <__aeabi_dsub>
 80060ee:	ec41 0b10 	vmov	d0, r0, r1
 80060f2:	b005      	add	sp, #20
 80060f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80060f8:	4668      	mov	r0, sp
 80060fa:	f000 f9b9 	bl	8006470 <__ieee754_rem_pio2>
 80060fe:	f000 0003 	and.w	r0, r0, #3
 8006102:	2801      	cmp	r0, #1
 8006104:	d00c      	beq.n	8006120 <sin+0x60>
 8006106:	2802      	cmp	r0, #2
 8006108:	d011      	beq.n	800612e <sin+0x6e>
 800610a:	b9e8      	cbnz	r0, 8006148 <sin+0x88>
 800610c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006110:	ed9d 0b00 	vldr	d0, [sp]
 8006114:	2001      	movs	r0, #1
 8006116:	f000 f8ef 	bl	80062f8 <__kernel_sin>
 800611a:	ec51 0b10 	vmov	r0, r1, d0
 800611e:	e7e6      	b.n	80060ee <sin+0x2e>
 8006120:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006124:	ed9d 0b00 	vldr	d0, [sp]
 8006128:	f000 f81e 	bl	8006168 <__kernel_cos>
 800612c:	e7f5      	b.n	800611a <sin+0x5a>
 800612e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006132:	ed9d 0b00 	vldr	d0, [sp]
 8006136:	2001      	movs	r0, #1
 8006138:	f000 f8de 	bl	80062f8 <__kernel_sin>
 800613c:	ec53 2b10 	vmov	r2, r3, d0
 8006140:	4610      	mov	r0, r2
 8006142:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006146:	e7d2      	b.n	80060ee <sin+0x2e>
 8006148:	ed9d 1b02 	vldr	d1, [sp, #8]
 800614c:	ed9d 0b00 	vldr	d0, [sp]
 8006150:	f000 f80a 	bl	8006168 <__kernel_cos>
 8006154:	e7f2      	b.n	800613c <sin+0x7c>
 8006156:	bf00      	nop
	...
 8006160:	3fe921fb 	.word	0x3fe921fb
 8006164:	7fefffff 	.word	0x7fefffff

08006168 <__kernel_cos>:
 8006168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	ec57 6b10 	vmov	r6, r7, d0
 8006170:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006174:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8006178:	ed8d 1b00 	vstr	d1, [sp]
 800617c:	d206      	bcs.n	800618c <__kernel_cos+0x24>
 800617e:	4630      	mov	r0, r6
 8006180:	4639      	mov	r1, r7
 8006182:	f7fa fc7f 	bl	8000a84 <__aeabi_d2iz>
 8006186:	2800      	cmp	r0, #0
 8006188:	f000 8088 	beq.w	800629c <__kernel_cos+0x134>
 800618c:	4632      	mov	r2, r6
 800618e:	463b      	mov	r3, r7
 8006190:	4630      	mov	r0, r6
 8006192:	4639      	mov	r1, r7
 8006194:	f7fa f9dc 	bl	8000550 <__aeabi_dmul>
 8006198:	4b51      	ldr	r3, [pc, #324]	@ (80062e0 <__kernel_cos+0x178>)
 800619a:	2200      	movs	r2, #0
 800619c:	4604      	mov	r4, r0
 800619e:	460d      	mov	r5, r1
 80061a0:	f7fa f9d6 	bl	8000550 <__aeabi_dmul>
 80061a4:	a340      	add	r3, pc, #256	@ (adr r3, 80062a8 <__kernel_cos+0x140>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	4682      	mov	sl, r0
 80061ac:	468b      	mov	fp, r1
 80061ae:	4620      	mov	r0, r4
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7fa f9cd 	bl	8000550 <__aeabi_dmul>
 80061b6:	a33e      	add	r3, pc, #248	@ (adr r3, 80062b0 <__kernel_cos+0x148>)
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	f7fa f812 	bl	80001e4 <__adddf3>
 80061c0:	4622      	mov	r2, r4
 80061c2:	462b      	mov	r3, r5
 80061c4:	f7fa f9c4 	bl	8000550 <__aeabi_dmul>
 80061c8:	a33b      	add	r3, pc, #236	@ (adr r3, 80062b8 <__kernel_cos+0x150>)
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	f7fa f807 	bl	80001e0 <__aeabi_dsub>
 80061d2:	4622      	mov	r2, r4
 80061d4:	462b      	mov	r3, r5
 80061d6:	f7fa f9bb 	bl	8000550 <__aeabi_dmul>
 80061da:	a339      	add	r3, pc, #228	@ (adr r3, 80062c0 <__kernel_cos+0x158>)
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f7fa f800 	bl	80001e4 <__adddf3>
 80061e4:	4622      	mov	r2, r4
 80061e6:	462b      	mov	r3, r5
 80061e8:	f7fa f9b2 	bl	8000550 <__aeabi_dmul>
 80061ec:	a336      	add	r3, pc, #216	@ (adr r3, 80062c8 <__kernel_cos+0x160>)
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f7f9 fff5 	bl	80001e0 <__aeabi_dsub>
 80061f6:	4622      	mov	r2, r4
 80061f8:	462b      	mov	r3, r5
 80061fa:	f7fa f9a9 	bl	8000550 <__aeabi_dmul>
 80061fe:	a334      	add	r3, pc, #208	@ (adr r3, 80062d0 <__kernel_cos+0x168>)
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	f7f9 ffee 	bl	80001e4 <__adddf3>
 8006208:	4622      	mov	r2, r4
 800620a:	462b      	mov	r3, r5
 800620c:	f7fa f9a0 	bl	8000550 <__aeabi_dmul>
 8006210:	4622      	mov	r2, r4
 8006212:	462b      	mov	r3, r5
 8006214:	f7fa f99c 	bl	8000550 <__aeabi_dmul>
 8006218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800621c:	4604      	mov	r4, r0
 800621e:	460d      	mov	r5, r1
 8006220:	4630      	mov	r0, r6
 8006222:	4639      	mov	r1, r7
 8006224:	f7fa f994 	bl	8000550 <__aeabi_dmul>
 8006228:	460b      	mov	r3, r1
 800622a:	4602      	mov	r2, r0
 800622c:	4629      	mov	r1, r5
 800622e:	4620      	mov	r0, r4
 8006230:	f7f9 ffd6 	bl	80001e0 <__aeabi_dsub>
 8006234:	4b2b      	ldr	r3, [pc, #172]	@ (80062e4 <__kernel_cos+0x17c>)
 8006236:	4598      	cmp	r8, r3
 8006238:	4606      	mov	r6, r0
 800623a:	460f      	mov	r7, r1
 800623c:	d810      	bhi.n	8006260 <__kernel_cos+0xf8>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4650      	mov	r0, sl
 8006244:	4659      	mov	r1, fp
 8006246:	f7f9 ffcb 	bl	80001e0 <__aeabi_dsub>
 800624a:	460b      	mov	r3, r1
 800624c:	4926      	ldr	r1, [pc, #152]	@ (80062e8 <__kernel_cos+0x180>)
 800624e:	4602      	mov	r2, r0
 8006250:	2000      	movs	r0, #0
 8006252:	f7f9 ffc5 	bl	80001e0 <__aeabi_dsub>
 8006256:	ec41 0b10 	vmov	d0, r0, r1
 800625a:	b003      	add	sp, #12
 800625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006260:	4b22      	ldr	r3, [pc, #136]	@ (80062ec <__kernel_cos+0x184>)
 8006262:	4921      	ldr	r1, [pc, #132]	@ (80062e8 <__kernel_cos+0x180>)
 8006264:	4598      	cmp	r8, r3
 8006266:	bf8c      	ite	hi
 8006268:	4d21      	ldrhi	r5, [pc, #132]	@ (80062f0 <__kernel_cos+0x188>)
 800626a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800626e:	2400      	movs	r4, #0
 8006270:	4622      	mov	r2, r4
 8006272:	462b      	mov	r3, r5
 8006274:	2000      	movs	r0, #0
 8006276:	f7f9 ffb3 	bl	80001e0 <__aeabi_dsub>
 800627a:	4622      	mov	r2, r4
 800627c:	4680      	mov	r8, r0
 800627e:	4689      	mov	r9, r1
 8006280:	462b      	mov	r3, r5
 8006282:	4650      	mov	r0, sl
 8006284:	4659      	mov	r1, fp
 8006286:	f7f9 ffab 	bl	80001e0 <__aeabi_dsub>
 800628a:	4632      	mov	r2, r6
 800628c:	463b      	mov	r3, r7
 800628e:	f7f9 ffa7 	bl	80001e0 <__aeabi_dsub>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4640      	mov	r0, r8
 8006298:	4649      	mov	r1, r9
 800629a:	e7da      	b.n	8006252 <__kernel_cos+0xea>
 800629c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80062d8 <__kernel_cos+0x170>
 80062a0:	e7db      	b.n	800625a <__kernel_cos+0xf2>
 80062a2:	bf00      	nop
 80062a4:	f3af 8000 	nop.w
 80062a8:	be8838d4 	.word	0xbe8838d4
 80062ac:	bda8fae9 	.word	0xbda8fae9
 80062b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80062b4:	3e21ee9e 	.word	0x3e21ee9e
 80062b8:	809c52ad 	.word	0x809c52ad
 80062bc:	3e927e4f 	.word	0x3e927e4f
 80062c0:	19cb1590 	.word	0x19cb1590
 80062c4:	3efa01a0 	.word	0x3efa01a0
 80062c8:	16c15177 	.word	0x16c15177
 80062cc:	3f56c16c 	.word	0x3f56c16c
 80062d0:	5555554c 	.word	0x5555554c
 80062d4:	3fa55555 	.word	0x3fa55555
 80062d8:	00000000 	.word	0x00000000
 80062dc:	3ff00000 	.word	0x3ff00000
 80062e0:	3fe00000 	.word	0x3fe00000
 80062e4:	3fd33332 	.word	0x3fd33332
 80062e8:	3ff00000 	.word	0x3ff00000
 80062ec:	3fe90000 	.word	0x3fe90000
 80062f0:	3fd20000 	.word	0x3fd20000
 80062f4:	00000000 	.word	0x00000000

080062f8 <__kernel_sin>:
 80062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fc:	ec55 4b10 	vmov	r4, r5, d0
 8006300:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006304:	b085      	sub	sp, #20
 8006306:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800630a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800630e:	4680      	mov	r8, r0
 8006310:	d205      	bcs.n	800631e <__kernel_sin+0x26>
 8006312:	4620      	mov	r0, r4
 8006314:	4629      	mov	r1, r5
 8006316:	f7fa fbb5 	bl	8000a84 <__aeabi_d2iz>
 800631a:	2800      	cmp	r0, #0
 800631c:	d052      	beq.n	80063c4 <__kernel_sin+0xcc>
 800631e:	4622      	mov	r2, r4
 8006320:	462b      	mov	r3, r5
 8006322:	4620      	mov	r0, r4
 8006324:	4629      	mov	r1, r5
 8006326:	f7fa f913 	bl	8000550 <__aeabi_dmul>
 800632a:	4682      	mov	sl, r0
 800632c:	468b      	mov	fp, r1
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4620      	mov	r0, r4
 8006334:	4629      	mov	r1, r5
 8006336:	f7fa f90b 	bl	8000550 <__aeabi_dmul>
 800633a:	a342      	add	r3, pc, #264	@ (adr r3, 8006444 <__kernel_sin+0x14c>)
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	e9cd 0100 	strd	r0, r1, [sp]
 8006344:	4650      	mov	r0, sl
 8006346:	4659      	mov	r1, fp
 8006348:	f7fa f902 	bl	8000550 <__aeabi_dmul>
 800634c:	a33f      	add	r3, pc, #252	@ (adr r3, 800644c <__kernel_sin+0x154>)
 800634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006352:	f7f9 ff45 	bl	80001e0 <__aeabi_dsub>
 8006356:	4652      	mov	r2, sl
 8006358:	465b      	mov	r3, fp
 800635a:	f7fa f8f9 	bl	8000550 <__aeabi_dmul>
 800635e:	a33d      	add	r3, pc, #244	@ (adr r3, 8006454 <__kernel_sin+0x15c>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f7f9 ff3e 	bl	80001e4 <__adddf3>
 8006368:	4652      	mov	r2, sl
 800636a:	465b      	mov	r3, fp
 800636c:	f7fa f8f0 	bl	8000550 <__aeabi_dmul>
 8006370:	a33a      	add	r3, pc, #232	@ (adr r3, 800645c <__kernel_sin+0x164>)
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f7f9 ff33 	bl	80001e0 <__aeabi_dsub>
 800637a:	4652      	mov	r2, sl
 800637c:	465b      	mov	r3, fp
 800637e:	f7fa f8e7 	bl	8000550 <__aeabi_dmul>
 8006382:	a338      	add	r3, pc, #224	@ (adr r3, 8006464 <__kernel_sin+0x16c>)
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f7f9 ff2c 	bl	80001e4 <__adddf3>
 800638c:	4606      	mov	r6, r0
 800638e:	460f      	mov	r7, r1
 8006390:	f1b8 0f00 	cmp.w	r8, #0
 8006394:	d11b      	bne.n	80063ce <__kernel_sin+0xd6>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4650      	mov	r0, sl
 800639c:	4659      	mov	r1, fp
 800639e:	f7fa f8d7 	bl	8000550 <__aeabi_dmul>
 80063a2:	a325      	add	r3, pc, #148	@ (adr r3, 8006438 <__kernel_sin+0x140>)
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	f7f9 ff1a 	bl	80001e0 <__aeabi_dsub>
 80063ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063b0:	f7fa f8ce 	bl	8000550 <__aeabi_dmul>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4620      	mov	r0, r4
 80063ba:	4629      	mov	r1, r5
 80063bc:	f7f9 ff12 	bl	80001e4 <__adddf3>
 80063c0:	4604      	mov	r4, r0
 80063c2:	460d      	mov	r5, r1
 80063c4:	ec45 4b10 	vmov	d0, r4, r5
 80063c8:	b005      	add	sp, #20
 80063ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006440 <__kernel_sin+0x148>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	f7fa f8bb 	bl	8000550 <__aeabi_dmul>
 80063da:	4632      	mov	r2, r6
 80063dc:	4680      	mov	r8, r0
 80063de:	4689      	mov	r9, r1
 80063e0:	463b      	mov	r3, r7
 80063e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063e6:	f7fa f8b3 	bl	8000550 <__aeabi_dmul>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4640      	mov	r0, r8
 80063f0:	4649      	mov	r1, r9
 80063f2:	f7f9 fef5 	bl	80001e0 <__aeabi_dsub>
 80063f6:	4652      	mov	r2, sl
 80063f8:	465b      	mov	r3, fp
 80063fa:	f7fa f8a9 	bl	8000550 <__aeabi_dmul>
 80063fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006402:	f7f9 feed 	bl	80001e0 <__aeabi_dsub>
 8006406:	a30c      	add	r3, pc, #48	@ (adr r3, 8006438 <__kernel_sin+0x140>)
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	4606      	mov	r6, r0
 800640e:	460f      	mov	r7, r1
 8006410:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006414:	f7fa f89c 	bl	8000550 <__aeabi_dmul>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4630      	mov	r0, r6
 800641e:	4639      	mov	r1, r7
 8006420:	f7f9 fee0 	bl	80001e4 <__adddf3>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4620      	mov	r0, r4
 800642a:	4629      	mov	r1, r5
 800642c:	f7f9 fed8 	bl	80001e0 <__aeabi_dsub>
 8006430:	e7c6      	b.n	80063c0 <__kernel_sin+0xc8>
 8006432:	bf00      	nop
 8006434:	f3af 8000 	nop.w
 8006438:	55555549 	.word	0x55555549
 800643c:	3fc55555 	.word	0x3fc55555
 8006440:	3fe00000 	.word	0x3fe00000
 8006444:	5acfd57c 	.word	0x5acfd57c
 8006448:	3de5d93a 	.word	0x3de5d93a
 800644c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006450:	3e5ae5e6 	.word	0x3e5ae5e6
 8006454:	57b1fe7d 	.word	0x57b1fe7d
 8006458:	3ec71de3 	.word	0x3ec71de3
 800645c:	19c161d5 	.word	0x19c161d5
 8006460:	3f2a01a0 	.word	0x3f2a01a0
 8006464:	1110f8a6 	.word	0x1110f8a6
 8006468:	3f811111 	.word	0x3f811111
 800646c:	00000000 	.word	0x00000000

08006470 <__ieee754_rem_pio2>:
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	ec57 6b10 	vmov	r6, r7, d0
 8006478:	4bc5      	ldr	r3, [pc, #788]	@ (8006790 <__ieee754_rem_pio2+0x320>)
 800647a:	b08d      	sub	sp, #52	@ 0x34
 800647c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006480:	4598      	cmp	r8, r3
 8006482:	4604      	mov	r4, r0
 8006484:	9704      	str	r7, [sp, #16]
 8006486:	d807      	bhi.n	8006498 <__ieee754_rem_pio2+0x28>
 8006488:	2200      	movs	r2, #0
 800648a:	2300      	movs	r3, #0
 800648c:	ed80 0b00 	vstr	d0, [r0]
 8006490:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006494:	2500      	movs	r5, #0
 8006496:	e028      	b.n	80064ea <__ieee754_rem_pio2+0x7a>
 8006498:	4bbe      	ldr	r3, [pc, #760]	@ (8006794 <__ieee754_rem_pio2+0x324>)
 800649a:	4598      	cmp	r8, r3
 800649c:	d878      	bhi.n	8006590 <__ieee754_rem_pio2+0x120>
 800649e:	9b04      	ldr	r3, [sp, #16]
 80064a0:	4dbd      	ldr	r5, [pc, #756]	@ (8006798 <__ieee754_rem_pio2+0x328>)
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	4630      	mov	r0, r6
 80064a6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006758 <__ieee754_rem_pio2+0x2e8>)
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	4639      	mov	r1, r7
 80064ae:	dd38      	ble.n	8006522 <__ieee754_rem_pio2+0xb2>
 80064b0:	f7f9 fe96 	bl	80001e0 <__aeabi_dsub>
 80064b4:	45a8      	cmp	r8, r5
 80064b6:	4606      	mov	r6, r0
 80064b8:	460f      	mov	r7, r1
 80064ba:	d01a      	beq.n	80064f2 <__ieee754_rem_pio2+0x82>
 80064bc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006760 <__ieee754_rem_pio2+0x2f0>)
 80064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c2:	f7f9 fe8d 	bl	80001e0 <__aeabi_dsub>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4680      	mov	r8, r0
 80064cc:	4689      	mov	r9, r1
 80064ce:	4630      	mov	r0, r6
 80064d0:	4639      	mov	r1, r7
 80064d2:	f7f9 fe85 	bl	80001e0 <__aeabi_dsub>
 80064d6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006760 <__ieee754_rem_pio2+0x2f0>)
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	f7f9 fe80 	bl	80001e0 <__aeabi_dsub>
 80064e0:	e9c4 8900 	strd	r8, r9, [r4]
 80064e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80064e8:	2501      	movs	r5, #1
 80064ea:	4628      	mov	r0, r5
 80064ec:	b00d      	add	sp, #52	@ 0x34
 80064ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f2:	a39d      	add	r3, pc, #628	@ (adr r3, 8006768 <__ieee754_rem_pio2+0x2f8>)
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f7f9 fe72 	bl	80001e0 <__aeabi_dsub>
 80064fc:	a39c      	add	r3, pc, #624	@ (adr r3, 8006770 <__ieee754_rem_pio2+0x300>)
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	4606      	mov	r6, r0
 8006504:	460f      	mov	r7, r1
 8006506:	f7f9 fe6b 	bl	80001e0 <__aeabi_dsub>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4680      	mov	r8, r0
 8006510:	4689      	mov	r9, r1
 8006512:	4630      	mov	r0, r6
 8006514:	4639      	mov	r1, r7
 8006516:	f7f9 fe63 	bl	80001e0 <__aeabi_dsub>
 800651a:	a395      	add	r3, pc, #596	@ (adr r3, 8006770 <__ieee754_rem_pio2+0x300>)
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	e7dc      	b.n	80064dc <__ieee754_rem_pio2+0x6c>
 8006522:	f7f9 fe5f 	bl	80001e4 <__adddf3>
 8006526:	45a8      	cmp	r8, r5
 8006528:	4606      	mov	r6, r0
 800652a:	460f      	mov	r7, r1
 800652c:	d018      	beq.n	8006560 <__ieee754_rem_pio2+0xf0>
 800652e:	a38c      	add	r3, pc, #560	@ (adr r3, 8006760 <__ieee754_rem_pio2+0x2f0>)
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f7f9 fe56 	bl	80001e4 <__adddf3>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4680      	mov	r8, r0
 800653e:	4689      	mov	r9, r1
 8006540:	4630      	mov	r0, r6
 8006542:	4639      	mov	r1, r7
 8006544:	f7f9 fe4c 	bl	80001e0 <__aeabi_dsub>
 8006548:	a385      	add	r3, pc, #532	@ (adr r3, 8006760 <__ieee754_rem_pio2+0x2f0>)
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f7f9 fe49 	bl	80001e4 <__adddf3>
 8006552:	f04f 35ff 	mov.w	r5, #4294967295
 8006556:	e9c4 8900 	strd	r8, r9, [r4]
 800655a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800655e:	e7c4      	b.n	80064ea <__ieee754_rem_pio2+0x7a>
 8006560:	a381      	add	r3, pc, #516	@ (adr r3, 8006768 <__ieee754_rem_pio2+0x2f8>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f7f9 fe3d 	bl	80001e4 <__adddf3>
 800656a:	a381      	add	r3, pc, #516	@ (adr r3, 8006770 <__ieee754_rem_pio2+0x300>)
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	4606      	mov	r6, r0
 8006572:	460f      	mov	r7, r1
 8006574:	f7f9 fe36 	bl	80001e4 <__adddf3>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4680      	mov	r8, r0
 800657e:	4689      	mov	r9, r1
 8006580:	4630      	mov	r0, r6
 8006582:	4639      	mov	r1, r7
 8006584:	f7f9 fe2c 	bl	80001e0 <__aeabi_dsub>
 8006588:	a379      	add	r3, pc, #484	@ (adr r3, 8006770 <__ieee754_rem_pio2+0x300>)
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	e7de      	b.n	800654e <__ieee754_rem_pio2+0xde>
 8006590:	4b82      	ldr	r3, [pc, #520]	@ (800679c <__ieee754_rem_pio2+0x32c>)
 8006592:	4598      	cmp	r8, r3
 8006594:	f200 80d1 	bhi.w	800673a <__ieee754_rem_pio2+0x2ca>
 8006598:	f000 f966 	bl	8006868 <fabs>
 800659c:	ec57 6b10 	vmov	r6, r7, d0
 80065a0:	a375      	add	r3, pc, #468	@ (adr r3, 8006778 <__ieee754_rem_pio2+0x308>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	4630      	mov	r0, r6
 80065a8:	4639      	mov	r1, r7
 80065aa:	f7f9 ffd1 	bl	8000550 <__aeabi_dmul>
 80065ae:	4b7c      	ldr	r3, [pc, #496]	@ (80067a0 <__ieee754_rem_pio2+0x330>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	f7f9 fe17 	bl	80001e4 <__adddf3>
 80065b6:	f7fa fa65 	bl	8000a84 <__aeabi_d2iz>
 80065ba:	4605      	mov	r5, r0
 80065bc:	f7f9 ff5e 	bl	800047c <__aeabi_i2d>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065c8:	a363      	add	r3, pc, #396	@ (adr r3, 8006758 <__ieee754_rem_pio2+0x2e8>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f7f9 ffbf 	bl	8000550 <__aeabi_dmul>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4630      	mov	r0, r6
 80065d8:	4639      	mov	r1, r7
 80065da:	f7f9 fe01 	bl	80001e0 <__aeabi_dsub>
 80065de:	a360      	add	r3, pc, #384	@ (adr r3, 8006760 <__ieee754_rem_pio2+0x2f0>)
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	4682      	mov	sl, r0
 80065e6:	468b      	mov	fp, r1
 80065e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ec:	f7f9 ffb0 	bl	8000550 <__aeabi_dmul>
 80065f0:	2d1f      	cmp	r5, #31
 80065f2:	4606      	mov	r6, r0
 80065f4:	460f      	mov	r7, r1
 80065f6:	dc0c      	bgt.n	8006612 <__ieee754_rem_pio2+0x1a2>
 80065f8:	4b6a      	ldr	r3, [pc, #424]	@ (80067a4 <__ieee754_rem_pio2+0x334>)
 80065fa:	1e6a      	subs	r2, r5, #1
 80065fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006600:	4543      	cmp	r3, r8
 8006602:	d006      	beq.n	8006612 <__ieee754_rem_pio2+0x1a2>
 8006604:	4632      	mov	r2, r6
 8006606:	463b      	mov	r3, r7
 8006608:	4650      	mov	r0, sl
 800660a:	4659      	mov	r1, fp
 800660c:	f7f9 fde8 	bl	80001e0 <__aeabi_dsub>
 8006610:	e00e      	b.n	8006630 <__ieee754_rem_pio2+0x1c0>
 8006612:	463b      	mov	r3, r7
 8006614:	4632      	mov	r2, r6
 8006616:	4650      	mov	r0, sl
 8006618:	4659      	mov	r1, fp
 800661a:	f7f9 fde1 	bl	80001e0 <__aeabi_dsub>
 800661e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006622:	9305      	str	r3, [sp, #20]
 8006624:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006628:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800662c:	2b10      	cmp	r3, #16
 800662e:	dc02      	bgt.n	8006636 <__ieee754_rem_pio2+0x1c6>
 8006630:	e9c4 0100 	strd	r0, r1, [r4]
 8006634:	e039      	b.n	80066aa <__ieee754_rem_pio2+0x23a>
 8006636:	a34c      	add	r3, pc, #304	@ (adr r3, 8006768 <__ieee754_rem_pio2+0x2f8>)
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006640:	f7f9 ff86 	bl	8000550 <__aeabi_dmul>
 8006644:	4606      	mov	r6, r0
 8006646:	460f      	mov	r7, r1
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4650      	mov	r0, sl
 800664e:	4659      	mov	r1, fp
 8006650:	f7f9 fdc6 	bl	80001e0 <__aeabi_dsub>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4680      	mov	r8, r0
 800665a:	4689      	mov	r9, r1
 800665c:	4650      	mov	r0, sl
 800665e:	4659      	mov	r1, fp
 8006660:	f7f9 fdbe 	bl	80001e0 <__aeabi_dsub>
 8006664:	4632      	mov	r2, r6
 8006666:	463b      	mov	r3, r7
 8006668:	f7f9 fdba 	bl	80001e0 <__aeabi_dsub>
 800666c:	a340      	add	r3, pc, #256	@ (adr r3, 8006770 <__ieee754_rem_pio2+0x300>)
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	4606      	mov	r6, r0
 8006674:	460f      	mov	r7, r1
 8006676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800667a:	f7f9 ff69 	bl	8000550 <__aeabi_dmul>
 800667e:	4632      	mov	r2, r6
 8006680:	463b      	mov	r3, r7
 8006682:	f7f9 fdad 	bl	80001e0 <__aeabi_dsub>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	4606      	mov	r6, r0
 800668c:	460f      	mov	r7, r1
 800668e:	4640      	mov	r0, r8
 8006690:	4649      	mov	r1, r9
 8006692:	f7f9 fda5 	bl	80001e0 <__aeabi_dsub>
 8006696:	9a05      	ldr	r2, [sp, #20]
 8006698:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b31      	cmp	r3, #49	@ 0x31
 80066a0:	dc20      	bgt.n	80066e4 <__ieee754_rem_pio2+0x274>
 80066a2:	e9c4 0100 	strd	r0, r1, [r4]
 80066a6:	46c2      	mov	sl, r8
 80066a8:	46cb      	mov	fp, r9
 80066aa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80066ae:	4650      	mov	r0, sl
 80066b0:	4642      	mov	r2, r8
 80066b2:	464b      	mov	r3, r9
 80066b4:	4659      	mov	r1, fp
 80066b6:	f7f9 fd93 	bl	80001e0 <__aeabi_dsub>
 80066ba:	463b      	mov	r3, r7
 80066bc:	4632      	mov	r2, r6
 80066be:	f7f9 fd8f 	bl	80001e0 <__aeabi_dsub>
 80066c2:	9b04      	ldr	r3, [sp, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80066ca:	f6bf af0e 	bge.w	80064ea <__ieee754_rem_pio2+0x7a>
 80066ce:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80066d2:	6063      	str	r3, [r4, #4]
 80066d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80066d8:	f8c4 8000 	str.w	r8, [r4]
 80066dc:	60a0      	str	r0, [r4, #8]
 80066de:	60e3      	str	r3, [r4, #12]
 80066e0:	426d      	negs	r5, r5
 80066e2:	e702      	b.n	80064ea <__ieee754_rem_pio2+0x7a>
 80066e4:	a326      	add	r3, pc, #152	@ (adr r3, 8006780 <__ieee754_rem_pio2+0x310>)
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ee:	f7f9 ff2f 	bl	8000550 <__aeabi_dmul>
 80066f2:	4606      	mov	r6, r0
 80066f4:	460f      	mov	r7, r1
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4640      	mov	r0, r8
 80066fc:	4649      	mov	r1, r9
 80066fe:	f7f9 fd6f 	bl	80001e0 <__aeabi_dsub>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	4682      	mov	sl, r0
 8006708:	468b      	mov	fp, r1
 800670a:	4640      	mov	r0, r8
 800670c:	4649      	mov	r1, r9
 800670e:	f7f9 fd67 	bl	80001e0 <__aeabi_dsub>
 8006712:	4632      	mov	r2, r6
 8006714:	463b      	mov	r3, r7
 8006716:	f7f9 fd63 	bl	80001e0 <__aeabi_dsub>
 800671a:	a31b      	add	r3, pc, #108	@ (adr r3, 8006788 <__ieee754_rem_pio2+0x318>)
 800671c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006720:	4606      	mov	r6, r0
 8006722:	460f      	mov	r7, r1
 8006724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006728:	f7f9 ff12 	bl	8000550 <__aeabi_dmul>
 800672c:	4632      	mov	r2, r6
 800672e:	463b      	mov	r3, r7
 8006730:	f7f9 fd56 	bl	80001e0 <__aeabi_dsub>
 8006734:	4606      	mov	r6, r0
 8006736:	460f      	mov	r7, r1
 8006738:	e764      	b.n	8006604 <__ieee754_rem_pio2+0x194>
 800673a:	4b1b      	ldr	r3, [pc, #108]	@ (80067a8 <__ieee754_rem_pio2+0x338>)
 800673c:	4598      	cmp	r8, r3
 800673e:	d935      	bls.n	80067ac <__ieee754_rem_pio2+0x33c>
 8006740:	4632      	mov	r2, r6
 8006742:	463b      	mov	r3, r7
 8006744:	4630      	mov	r0, r6
 8006746:	4639      	mov	r1, r7
 8006748:	f7f9 fd4a 	bl	80001e0 <__aeabi_dsub>
 800674c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006750:	e9c4 0100 	strd	r0, r1, [r4]
 8006754:	e69e      	b.n	8006494 <__ieee754_rem_pio2+0x24>
 8006756:	bf00      	nop
 8006758:	54400000 	.word	0x54400000
 800675c:	3ff921fb 	.word	0x3ff921fb
 8006760:	1a626331 	.word	0x1a626331
 8006764:	3dd0b461 	.word	0x3dd0b461
 8006768:	1a600000 	.word	0x1a600000
 800676c:	3dd0b461 	.word	0x3dd0b461
 8006770:	2e037073 	.word	0x2e037073
 8006774:	3ba3198a 	.word	0x3ba3198a
 8006778:	6dc9c883 	.word	0x6dc9c883
 800677c:	3fe45f30 	.word	0x3fe45f30
 8006780:	2e000000 	.word	0x2e000000
 8006784:	3ba3198a 	.word	0x3ba3198a
 8006788:	252049c1 	.word	0x252049c1
 800678c:	397b839a 	.word	0x397b839a
 8006790:	3fe921fb 	.word	0x3fe921fb
 8006794:	4002d97b 	.word	0x4002d97b
 8006798:	3ff921fb 	.word	0x3ff921fb
 800679c:	413921fb 	.word	0x413921fb
 80067a0:	3fe00000 	.word	0x3fe00000
 80067a4:	08007758 	.word	0x08007758
 80067a8:	7fefffff 	.word	0x7fefffff
 80067ac:	ea4f 5528 	mov.w	r5, r8, asr #20
 80067b0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80067b4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80067b8:	4630      	mov	r0, r6
 80067ba:	460f      	mov	r7, r1
 80067bc:	f7fa f962 	bl	8000a84 <__aeabi_d2iz>
 80067c0:	f7f9 fe5c 	bl	800047c <__aeabi_i2d>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4630      	mov	r0, r6
 80067ca:	4639      	mov	r1, r7
 80067cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067d0:	f7f9 fd06 	bl	80001e0 <__aeabi_dsub>
 80067d4:	4b22      	ldr	r3, [pc, #136]	@ (8006860 <__ieee754_rem_pio2+0x3f0>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	f7f9 feba 	bl	8000550 <__aeabi_dmul>
 80067dc:	460f      	mov	r7, r1
 80067de:	4606      	mov	r6, r0
 80067e0:	f7fa f950 	bl	8000a84 <__aeabi_d2iz>
 80067e4:	f7f9 fe4a 	bl	800047c <__aeabi_i2d>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4630      	mov	r0, r6
 80067ee:	4639      	mov	r1, r7
 80067f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80067f4:	f7f9 fcf4 	bl	80001e0 <__aeabi_dsub>
 80067f8:	4b19      	ldr	r3, [pc, #100]	@ (8006860 <__ieee754_rem_pio2+0x3f0>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	f7f9 fea8 	bl	8000550 <__aeabi_dmul>
 8006800:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006804:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006808:	f04f 0803 	mov.w	r8, #3
 800680c:	2600      	movs	r6, #0
 800680e:	2700      	movs	r7, #0
 8006810:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006814:	4632      	mov	r2, r6
 8006816:	463b      	mov	r3, r7
 8006818:	46c2      	mov	sl, r8
 800681a:	f108 38ff 	add.w	r8, r8, #4294967295
 800681e:	f7fa f8ff 	bl	8000a20 <__aeabi_dcmpeq>
 8006822:	2800      	cmp	r0, #0
 8006824:	d1f4      	bne.n	8006810 <__ieee754_rem_pio2+0x3a0>
 8006826:	4b0f      	ldr	r3, [pc, #60]	@ (8006864 <__ieee754_rem_pio2+0x3f4>)
 8006828:	9301      	str	r3, [sp, #4]
 800682a:	2302      	movs	r3, #2
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	462a      	mov	r2, r5
 8006830:	4653      	mov	r3, sl
 8006832:	4621      	mov	r1, r4
 8006834:	a806      	add	r0, sp, #24
 8006836:	f000 f81f 	bl	8006878 <__kernel_rem_pio2>
 800683a:	9b04      	ldr	r3, [sp, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	4605      	mov	r5, r0
 8006840:	f6bf ae53 	bge.w	80064ea <__ieee754_rem_pio2+0x7a>
 8006844:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006848:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800684c:	e9c4 2300 	strd	r2, r3, [r4]
 8006850:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006854:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006858:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800685c:	e740      	b.n	80066e0 <__ieee754_rem_pio2+0x270>
 800685e:	bf00      	nop
 8006860:	41700000 	.word	0x41700000
 8006864:	080077d8 	.word	0x080077d8

08006868 <fabs>:
 8006868:	ec51 0b10 	vmov	r0, r1, d0
 800686c:	4602      	mov	r2, r0
 800686e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006872:	ec43 2b10 	vmov	d0, r2, r3
 8006876:	4770      	bx	lr

08006878 <__kernel_rem_pio2>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	ed2d 8b02 	vpush	{d8}
 8006880:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006884:	f112 0f14 	cmn.w	r2, #20
 8006888:	9306      	str	r3, [sp, #24]
 800688a:	9104      	str	r1, [sp, #16]
 800688c:	4bbe      	ldr	r3, [pc, #760]	@ (8006b88 <__kernel_rem_pio2+0x310>)
 800688e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006890:	9008      	str	r0, [sp, #32]
 8006892:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	9b06      	ldr	r3, [sp, #24]
 800689a:	f103 33ff 	add.w	r3, r3, #4294967295
 800689e:	bfa8      	it	ge
 80068a0:	1ed4      	subge	r4, r2, #3
 80068a2:	9305      	str	r3, [sp, #20]
 80068a4:	bfb2      	itee	lt
 80068a6:	2400      	movlt	r4, #0
 80068a8:	2318      	movge	r3, #24
 80068aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80068ae:	f06f 0317 	mvn.w	r3, #23
 80068b2:	fb04 3303 	mla	r3, r4, r3, r3
 80068b6:	eb03 0b02 	add.w	fp, r3, r2
 80068ba:	9b00      	ldr	r3, [sp, #0]
 80068bc:	9a05      	ldr	r2, [sp, #20]
 80068be:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006b78 <__kernel_rem_pio2+0x300>
 80068c2:	eb03 0802 	add.w	r8, r3, r2
 80068c6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80068c8:	1aa7      	subs	r7, r4, r2
 80068ca:	ae20      	add	r6, sp, #128	@ 0x80
 80068cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80068d0:	2500      	movs	r5, #0
 80068d2:	4545      	cmp	r5, r8
 80068d4:	dd13      	ble.n	80068fe <__kernel_rem_pio2+0x86>
 80068d6:	9b06      	ldr	r3, [sp, #24]
 80068d8:	aa20      	add	r2, sp, #128	@ 0x80
 80068da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80068de:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80068e2:	f04f 0800 	mov.w	r8, #0
 80068e6:	9b00      	ldr	r3, [sp, #0]
 80068e8:	4598      	cmp	r8, r3
 80068ea:	dc31      	bgt.n	8006950 <__kernel_rem_pio2+0xd8>
 80068ec:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006b78 <__kernel_rem_pio2+0x300>
 80068f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80068f8:	462f      	mov	r7, r5
 80068fa:	2600      	movs	r6, #0
 80068fc:	e01b      	b.n	8006936 <__kernel_rem_pio2+0xbe>
 80068fe:	42ef      	cmn	r7, r5
 8006900:	d407      	bmi.n	8006912 <__kernel_rem_pio2+0x9a>
 8006902:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006906:	f7f9 fdb9 	bl	800047c <__aeabi_i2d>
 800690a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800690e:	3501      	adds	r5, #1
 8006910:	e7df      	b.n	80068d2 <__kernel_rem_pio2+0x5a>
 8006912:	ec51 0b18 	vmov	r0, r1, d8
 8006916:	e7f8      	b.n	800690a <__kernel_rem_pio2+0x92>
 8006918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006920:	f7f9 fe16 	bl	8000550 <__aeabi_dmul>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800692c:	f7f9 fc5a 	bl	80001e4 <__adddf3>
 8006930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006934:	3601      	adds	r6, #1
 8006936:	9b05      	ldr	r3, [sp, #20]
 8006938:	429e      	cmp	r6, r3
 800693a:	f1a7 0708 	sub.w	r7, r7, #8
 800693e:	ddeb      	ble.n	8006918 <__kernel_rem_pio2+0xa0>
 8006940:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006944:	f108 0801 	add.w	r8, r8, #1
 8006948:	ecaa 7b02 	vstmia	sl!, {d7}
 800694c:	3508      	adds	r5, #8
 800694e:	e7ca      	b.n	80068e6 <__kernel_rem_pio2+0x6e>
 8006950:	9b00      	ldr	r3, [sp, #0]
 8006952:	f8dd 8000 	ldr.w	r8, [sp]
 8006956:	aa0c      	add	r2, sp, #48	@ 0x30
 8006958:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800695c:	930a      	str	r3, [sp, #40]	@ 0x28
 800695e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006960:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006964:	9309      	str	r3, [sp, #36]	@ 0x24
 8006966:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800696a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800696c:	ab98      	add	r3, sp, #608	@ 0x260
 800696e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006972:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006976:	ed8d 7b02 	vstr	d7, [sp, #8]
 800697a:	ac0c      	add	r4, sp, #48	@ 0x30
 800697c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800697e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006982:	46a1      	mov	r9, r4
 8006984:	46c2      	mov	sl, r8
 8006986:	f1ba 0f00 	cmp.w	sl, #0
 800698a:	f1a5 0508 	sub.w	r5, r5, #8
 800698e:	dc77      	bgt.n	8006a80 <__kernel_rem_pio2+0x208>
 8006990:	4658      	mov	r0, fp
 8006992:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006996:	f000 fac7 	bl	8006f28 <scalbn>
 800699a:	ec57 6b10 	vmov	r6, r7, d0
 800699e:	2200      	movs	r2, #0
 80069a0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80069a4:	4630      	mov	r0, r6
 80069a6:	4639      	mov	r1, r7
 80069a8:	f7f9 fdd2 	bl	8000550 <__aeabi_dmul>
 80069ac:	ec41 0b10 	vmov	d0, r0, r1
 80069b0:	f000 fb3a 	bl	8007028 <floor>
 80069b4:	4b75      	ldr	r3, [pc, #468]	@ (8006b8c <__kernel_rem_pio2+0x314>)
 80069b6:	ec51 0b10 	vmov	r0, r1, d0
 80069ba:	2200      	movs	r2, #0
 80069bc:	f7f9 fdc8 	bl	8000550 <__aeabi_dmul>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4630      	mov	r0, r6
 80069c6:	4639      	mov	r1, r7
 80069c8:	f7f9 fc0a 	bl	80001e0 <__aeabi_dsub>
 80069cc:	460f      	mov	r7, r1
 80069ce:	4606      	mov	r6, r0
 80069d0:	f7fa f858 	bl	8000a84 <__aeabi_d2iz>
 80069d4:	9002      	str	r0, [sp, #8]
 80069d6:	f7f9 fd51 	bl	800047c <__aeabi_i2d>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4630      	mov	r0, r6
 80069e0:	4639      	mov	r1, r7
 80069e2:	f7f9 fbfd 	bl	80001e0 <__aeabi_dsub>
 80069e6:	f1bb 0f00 	cmp.w	fp, #0
 80069ea:	4606      	mov	r6, r0
 80069ec:	460f      	mov	r7, r1
 80069ee:	dd6c      	ble.n	8006aca <__kernel_rem_pio2+0x252>
 80069f0:	f108 31ff 	add.w	r1, r8, #4294967295
 80069f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80069f6:	9d02      	ldr	r5, [sp, #8]
 80069f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80069fc:	f1cb 0018 	rsb	r0, fp, #24
 8006a00:	fa43 f200 	asr.w	r2, r3, r0
 8006a04:	4415      	add	r5, r2
 8006a06:	4082      	lsls	r2, r0
 8006a08:	1a9b      	subs	r3, r3, r2
 8006a0a:	aa0c      	add	r2, sp, #48	@ 0x30
 8006a0c:	9502      	str	r5, [sp, #8]
 8006a0e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006a12:	f1cb 0217 	rsb	r2, fp, #23
 8006a16:	fa43 f902 	asr.w	r9, r3, r2
 8006a1a:	f1b9 0f00 	cmp.w	r9, #0
 8006a1e:	dd64      	ble.n	8006aea <__kernel_rem_pio2+0x272>
 8006a20:	9b02      	ldr	r3, [sp, #8]
 8006a22:	2200      	movs	r2, #0
 8006a24:	3301      	adds	r3, #1
 8006a26:	9302      	str	r3, [sp, #8]
 8006a28:	4615      	mov	r5, r2
 8006a2a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006a2e:	4590      	cmp	r8, r2
 8006a30:	f300 80b8 	bgt.w	8006ba4 <__kernel_rem_pio2+0x32c>
 8006a34:	f1bb 0f00 	cmp.w	fp, #0
 8006a38:	dd07      	ble.n	8006a4a <__kernel_rem_pio2+0x1d2>
 8006a3a:	f1bb 0f01 	cmp.w	fp, #1
 8006a3e:	f000 80bf 	beq.w	8006bc0 <__kernel_rem_pio2+0x348>
 8006a42:	f1bb 0f02 	cmp.w	fp, #2
 8006a46:	f000 80c6 	beq.w	8006bd6 <__kernel_rem_pio2+0x35e>
 8006a4a:	f1b9 0f02 	cmp.w	r9, #2
 8006a4e:	d14c      	bne.n	8006aea <__kernel_rem_pio2+0x272>
 8006a50:	4632      	mov	r2, r6
 8006a52:	463b      	mov	r3, r7
 8006a54:	494e      	ldr	r1, [pc, #312]	@ (8006b90 <__kernel_rem_pio2+0x318>)
 8006a56:	2000      	movs	r0, #0
 8006a58:	f7f9 fbc2 	bl	80001e0 <__aeabi_dsub>
 8006a5c:	4606      	mov	r6, r0
 8006a5e:	460f      	mov	r7, r1
 8006a60:	2d00      	cmp	r5, #0
 8006a62:	d042      	beq.n	8006aea <__kernel_rem_pio2+0x272>
 8006a64:	4658      	mov	r0, fp
 8006a66:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006b80 <__kernel_rem_pio2+0x308>
 8006a6a:	f000 fa5d 	bl	8006f28 <scalbn>
 8006a6e:	4630      	mov	r0, r6
 8006a70:	4639      	mov	r1, r7
 8006a72:	ec53 2b10 	vmov	r2, r3, d0
 8006a76:	f7f9 fbb3 	bl	80001e0 <__aeabi_dsub>
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460f      	mov	r7, r1
 8006a7e:	e034      	b.n	8006aea <__kernel_rem_pio2+0x272>
 8006a80:	4b44      	ldr	r3, [pc, #272]	@ (8006b94 <__kernel_rem_pio2+0x31c>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a88:	f7f9 fd62 	bl	8000550 <__aeabi_dmul>
 8006a8c:	f7f9 fffa 	bl	8000a84 <__aeabi_d2iz>
 8006a90:	f7f9 fcf4 	bl	800047c <__aeabi_i2d>
 8006a94:	4b40      	ldr	r3, [pc, #256]	@ (8006b98 <__kernel_rem_pio2+0x320>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	4606      	mov	r6, r0
 8006a9a:	460f      	mov	r7, r1
 8006a9c:	f7f9 fd58 	bl	8000550 <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aa8:	f7f9 fb9a 	bl	80001e0 <__aeabi_dsub>
 8006aac:	f7f9 ffea 	bl	8000a84 <__aeabi_d2iz>
 8006ab0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ab4:	f849 0b04 	str.w	r0, [r9], #4
 8006ab8:	4639      	mov	r1, r7
 8006aba:	4630      	mov	r0, r6
 8006abc:	f7f9 fb92 	bl	80001e4 <__adddf3>
 8006ac0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac8:	e75d      	b.n	8006986 <__kernel_rem_pio2+0x10e>
 8006aca:	d107      	bne.n	8006adc <__kernel_rem_pio2+0x264>
 8006acc:	f108 33ff 	add.w	r3, r8, #4294967295
 8006ad0:	aa0c      	add	r2, sp, #48	@ 0x30
 8006ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ad6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006ada:	e79e      	b.n	8006a1a <__kernel_rem_pio2+0x1a2>
 8006adc:	4b2f      	ldr	r3, [pc, #188]	@ (8006b9c <__kernel_rem_pio2+0x324>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f7f9 ffbc 	bl	8000a5c <__aeabi_dcmpge>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d143      	bne.n	8006b70 <__kernel_rem_pio2+0x2f8>
 8006ae8:	4681      	mov	r9, r0
 8006aea:	2200      	movs	r2, #0
 8006aec:	2300      	movs	r3, #0
 8006aee:	4630      	mov	r0, r6
 8006af0:	4639      	mov	r1, r7
 8006af2:	f7f9 ff95 	bl	8000a20 <__aeabi_dcmpeq>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f000 80bf 	beq.w	8006c7a <__kernel_rem_pio2+0x402>
 8006afc:	f108 33ff 	add.w	r3, r8, #4294967295
 8006b00:	2200      	movs	r2, #0
 8006b02:	9900      	ldr	r1, [sp, #0]
 8006b04:	428b      	cmp	r3, r1
 8006b06:	da6e      	bge.n	8006be6 <__kernel_rem_pio2+0x36e>
 8006b08:	2a00      	cmp	r2, #0
 8006b0a:	f000 8089 	beq.w	8006c20 <__kernel_rem_pio2+0x3a8>
 8006b0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b12:	ab0c      	add	r3, sp, #48	@ 0x30
 8006b14:	f1ab 0b18 	sub.w	fp, fp, #24
 8006b18:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0f6      	beq.n	8006b0e <__kernel_rem_pio2+0x296>
 8006b20:	4658      	mov	r0, fp
 8006b22:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006b80 <__kernel_rem_pio2+0x308>
 8006b26:	f000 f9ff 	bl	8006f28 <scalbn>
 8006b2a:	f108 0301 	add.w	r3, r8, #1
 8006b2e:	00da      	lsls	r2, r3, #3
 8006b30:	9205      	str	r2, [sp, #20]
 8006b32:	ec55 4b10 	vmov	r4, r5, d0
 8006b36:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006b38:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006b94 <__kernel_rem_pio2+0x31c>
 8006b3c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006b40:	4646      	mov	r6, r8
 8006b42:	f04f 0a00 	mov.w	sl, #0
 8006b46:	2e00      	cmp	r6, #0
 8006b48:	f280 80cf 	bge.w	8006cea <__kernel_rem_pio2+0x472>
 8006b4c:	4644      	mov	r4, r8
 8006b4e:	2c00      	cmp	r4, #0
 8006b50:	f2c0 80fd 	blt.w	8006d4e <__kernel_rem_pio2+0x4d6>
 8006b54:	4b12      	ldr	r3, [pc, #72]	@ (8006ba0 <__kernel_rem_pio2+0x328>)
 8006b56:	461f      	mov	r7, r3
 8006b58:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006b5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b5e:	9306      	str	r3, [sp, #24]
 8006b60:	f04f 0a00 	mov.w	sl, #0
 8006b64:	f04f 0b00 	mov.w	fp, #0
 8006b68:	2600      	movs	r6, #0
 8006b6a:	eba8 0504 	sub.w	r5, r8, r4
 8006b6e:	e0e2      	b.n	8006d36 <__kernel_rem_pio2+0x4be>
 8006b70:	f04f 0902 	mov.w	r9, #2
 8006b74:	e754      	b.n	8006a20 <__kernel_rem_pio2+0x1a8>
 8006b76:	bf00      	nop
	...
 8006b84:	3ff00000 	.word	0x3ff00000
 8006b88:	08007920 	.word	0x08007920
 8006b8c:	40200000 	.word	0x40200000
 8006b90:	3ff00000 	.word	0x3ff00000
 8006b94:	3e700000 	.word	0x3e700000
 8006b98:	41700000 	.word	0x41700000
 8006b9c:	3fe00000 	.word	0x3fe00000
 8006ba0:	080078e0 	.word	0x080078e0
 8006ba4:	f854 3b04 	ldr.w	r3, [r4], #4
 8006ba8:	b945      	cbnz	r5, 8006bbc <__kernel_rem_pio2+0x344>
 8006baa:	b123      	cbz	r3, 8006bb6 <__kernel_rem_pio2+0x33e>
 8006bac:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006bb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	3201      	adds	r2, #1
 8006bb8:	461d      	mov	r5, r3
 8006bba:	e738      	b.n	8006a2e <__kernel_rem_pio2+0x1b6>
 8006bbc:	1acb      	subs	r3, r1, r3
 8006bbe:	e7f7      	b.n	8006bb0 <__kernel_rem_pio2+0x338>
 8006bc0:	f108 32ff 	add.w	r2, r8, #4294967295
 8006bc4:	ab0c      	add	r3, sp, #48	@ 0x30
 8006bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bca:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006bce:	a90c      	add	r1, sp, #48	@ 0x30
 8006bd0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006bd4:	e739      	b.n	8006a4a <__kernel_rem_pio2+0x1d2>
 8006bd6:	f108 32ff 	add.w	r2, r8, #4294967295
 8006bda:	ab0c      	add	r3, sp, #48	@ 0x30
 8006bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006be4:	e7f3      	b.n	8006bce <__kernel_rem_pio2+0x356>
 8006be6:	a90c      	add	r1, sp, #48	@ 0x30
 8006be8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	e787      	b.n	8006b02 <__kernel_rem_pio2+0x28a>
 8006bf2:	3401      	adds	r4, #1
 8006bf4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006bf8:	2a00      	cmp	r2, #0
 8006bfa:	d0fa      	beq.n	8006bf2 <__kernel_rem_pio2+0x37a>
 8006bfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bfe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006c02:	eb0d 0503 	add.w	r5, sp, r3
 8006c06:	9b06      	ldr	r3, [sp, #24]
 8006c08:	aa20      	add	r2, sp, #128	@ 0x80
 8006c0a:	4443      	add	r3, r8
 8006c0c:	f108 0701 	add.w	r7, r8, #1
 8006c10:	3d98      	subs	r5, #152	@ 0x98
 8006c12:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006c16:	4444      	add	r4, r8
 8006c18:	42bc      	cmp	r4, r7
 8006c1a:	da04      	bge.n	8006c26 <__kernel_rem_pio2+0x3ae>
 8006c1c:	46a0      	mov	r8, r4
 8006c1e:	e6a2      	b.n	8006966 <__kernel_rem_pio2+0xee>
 8006c20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c22:	2401      	movs	r4, #1
 8006c24:	e7e6      	b.n	8006bf4 <__kernel_rem_pio2+0x37c>
 8006c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c28:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006c2c:	f7f9 fc26 	bl	800047c <__aeabi_i2d>
 8006c30:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006ef8 <__kernel_rem_pio2+0x680>
 8006c34:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c40:	46b2      	mov	sl, r6
 8006c42:	f04f 0800 	mov.w	r8, #0
 8006c46:	9b05      	ldr	r3, [sp, #20]
 8006c48:	4598      	cmp	r8, r3
 8006c4a:	dd05      	ble.n	8006c58 <__kernel_rem_pio2+0x3e0>
 8006c4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c50:	3701      	adds	r7, #1
 8006c52:	eca5 7b02 	vstmia	r5!, {d7}
 8006c56:	e7df      	b.n	8006c18 <__kernel_rem_pio2+0x3a0>
 8006c58:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006c5c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006c60:	f7f9 fc76 	bl	8000550 <__aeabi_dmul>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c6c:	f7f9 faba 	bl	80001e4 <__adddf3>
 8006c70:	f108 0801 	add.w	r8, r8, #1
 8006c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c78:	e7e5      	b.n	8006c46 <__kernel_rem_pio2+0x3ce>
 8006c7a:	f1cb 0000 	rsb	r0, fp, #0
 8006c7e:	ec47 6b10 	vmov	d0, r6, r7
 8006c82:	f000 f951 	bl	8006f28 <scalbn>
 8006c86:	ec55 4b10 	vmov	r4, r5, d0
 8006c8a:	4b9d      	ldr	r3, [pc, #628]	@ (8006f00 <__kernel_rem_pio2+0x688>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	f7f9 fee3 	bl	8000a5c <__aeabi_dcmpge>
 8006c96:	b300      	cbz	r0, 8006cda <__kernel_rem_pio2+0x462>
 8006c98:	4b9a      	ldr	r3, [pc, #616]	@ (8006f04 <__kernel_rem_pio2+0x68c>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	f7f9 fc56 	bl	8000550 <__aeabi_dmul>
 8006ca4:	f7f9 feee 	bl	8000a84 <__aeabi_d2iz>
 8006ca8:	4606      	mov	r6, r0
 8006caa:	f7f9 fbe7 	bl	800047c <__aeabi_i2d>
 8006cae:	4b94      	ldr	r3, [pc, #592]	@ (8006f00 <__kernel_rem_pio2+0x688>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f7f9 fc4d 	bl	8000550 <__aeabi_dmul>
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4602      	mov	r2, r0
 8006cba:	4629      	mov	r1, r5
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f7f9 fa8f 	bl	80001e0 <__aeabi_dsub>
 8006cc2:	f7f9 fedf 	bl	8000a84 <__aeabi_d2iz>
 8006cc6:	ab0c      	add	r3, sp, #48	@ 0x30
 8006cc8:	f10b 0b18 	add.w	fp, fp, #24
 8006ccc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006cd0:	f108 0801 	add.w	r8, r8, #1
 8006cd4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006cd8:	e722      	b.n	8006b20 <__kernel_rem_pio2+0x2a8>
 8006cda:	4620      	mov	r0, r4
 8006cdc:	4629      	mov	r1, r5
 8006cde:	f7f9 fed1 	bl	8000a84 <__aeabi_d2iz>
 8006ce2:	ab0c      	add	r3, sp, #48	@ 0x30
 8006ce4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006ce8:	e71a      	b.n	8006b20 <__kernel_rem_pio2+0x2a8>
 8006cea:	ab0c      	add	r3, sp, #48	@ 0x30
 8006cec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006cf0:	f7f9 fbc4 	bl	800047c <__aeabi_i2d>
 8006cf4:	4622      	mov	r2, r4
 8006cf6:	462b      	mov	r3, r5
 8006cf8:	f7f9 fc2a 	bl	8000550 <__aeabi_dmul>
 8006cfc:	4652      	mov	r2, sl
 8006cfe:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006d02:	465b      	mov	r3, fp
 8006d04:	4620      	mov	r0, r4
 8006d06:	4629      	mov	r1, r5
 8006d08:	f7f9 fc22 	bl	8000550 <__aeabi_dmul>
 8006d0c:	3e01      	subs	r6, #1
 8006d0e:	4604      	mov	r4, r0
 8006d10:	460d      	mov	r5, r1
 8006d12:	e718      	b.n	8006b46 <__kernel_rem_pio2+0x2ce>
 8006d14:	9906      	ldr	r1, [sp, #24]
 8006d16:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006d1a:	9106      	str	r1, [sp, #24]
 8006d1c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006d20:	f7f9 fc16 	bl	8000550 <__aeabi_dmul>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4650      	mov	r0, sl
 8006d2a:	4659      	mov	r1, fp
 8006d2c:	f7f9 fa5a 	bl	80001e4 <__adddf3>
 8006d30:	3601      	adds	r6, #1
 8006d32:	4682      	mov	sl, r0
 8006d34:	468b      	mov	fp, r1
 8006d36:	9b00      	ldr	r3, [sp, #0]
 8006d38:	429e      	cmp	r6, r3
 8006d3a:	dc01      	bgt.n	8006d40 <__kernel_rem_pio2+0x4c8>
 8006d3c:	42b5      	cmp	r5, r6
 8006d3e:	dae9      	bge.n	8006d14 <__kernel_rem_pio2+0x49c>
 8006d40:	ab48      	add	r3, sp, #288	@ 0x120
 8006d42:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006d46:	e9c5 ab00 	strd	sl, fp, [r5]
 8006d4a:	3c01      	subs	r4, #1
 8006d4c:	e6ff      	b.n	8006b4e <__kernel_rem_pio2+0x2d6>
 8006d4e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	dc0b      	bgt.n	8006d6c <__kernel_rem_pio2+0x4f4>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	dc39      	bgt.n	8006dcc <__kernel_rem_pio2+0x554>
 8006d58:	d05d      	beq.n	8006e16 <__kernel_rem_pio2+0x59e>
 8006d5a:	9b02      	ldr	r3, [sp, #8]
 8006d5c:	f003 0007 	and.w	r0, r3, #7
 8006d60:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006d64:	ecbd 8b02 	vpop	{d8}
 8006d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d1f3      	bne.n	8006d5a <__kernel_rem_pio2+0x4e2>
 8006d72:	9b05      	ldr	r3, [sp, #20]
 8006d74:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006d78:	eb0d 0403 	add.w	r4, sp, r3
 8006d7c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006d80:	4625      	mov	r5, r4
 8006d82:	46c2      	mov	sl, r8
 8006d84:	f1ba 0f00 	cmp.w	sl, #0
 8006d88:	f1a5 0508 	sub.w	r5, r5, #8
 8006d8c:	dc6b      	bgt.n	8006e66 <__kernel_rem_pio2+0x5ee>
 8006d8e:	4645      	mov	r5, r8
 8006d90:	2d01      	cmp	r5, #1
 8006d92:	f1a4 0408 	sub.w	r4, r4, #8
 8006d96:	f300 8087 	bgt.w	8006ea8 <__kernel_rem_pio2+0x630>
 8006d9a:	9c05      	ldr	r4, [sp, #20]
 8006d9c:	ab48      	add	r3, sp, #288	@ 0x120
 8006d9e:	441c      	add	r4, r3
 8006da0:	2000      	movs	r0, #0
 8006da2:	2100      	movs	r1, #0
 8006da4:	f1b8 0f01 	cmp.w	r8, #1
 8006da8:	f300 809c 	bgt.w	8006ee4 <__kernel_rem_pio2+0x66c>
 8006dac:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006db0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006db4:	f1b9 0f00 	cmp.w	r9, #0
 8006db8:	f040 80a6 	bne.w	8006f08 <__kernel_rem_pio2+0x690>
 8006dbc:	9b04      	ldr	r3, [sp, #16]
 8006dbe:	e9c3 7800 	strd	r7, r8, [r3]
 8006dc2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006dc6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006dca:	e7c6      	b.n	8006d5a <__kernel_rem_pio2+0x4e2>
 8006dcc:	9d05      	ldr	r5, [sp, #20]
 8006dce:	ab48      	add	r3, sp, #288	@ 0x120
 8006dd0:	441d      	add	r5, r3
 8006dd2:	4644      	mov	r4, r8
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	2c00      	cmp	r4, #0
 8006dda:	da35      	bge.n	8006e48 <__kernel_rem_pio2+0x5d0>
 8006ddc:	f1b9 0f00 	cmp.w	r9, #0
 8006de0:	d038      	beq.n	8006e54 <__kernel_rem_pio2+0x5dc>
 8006de2:	4602      	mov	r2, r0
 8006de4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006de8:	9c04      	ldr	r4, [sp, #16]
 8006dea:	e9c4 2300 	strd	r2, r3, [r4]
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006df6:	f7f9 f9f3 	bl	80001e0 <__aeabi_dsub>
 8006dfa:	ad4a      	add	r5, sp, #296	@ 0x128
 8006dfc:	2401      	movs	r4, #1
 8006dfe:	45a0      	cmp	r8, r4
 8006e00:	da2b      	bge.n	8006e5a <__kernel_rem_pio2+0x5e2>
 8006e02:	f1b9 0f00 	cmp.w	r9, #0
 8006e06:	d002      	beq.n	8006e0e <__kernel_rem_pio2+0x596>
 8006e08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	9b04      	ldr	r3, [sp, #16]
 8006e10:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006e14:	e7a1      	b.n	8006d5a <__kernel_rem_pio2+0x4e2>
 8006e16:	9c05      	ldr	r4, [sp, #20]
 8006e18:	ab48      	add	r3, sp, #288	@ 0x120
 8006e1a:	441c      	add	r4, r3
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	2100      	movs	r1, #0
 8006e20:	f1b8 0f00 	cmp.w	r8, #0
 8006e24:	da09      	bge.n	8006e3a <__kernel_rem_pio2+0x5c2>
 8006e26:	f1b9 0f00 	cmp.w	r9, #0
 8006e2a:	d002      	beq.n	8006e32 <__kernel_rem_pio2+0x5ba>
 8006e2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e30:	4619      	mov	r1, r3
 8006e32:	9b04      	ldr	r3, [sp, #16]
 8006e34:	e9c3 0100 	strd	r0, r1, [r3]
 8006e38:	e78f      	b.n	8006d5a <__kernel_rem_pio2+0x4e2>
 8006e3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006e3e:	f7f9 f9d1 	bl	80001e4 <__adddf3>
 8006e42:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e46:	e7eb      	b.n	8006e20 <__kernel_rem_pio2+0x5a8>
 8006e48:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006e4c:	f7f9 f9ca 	bl	80001e4 <__adddf3>
 8006e50:	3c01      	subs	r4, #1
 8006e52:	e7c1      	b.n	8006dd8 <__kernel_rem_pio2+0x560>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	e7c6      	b.n	8006de8 <__kernel_rem_pio2+0x570>
 8006e5a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006e5e:	f7f9 f9c1 	bl	80001e4 <__adddf3>
 8006e62:	3401      	adds	r4, #1
 8006e64:	e7cb      	b.n	8006dfe <__kernel_rem_pio2+0x586>
 8006e66:	ed95 7b00 	vldr	d7, [r5]
 8006e6a:	ed8d 7b00 	vstr	d7, [sp]
 8006e6e:	ed95 7b02 	vldr	d7, [r5, #8]
 8006e72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e76:	ec53 2b17 	vmov	r2, r3, d7
 8006e7a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e7e:	f7f9 f9b1 	bl	80001e4 <__adddf3>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4606      	mov	r6, r0
 8006e88:	460f      	mov	r7, r1
 8006e8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e8e:	f7f9 f9a7 	bl	80001e0 <__aeabi_dsub>
 8006e92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e96:	f7f9 f9a5 	bl	80001e4 <__adddf3>
 8006e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e9e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006ea2:	e9c5 6700 	strd	r6, r7, [r5]
 8006ea6:	e76d      	b.n	8006d84 <__kernel_rem_pio2+0x50c>
 8006ea8:	ed94 7b00 	vldr	d7, [r4]
 8006eac:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006eb0:	ec51 0b17 	vmov	r0, r1, d7
 8006eb4:	4652      	mov	r2, sl
 8006eb6:	465b      	mov	r3, fp
 8006eb8:	ed8d 7b00 	vstr	d7, [sp]
 8006ebc:	f7f9 f992 	bl	80001e4 <__adddf3>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4606      	mov	r6, r0
 8006ec6:	460f      	mov	r7, r1
 8006ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ecc:	f7f9 f988 	bl	80001e0 <__aeabi_dsub>
 8006ed0:	4652      	mov	r2, sl
 8006ed2:	465b      	mov	r3, fp
 8006ed4:	f7f9 f986 	bl	80001e4 <__adddf3>
 8006ed8:	3d01      	subs	r5, #1
 8006eda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ede:	e9c4 6700 	strd	r6, r7, [r4]
 8006ee2:	e755      	b.n	8006d90 <__kernel_rem_pio2+0x518>
 8006ee4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006ee8:	f7f9 f97c 	bl	80001e4 <__adddf3>
 8006eec:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ef0:	e758      	b.n	8006da4 <__kernel_rem_pio2+0x52c>
 8006ef2:	bf00      	nop
 8006ef4:	f3af 8000 	nop.w
	...
 8006f00:	41700000 	.word	0x41700000
 8006f04:	3e700000 	.word	0x3e700000
 8006f08:	9b04      	ldr	r3, [sp, #16]
 8006f0a:	9a04      	ldr	r2, [sp, #16]
 8006f0c:	601f      	str	r7, [r3, #0]
 8006f0e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006f12:	605c      	str	r4, [r3, #4]
 8006f14:	609d      	str	r5, [r3, #8]
 8006f16:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f1a:	60d3      	str	r3, [r2, #12]
 8006f1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f20:	6110      	str	r0, [r2, #16]
 8006f22:	6153      	str	r3, [r2, #20]
 8006f24:	e719      	b.n	8006d5a <__kernel_rem_pio2+0x4e2>
 8006f26:	bf00      	nop

08006f28 <scalbn>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	ec55 4b10 	vmov	r4, r5, d0
 8006f2e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006f32:	4606      	mov	r6, r0
 8006f34:	462b      	mov	r3, r5
 8006f36:	b991      	cbnz	r1, 8006f5e <scalbn+0x36>
 8006f38:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006f3c:	4323      	orrs	r3, r4
 8006f3e:	d03d      	beq.n	8006fbc <scalbn+0x94>
 8006f40:	4b35      	ldr	r3, [pc, #212]	@ (8007018 <scalbn+0xf0>)
 8006f42:	4620      	mov	r0, r4
 8006f44:	4629      	mov	r1, r5
 8006f46:	2200      	movs	r2, #0
 8006f48:	f7f9 fb02 	bl	8000550 <__aeabi_dmul>
 8006f4c:	4b33      	ldr	r3, [pc, #204]	@ (800701c <scalbn+0xf4>)
 8006f4e:	429e      	cmp	r6, r3
 8006f50:	4604      	mov	r4, r0
 8006f52:	460d      	mov	r5, r1
 8006f54:	da0f      	bge.n	8006f76 <scalbn+0x4e>
 8006f56:	a328      	add	r3, pc, #160	@ (adr r3, 8006ff8 <scalbn+0xd0>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	e01e      	b.n	8006f9c <scalbn+0x74>
 8006f5e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006f62:	4291      	cmp	r1, r2
 8006f64:	d10b      	bne.n	8006f7e <scalbn+0x56>
 8006f66:	4622      	mov	r2, r4
 8006f68:	4620      	mov	r0, r4
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	f7f9 f93a 	bl	80001e4 <__adddf3>
 8006f70:	4604      	mov	r4, r0
 8006f72:	460d      	mov	r5, r1
 8006f74:	e022      	b.n	8006fbc <scalbn+0x94>
 8006f76:	460b      	mov	r3, r1
 8006f78:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006f7c:	3936      	subs	r1, #54	@ 0x36
 8006f7e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006f82:	4296      	cmp	r6, r2
 8006f84:	dd0d      	ble.n	8006fa2 <scalbn+0x7a>
 8006f86:	2d00      	cmp	r5, #0
 8006f88:	a11d      	add	r1, pc, #116	@ (adr r1, 8007000 <scalbn+0xd8>)
 8006f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f8e:	da02      	bge.n	8006f96 <scalbn+0x6e>
 8006f90:	a11d      	add	r1, pc, #116	@ (adr r1, 8007008 <scalbn+0xe0>)
 8006f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f96:	a31a      	add	r3, pc, #104	@ (adr r3, 8007000 <scalbn+0xd8>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 fad8 	bl	8000550 <__aeabi_dmul>
 8006fa0:	e7e6      	b.n	8006f70 <scalbn+0x48>
 8006fa2:	1872      	adds	r2, r6, r1
 8006fa4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006fa8:	428a      	cmp	r2, r1
 8006faa:	dcec      	bgt.n	8006f86 <scalbn+0x5e>
 8006fac:	2a00      	cmp	r2, #0
 8006fae:	dd08      	ble.n	8006fc2 <scalbn+0x9a>
 8006fb0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006fb4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006fb8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006fbc:	ec45 4b10 	vmov	d0, r4, r5
 8006fc0:	bd70      	pop	{r4, r5, r6, pc}
 8006fc2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006fc6:	da08      	bge.n	8006fda <scalbn+0xb2>
 8006fc8:	2d00      	cmp	r5, #0
 8006fca:	a10b      	add	r1, pc, #44	@ (adr r1, 8006ff8 <scalbn+0xd0>)
 8006fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd0:	dac1      	bge.n	8006f56 <scalbn+0x2e>
 8006fd2:	a10f      	add	r1, pc, #60	@ (adr r1, 8007010 <scalbn+0xe8>)
 8006fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd8:	e7bd      	b.n	8006f56 <scalbn+0x2e>
 8006fda:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006fde:	3236      	adds	r2, #54	@ 0x36
 8006fe0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006fe4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006fe8:	4620      	mov	r0, r4
 8006fea:	4b0d      	ldr	r3, [pc, #52]	@ (8007020 <scalbn+0xf8>)
 8006fec:	4629      	mov	r1, r5
 8006fee:	2200      	movs	r2, #0
 8006ff0:	e7d4      	b.n	8006f9c <scalbn+0x74>
 8006ff2:	bf00      	nop
 8006ff4:	f3af 8000 	nop.w
 8006ff8:	c2f8f359 	.word	0xc2f8f359
 8006ffc:	01a56e1f 	.word	0x01a56e1f
 8007000:	8800759c 	.word	0x8800759c
 8007004:	7e37e43c 	.word	0x7e37e43c
 8007008:	8800759c 	.word	0x8800759c
 800700c:	fe37e43c 	.word	0xfe37e43c
 8007010:	c2f8f359 	.word	0xc2f8f359
 8007014:	81a56e1f 	.word	0x81a56e1f
 8007018:	43500000 	.word	0x43500000
 800701c:	ffff3cb0 	.word	0xffff3cb0
 8007020:	3c900000 	.word	0x3c900000
 8007024:	00000000 	.word	0x00000000

08007028 <floor>:
 8007028:	ec51 0b10 	vmov	r0, r1, d0
 800702c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007034:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007038:	2e13      	cmp	r6, #19
 800703a:	460c      	mov	r4, r1
 800703c:	4605      	mov	r5, r0
 800703e:	4680      	mov	r8, r0
 8007040:	dc34      	bgt.n	80070ac <floor+0x84>
 8007042:	2e00      	cmp	r6, #0
 8007044:	da17      	bge.n	8007076 <floor+0x4e>
 8007046:	a332      	add	r3, pc, #200	@ (adr r3, 8007110 <floor+0xe8>)
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	f7f9 f8ca 	bl	80001e4 <__adddf3>
 8007050:	2200      	movs	r2, #0
 8007052:	2300      	movs	r3, #0
 8007054:	f7f9 fd0c 	bl	8000a70 <__aeabi_dcmpgt>
 8007058:	b150      	cbz	r0, 8007070 <floor+0x48>
 800705a:	2c00      	cmp	r4, #0
 800705c:	da55      	bge.n	800710a <floor+0xe2>
 800705e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007062:	432c      	orrs	r4, r5
 8007064:	2500      	movs	r5, #0
 8007066:	42ac      	cmp	r4, r5
 8007068:	4c2b      	ldr	r4, [pc, #172]	@ (8007118 <floor+0xf0>)
 800706a:	bf08      	it	eq
 800706c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007070:	4621      	mov	r1, r4
 8007072:	4628      	mov	r0, r5
 8007074:	e023      	b.n	80070be <floor+0x96>
 8007076:	4f29      	ldr	r7, [pc, #164]	@ (800711c <floor+0xf4>)
 8007078:	4137      	asrs	r7, r6
 800707a:	ea01 0307 	and.w	r3, r1, r7
 800707e:	4303      	orrs	r3, r0
 8007080:	d01d      	beq.n	80070be <floor+0x96>
 8007082:	a323      	add	r3, pc, #140	@ (adr r3, 8007110 <floor+0xe8>)
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f7f9 f8ac 	bl	80001e4 <__adddf3>
 800708c:	2200      	movs	r2, #0
 800708e:	2300      	movs	r3, #0
 8007090:	f7f9 fcee 	bl	8000a70 <__aeabi_dcmpgt>
 8007094:	2800      	cmp	r0, #0
 8007096:	d0eb      	beq.n	8007070 <floor+0x48>
 8007098:	2c00      	cmp	r4, #0
 800709a:	bfbe      	ittt	lt
 800709c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80070a0:	4133      	asrlt	r3, r6
 80070a2:	18e4      	addlt	r4, r4, r3
 80070a4:	ea24 0407 	bic.w	r4, r4, r7
 80070a8:	2500      	movs	r5, #0
 80070aa:	e7e1      	b.n	8007070 <floor+0x48>
 80070ac:	2e33      	cmp	r6, #51	@ 0x33
 80070ae:	dd0a      	ble.n	80070c6 <floor+0x9e>
 80070b0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80070b4:	d103      	bne.n	80070be <floor+0x96>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	f7f9 f893 	bl	80001e4 <__adddf3>
 80070be:	ec41 0b10 	vmov	d0, r0, r1
 80070c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80070ca:	f04f 37ff 	mov.w	r7, #4294967295
 80070ce:	40df      	lsrs	r7, r3
 80070d0:	4207      	tst	r7, r0
 80070d2:	d0f4      	beq.n	80070be <floor+0x96>
 80070d4:	a30e      	add	r3, pc, #56	@ (adr r3, 8007110 <floor+0xe8>)
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	f7f9 f883 	bl	80001e4 <__adddf3>
 80070de:	2200      	movs	r2, #0
 80070e0:	2300      	movs	r3, #0
 80070e2:	f7f9 fcc5 	bl	8000a70 <__aeabi_dcmpgt>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d0c2      	beq.n	8007070 <floor+0x48>
 80070ea:	2c00      	cmp	r4, #0
 80070ec:	da0a      	bge.n	8007104 <floor+0xdc>
 80070ee:	2e14      	cmp	r6, #20
 80070f0:	d101      	bne.n	80070f6 <floor+0xce>
 80070f2:	3401      	adds	r4, #1
 80070f4:	e006      	b.n	8007104 <floor+0xdc>
 80070f6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80070fa:	2301      	movs	r3, #1
 80070fc:	40b3      	lsls	r3, r6
 80070fe:	441d      	add	r5, r3
 8007100:	4545      	cmp	r5, r8
 8007102:	d3f6      	bcc.n	80070f2 <floor+0xca>
 8007104:	ea25 0507 	bic.w	r5, r5, r7
 8007108:	e7b2      	b.n	8007070 <floor+0x48>
 800710a:	2500      	movs	r5, #0
 800710c:	462c      	mov	r4, r5
 800710e:	e7af      	b.n	8007070 <floor+0x48>
 8007110:	8800759c 	.word	0x8800759c
 8007114:	7e37e43c 	.word	0x7e37e43c
 8007118:	bff00000 	.word	0xbff00000
 800711c:	000fffff 	.word	0x000fffff

08007120 <_init>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	bf00      	nop
 8007124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007126:	bc08      	pop	{r3}
 8007128:	469e      	mov	lr, r3
 800712a:	4770      	bx	lr

0800712c <_fini>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	bf00      	nop
 8007130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007132:	bc08      	pop	{r3}
 8007134:	469e      	mov	lr, r3
 8007136:	4770      	bx	lr
