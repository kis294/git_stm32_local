
STM32_Audio_CS432L_I2C_only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08006150  08006150  00007150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006688  08006688  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006688  08006688  00007688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006690  08006690  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006690  08006690  00007690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006694  08006694  00007694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006698  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013a00  20000010  080066a8  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013a10  080066a8  00008a10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae0a  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002094  00000000  00000000  00012e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00014ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007af  00000000  00000000  000158e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160ea  00000000  00000000  00016097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1bb  00000000  00000000  0002c181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f2f  00000000  00000000  0003a33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c226b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c64  00000000  00000000  000c22b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000c4f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006138 	.word	0x08006138

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08006138 	.word	0x08006138

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000eb0:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <write_register+0x34>)
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <write_register+0x34>)
 8000ebc:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000ebe:	2364      	movs	r3, #100	@ 0x64
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <write_register+0x34>)
 8000ec6:	2194      	movs	r1, #148	@ 0x94
 8000ec8:	4804      	ldr	r0, [pc, #16]	@ (8000edc <write_register+0x38>)
 8000eca:	f001 fea3 	bl	8002c14 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000002c 	.word	0x2000002c
 8000edc:	20000030 	.word	0x20000030

08000ee0 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000eec:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <read_register+0x3c>)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000ef2:	2364      	movs	r3, #100	@ 0x64
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	4a08      	ldr	r2, [pc, #32]	@ (8000f1c <read_register+0x3c>)
 8000efa:	2194      	movs	r1, #148	@ 0x94
 8000efc:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <read_register+0x40>)
 8000efe:	f001 fe89 	bl	8002c14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000f02:	2364      	movs	r3, #100	@ 0x64
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	2194      	movs	r1, #148	@ 0x94
 8000f0c:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <read_register+0x40>)
 8000f0e:	f001 ff7f 	bl	8002e10 <HAL_I2C_Master_Receive>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000002c 	.word	0x2000002c
 8000f20:	20000030 	.word	0x20000030

08000f24 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000f24:	b084      	sub	sp, #16
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	f107 0c08 	add.w	ip, r7, #8
 8000f2e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000f32:	4b81      	ldr	r3, [pc, #516]	@ (8001138 <CS43_Init+0x214>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001138 <CS43_Init+0x214>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	69da      	ldr	r2, [r3, #28]
 8000f40:	4b7d      	ldr	r3, [pc, #500]	@ (8001138 <CS43_Init+0x214>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000f48:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	487b      	ldr	r0, [pc, #492]	@ (800113c <CS43_Init+0x218>)
 8000f50:	f001 fd02 	bl	8002958 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000f54:	4b7a      	ldr	r3, [pc, #488]	@ (8001140 <CS43_Init+0x21c>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2254      	movs	r2, #84	@ 0x54
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f004 f8aa 	bl	80050b8 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000f64:	4b77      	ldr	r3, [pc, #476]	@ (8001144 <CS43_Init+0x220>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000f6a:	4976      	ldr	r1, [pc, #472]	@ (8001144 <CS43_Init+0x220>)
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f7ff ff99 	bl	8000ea4 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000f72:	4b74      	ldr	r3, [pc, #464]	@ (8001144 <CS43_Init+0x220>)
 8000f74:	2280      	movs	r2, #128	@ 0x80
 8000f76:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000f78:	4b72      	ldr	r3, [pc, #456]	@ (8001144 <CS43_Init+0x220>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	f043 0320 	orr.w	r3, r3, #32
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b70      	ldr	r3, [pc, #448]	@ (8001144 <CS43_Init+0x220>)
 8000f84:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000f86:	4b6f      	ldr	r3, [pc, #444]	@ (8001144 <CS43_Init+0x220>)
 8000f88:	785b      	ldrb	r3, [r3, #1]
 8000f8a:	f043 030c 	orr.w	r3, r3, #12
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b6c      	ldr	r3, [pc, #432]	@ (8001144 <CS43_Init+0x220>)
 8000f92:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000f94:	4b6b      	ldr	r3, [pc, #428]	@ (8001144 <CS43_Init+0x220>)
 8000f96:	785b      	ldrb	r3, [r3, #1]
 8000f98:	f043 0303 	orr.w	r3, r3, #3
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b69      	ldr	r3, [pc, #420]	@ (8001144 <CS43_Init+0x220>)
 8000fa0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000fa2:	4969      	ldr	r1, [pc, #420]	@ (8001148 <CS43_Init+0x224>)
 8000fa4:	2004      	movs	r0, #4
 8000fa6:	f7ff ff7d 	bl	8000ea4 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000faa:	4b66      	ldr	r3, [pc, #408]	@ (8001144 <CS43_Init+0x220>)
 8000fac:	2280      	movs	r2, #128	@ 0x80
 8000fae:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000fb0:	4965      	ldr	r1, [pc, #404]	@ (8001148 <CS43_Init+0x224>)
 8000fb2:	2005      	movs	r0, #5
 8000fb4:	f7ff ff76 	bl	8000ea4 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000fb8:	4962      	ldr	r1, [pc, #392]	@ (8001144 <CS43_Init+0x220>)
 8000fba:	2006      	movs	r0, #6
 8000fbc:	f7ff ff90 	bl	8000ee0 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000fc0:	4b60      	ldr	r3, [pc, #384]	@ (8001144 <CS43_Init+0x220>)
 8000fc2:	785b      	ldrb	r3, [r3, #1]
 8000fc4:	f003 0320 	and.w	r3, r3, #32
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b5e      	ldr	r3, [pc, #376]	@ (8001144 <CS43_Init+0x220>)
 8000fcc:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8000fce:	4b5d      	ldr	r3, [pc, #372]	@ (8001144 <CS43_Init+0x220>)
 8000fd0:	785b      	ldrb	r3, [r3, #1]
 8000fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8001144 <CS43_Init+0x220>)
 8000fda:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000fdc:	4b59      	ldr	r3, [pc, #356]	@ (8001144 <CS43_Init+0x220>)
 8000fde:	785b      	ldrb	r3, [r3, #1]
 8000fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b57      	ldr	r3, [pc, #348]	@ (8001144 <CS43_Init+0x220>)
 8000fe8:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000fea:	4b56      	ldr	r3, [pc, #344]	@ (8001144 <CS43_Init+0x220>)
 8000fec:	785b      	ldrb	r3, [r3, #1]
 8000fee:	f023 0310 	bic.w	r3, r3, #16
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b53      	ldr	r3, [pc, #332]	@ (8001144 <CS43_Init+0x220>)
 8000ff6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000ff8:	4b52      	ldr	r3, [pc, #328]	@ (8001144 <CS43_Init+0x220>)
 8000ffa:	785b      	ldrb	r3, [r3, #1]
 8000ffc:	f023 0304 	bic.w	r3, r3, #4
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b50      	ldr	r3, [pc, #320]	@ (8001144 <CS43_Init+0x220>)
 8001004:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8001006:	4b4f      	ldr	r3, [pc, #316]	@ (8001144 <CS43_Init+0x220>)
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b4c      	ldr	r3, [pc, #304]	@ (8001144 <CS43_Init+0x220>)
 8001012:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8001014:	4b4b      	ldr	r3, [pc, #300]	@ (8001144 <CS43_Init+0x220>)
 8001016:	785b      	ldrb	r3, [r3, #1]
 8001018:	f043 0303 	orr.w	r3, r3, #3
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b49      	ldr	r3, [pc, #292]	@ (8001144 <CS43_Init+0x220>)
 8001020:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8001022:	4949      	ldr	r1, [pc, #292]	@ (8001148 <CS43_Init+0x224>)
 8001024:	2006      	movs	r0, #6
 8001026:	f7ff ff3d 	bl	8000ea4 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800102a:	4947      	ldr	r1, [pc, #284]	@ (8001148 <CS43_Init+0x224>)
 800102c:	2008      	movs	r0, #8
 800102e:	f7ff ff57 	bl	8000ee0 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001032:	4b44      	ldr	r3, [pc, #272]	@ (8001144 <CS43_Init+0x220>)
 8001034:	785b      	ldrb	r3, [r3, #1]
 8001036:	f023 030f 	bic.w	r3, r3, #15
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b41      	ldr	r3, [pc, #260]	@ (8001144 <CS43_Init+0x220>)
 800103e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8001040:	4b40      	ldr	r3, [pc, #256]	@ (8001144 <CS43_Init+0x220>)
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b3e      	ldr	r3, [pc, #248]	@ (8001144 <CS43_Init+0x220>)
 800104c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800104e:	493e      	ldr	r1, [pc, #248]	@ (8001148 <CS43_Init+0x224>)
 8001050:	2008      	movs	r0, #8
 8001052:	f7ff ff27 	bl	8000ea4 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8001056:	493c      	ldr	r1, [pc, #240]	@ (8001148 <CS43_Init+0x224>)
 8001058:	2009      	movs	r0, #9
 800105a:	f7ff ff41 	bl	8000ee0 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800105e:	4b39      	ldr	r3, [pc, #228]	@ (8001144 <CS43_Init+0x220>)
 8001060:	785b      	ldrb	r3, [r3, #1]
 8001062:	f023 030f 	bic.w	r3, r3, #15
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b36      	ldr	r3, [pc, #216]	@ (8001144 <CS43_Init+0x220>)
 800106a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 800106c:	4b35      	ldr	r3, [pc, #212]	@ (8001144 <CS43_Init+0x220>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b33      	ldr	r3, [pc, #204]	@ (8001144 <CS43_Init+0x220>)
 8001078:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 800107a:	4933      	ldr	r1, [pc, #204]	@ (8001148 <CS43_Init+0x224>)
 800107c:	2009      	movs	r0, #9
 800107e:	f7ff ff11 	bl	8000ea4 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8001082:	4931      	ldr	r1, [pc, #196]	@ (8001148 <CS43_Init+0x224>)
 8001084:	200e      	movs	r0, #14
 8001086:	f7ff ff2b 	bl	8000ee0 <read_register>
	if(outputMode == MODE_ANALOG_AUDIO)
 800108a:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800108e:	2b01      	cmp	r3, #1
 8001090:	d123      	bne.n	80010da <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8001092:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <CS43_Init+0x220>)
 8001094:	785b      	ldrb	r3, [r3, #1]
 8001096:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b29      	ldr	r3, [pc, #164]	@ (8001144 <CS43_Init+0x220>)
 800109e:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80010a0:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <CS43_Init+0x220>)
 80010a2:	785b      	ldrb	r3, [r3, #1]
 80010a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <CS43_Init+0x220>)
 80010ac:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80010ae:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <CS43_Init+0x220>)
 80010b0:	785b      	ldrb	r3, [r3, #1]
 80010b2:	f023 0320 	bic.w	r3, r3, #32
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <CS43_Init+0x220>)
 80010ba:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80010bc:	4b21      	ldr	r3, [pc, #132]	@ (8001144 <CS43_Init+0x220>)
 80010be:	785b      	ldrb	r3, [r3, #1]
 80010c0:	f023 0310 	bic.w	r3, r3, #16
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <CS43_Init+0x220>)
 80010c8:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80010ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <CS43_Init+0x220>)
 80010cc:	785b      	ldrb	r3, [r3, #1]
 80010ce:	f023 0308 	bic.w	r3, r3, #8
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <CS43_Init+0x220>)
 80010d6:	705a      	strb	r2, [r3, #1]
 80010d8:	e006      	b.n	80010e8 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80010da:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <CS43_Init+0x220>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80010e8:	4917      	ldr	r1, [pc, #92]	@ (8001148 <CS43_Init+0x224>)
 80010ea:	200e      	movs	r0, #14
 80010ec:	f7ff feda 	bl	8000ea4 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80010f0:	4915      	ldr	r1, [pc, #84]	@ (8001148 <CS43_Init+0x224>)
 80010f2:	200f      	movs	r0, #15
 80010f4:	f7ff fef4 	bl	8000ee0 <read_register>
	iData[1] = 0x00;
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <CS43_Init+0x220>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80010fe:	4912      	ldr	r1, [pc, #72]	@ (8001148 <CS43_Init+0x224>)
 8001100:	200f      	movs	r0, #15
 8001102:	f7ff fecf 	bl	8000ea4 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <CS43_Init+0x220>)
 8001108:	2200      	movs	r2, #0
 800110a:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800110c:	490e      	ldr	r1, [pc, #56]	@ (8001148 <CS43_Init+0x224>)
 800110e:	2014      	movs	r0, #20
 8001110:	f7ff fec8 	bl	8000ea4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001114:	490c      	ldr	r1, [pc, #48]	@ (8001148 <CS43_Init+0x224>)
 8001116:	2015      	movs	r0, #21
 8001118:	f7ff fec4 	bl	8000ea4 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800111c:	490a      	ldr	r1, [pc, #40]	@ (8001148 <CS43_Init+0x224>)
 800111e:	201a      	movs	r0, #26
 8001120:	f7ff fec0 	bl	8000ea4 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8001124:	4908      	ldr	r1, [pc, #32]	@ (8001148 <CS43_Init+0x224>)
 8001126:	201b      	movs	r0, #27
 8001128:	f7ff febc 	bl	8000ea4 <write_register>
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001134:	b004      	add	sp, #16
 8001136:	4770      	bx	lr
 8001138:	200000d8 	.word	0x200000d8
 800113c:	40020c00 	.word	0x40020c00
 8001140:	20000030 	.word	0x20000030
 8001144:	2000002c 	.word	0x2000002c
 8001148:	2000002d 	.word	0x2000002d

0800114c <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d837      	bhi.n	80011cc <CS43_Enable_RightLeft+0x80>
 800115c:	a201      	add	r2, pc, #4	@ (adr r2, 8001164 <CS43_Enable_RightLeft+0x18>)
 800115e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001162:	bf00      	nop
 8001164:	08001175 	.word	0x08001175
 8001168:	0800118b 	.word	0x0800118b
 800116c:	080011a1 	.word	0x080011a1
 8001170:	080011b7 	.word	0x080011b7
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001174:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 8001176:	22c0      	movs	r2, #192	@ 0xc0
 8001178:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800117a:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 800117c:	785b      	ldrb	r3, [r3, #1]
 800117e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 8001186:	705a      	strb	r2, [r3, #1]
			break;
 8001188:	e021      	b.n	80011ce <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 800118c:	2280      	movs	r2, #128	@ 0x80
 800118e:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001190:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 800119c:	705a      	strb	r2, [r3, #1]
			break;
 800119e:	e016      	b.n	80011ce <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011a2:	22c0      	movs	r2, #192	@ 0xc0
 80011a4:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	f043 0320 	orr.w	r3, r3, #32
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011b2:	705a      	strb	r2, [r3, #1]
			break;
 80011b4:	e00b      	b.n	80011ce <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011b8:	2280      	movs	r2, #128	@ 0x80
 80011ba:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011be:	785b      	ldrb	r3, [r3, #1]
 80011c0:	f043 0320 	orr.w	r3, r3, #32
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011c8:	705a      	strb	r2, [r3, #1]
			break;
 80011ca:	e000      	b.n	80011ce <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80011cc:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80011ce:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	f043 030c 	orr.w	r3, r3, #12
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011da:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80011dc:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011de:	785b      	ldrb	r3, [r3, #1]
 80011e0:	f043 0303 	orr.w	r3, r3, #3
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011e8:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80011ea:	4905      	ldr	r1, [pc, #20]	@ (8001200 <CS43_Enable_RightLeft+0xb4>)
 80011ec:	2004      	movs	r0, #4
 80011ee:	f7ff fe59 	bl	8000ea4 <write_register>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000002c 	.word	0x2000002c
 8001200:	2000002d 	.word	0x2000002d

08001204 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	3b32      	subs	r3, #50	@ 0x32
 8001212:	b2db      	uxtb	r3, r3
 8001214:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8001222:	4a16      	ldr	r2, [pc, #88]	@ (800127c <CS43_SetVolume+0x78>)
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8001228:	4915      	ldr	r1, [pc, #84]	@ (8001280 <CS43_SetVolume+0x7c>)
 800122a:	2014      	movs	r0, #20
 800122c:	f7ff fe3a 	bl	8000ea4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001230:	4913      	ldr	r1, [pc, #76]	@ (8001280 <CS43_SetVolume+0x7c>)
 8001232:	2015      	movs	r0, #21
 8001234:	f7ff fe36 	bl	8000ea4 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b64      	cmp	r3, #100	@ 0x64
 800123c:	d80e      	bhi.n	800125c <CS43_SetVolume+0x58>
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <CS43_SetVolume+0x80>)
 800124a:	fb82 1203 	smull	r1, r2, r2, r3
 800124e:	1152      	asrs	r2, r2, #5
 8001250:	17db      	asrs	r3, r3, #31
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	3b18      	subs	r3, #24
 8001258:	b2db      	uxtb	r3, r3
 800125a:	e000      	b.n	800125e <CS43_SetVolume+0x5a>
 800125c:	2318      	movs	r3, #24
 800125e:	4a07      	ldr	r2, [pc, #28]	@ (800127c <CS43_SetVolume+0x78>)
 8001260:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8001262:	4907      	ldr	r1, [pc, #28]	@ (8001280 <CS43_SetVolume+0x7c>)
 8001264:	2020      	movs	r0, #32
 8001266:	f7ff fe1d 	bl	8000ea4 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800126a:	4905      	ldr	r1, [pc, #20]	@ (8001280 <CS43_SetVolume+0x7c>)
 800126c:	2021      	movs	r0, #33	@ 0x21
 800126e:	f7ff fe19 	bl	8000ea4 <write_register>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000002c 	.word	0x2000002c
 8001280:	2000002d 	.word	0x2000002d
 8001284:	51eb851f 	.word	0x51eb851f

08001288 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800128c:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <CS43_Start+0x7c>)
 800128e:	2299      	movs	r2, #153	@ 0x99
 8001290:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8001292:	491d      	ldr	r1, [pc, #116]	@ (8001308 <CS43_Start+0x80>)
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fe05 	bl	8000ea4 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 800129a:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <CS43_Start+0x7c>)
 800129c:	2280      	movs	r2, #128	@ 0x80
 800129e:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80012a0:	4919      	ldr	r1, [pc, #100]	@ (8001308 <CS43_Start+0x80>)
 80012a2:	2047      	movs	r0, #71	@ 0x47
 80012a4:	f7ff fdfe 	bl	8000ea4 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80012a8:	4917      	ldr	r1, [pc, #92]	@ (8001308 <CS43_Start+0x80>)
 80012aa:	2032      	movs	r0, #50	@ 0x32
 80012ac:	f7ff fe18 	bl	8000ee0 <read_register>
	iData[1] |= 0x80;
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <CS43_Start+0x7c>)
 80012b2:	785b      	ldrb	r3, [r3, #1]
 80012b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <CS43_Start+0x7c>)
 80012bc:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80012be:	4912      	ldr	r1, [pc, #72]	@ (8001308 <CS43_Start+0x80>)
 80012c0:	2032      	movs	r0, #50	@ 0x32
 80012c2:	f7ff fdef 	bl	8000ea4 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80012c6:	4910      	ldr	r1, [pc, #64]	@ (8001308 <CS43_Start+0x80>)
 80012c8:	2032      	movs	r0, #50	@ 0x32
 80012ca:	f7ff fe09 	bl	8000ee0 <read_register>
	iData[1] &= ~(0x80);
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <CS43_Start+0x7c>)
 80012d0:	785b      	ldrb	r3, [r3, #1]
 80012d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <CS43_Start+0x7c>)
 80012da:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80012dc:	490a      	ldr	r1, [pc, #40]	@ (8001308 <CS43_Start+0x80>)
 80012de:	2032      	movs	r0, #50	@ 0x32
 80012e0:	f7ff fde0 	bl	8000ea4 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <CS43_Start+0x7c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80012ea:	4907      	ldr	r1, [pc, #28]	@ (8001308 <CS43_Start+0x80>)
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff fdd9 	bl	8000ea4 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80012f2:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <CS43_Start+0x7c>)
 80012f4:	229e      	movs	r2, #158	@ 0x9e
 80012f6:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 80012f8:	4903      	ldr	r1, [pc, #12]	@ (8001308 <CS43_Start+0x80>)
 80012fa:	2002      	movs	r0, #2
 80012fc:	f7ff fdd2 	bl	8000ea4 <write_register>
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000002c 	.word	0x2000002c
 8001308:	2000002d 	.word	0x2000002d

0800130c <CS43_Stop>:

void CS43_Stop(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	iData[1] = 0x01;
 8001310:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <CS43_Stop+0x18>)
 8001312:	2201      	movs	r2, #1
 8001314:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8001316:	4904      	ldr	r1, [pc, #16]	@ (8001328 <CS43_Stop+0x1c>)
 8001318:	2002      	movs	r0, #2
 800131a:	f7ff fdc3 	bl	8000ea4 <write_register>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000002c 	.word	0x2000002c
 8001328:	2000002d 	.word	0x2000002d
 800132c:	00000000 	.word	0x00000000

08001330 <process_buffer>:
int16_t i2s_dma_buffer[I2S_DMA_BUFFER_SIZE];
int nsamples = sizeof(i2s_dma_buffer) / sizeof(i2s_dma_buffer[0]);


void process_buffer(int16_t* buff,float freq,double volume)
{
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	ed87 0a02 	vstr	s0, [r7, #8]
 800133c:	ed87 1b00 	vstr	d1, [r7]
    int i = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
    dma_processing = 1;
 8001344:	4b3e      	ldr	r3, [pc, #248]	@ (8001440 <process_buffer+0x110>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
    double t = 0.0f;
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double f = (2*PI*(freq/48000.0));
 8001356:	68b8      	ldr	r0, [r7, #8]
 8001358:	f7ff f8a2 	bl	80004a0 <__aeabi_f2d>
 800135c:	a332      	add	r3, pc, #200	@ (adr r3, 8001428 <process_buffer+0xf8>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff fa1f 	bl	80007a4 <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	a330      	add	r3, pc, #192	@ (adr r3, 8001430 <process_buffer+0x100>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f8ec 	bl	8000550 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(i < 2*I2S_DMA_BUFFER_SAMPLES) {
 8001380:	e044      	b.n	800140c <process_buffer+0xdc>
//           buff[i] = 100*sin(t);
//           buff[i+1] = buff[i];
//           t = t + (2*PI/I2S_DMA_BUFFER_SAMPLES);
//           i += 2;

		   buff[i] = 2047*volume*(sin(f*i)+1);
 8001382:	a32d      	add	r3, pc, #180	@ (adr r3, 8001438 <process_buffer+0x108>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	e9d7 0100 	ldrd	r0, r1, [r7]
 800138c:	f7ff f8e0 	bl	8000550 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4614      	mov	r4, r2
 8001396:	461d      	mov	r5, r3
 8001398:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800139a:	f7ff f86f 	bl	800047c <__aeabi_i2d>
 800139e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013a2:	f7ff f8d5 	bl	8000550 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	ec43 2b17 	vmov	d7, r2, r3
 80013ae:	eeb0 0a47 	vmov.f32	s0, s14
 80013b2:	eef0 0a67 	vmov.f32	s1, s15
 80013b6:	f003 fe8f 	bl	80050d8 <sin>
 80013ba:	ec51 0b10 	vmov	r0, r1, d0
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <process_buffer+0x114>)
 80013c4:	f7fe ff0e 	bl	80001e4 <__adddf3>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4620      	mov	r0, r4
 80013ce:	4629      	mov	r1, r5
 80013d0:	f7ff f8be 	bl	8000550 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	18d4      	adds	r4, r2, r3
 80013e4:	f7ff fb4e 	bl	8000a84 <__aeabi_d2iz>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	8023      	strh	r3, [r4, #0]
		   buff[i+1] = buff[i];// buff[i];
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	441a      	add	r2, r3
 80013f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f8:	3301      	adds	r3, #1
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	68f9      	ldr	r1, [r7, #12]
 80013fe:	440b      	add	r3, r1
 8001400:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001404:	801a      	strh	r2, [r3, #0]
		   i += 2;
 8001406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001408:	3302      	adds	r3, #2
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
    while(i < 2*I2S_DMA_BUFFER_SAMPLES) {
 800140c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001412:	4293      	cmp	r3, r2
 8001414:	ddb5      	ble.n	8001382 <process_buffer+0x52>
    }
    dma_processing = 0;
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <process_buffer+0x110>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	@ 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bdb0      	pop	{r4, r5, r7, pc}
 8001424:	f3af 8000 	nop.w
 8001428:	00000000 	.word	0x00000000
 800142c:	40e77000 	.word	0x40e77000
 8001430:	00000000 	.word	0x00000000
 8001434:	401921fa 	.word	0x401921fa
 8001438:	00000000 	.word	0x00000000
 800143c:	409ffc00 	.word	0x409ffc00
 8001440:	20000180 	.word	0x20000180
 8001444:	3ff00000 	.word	0x3ff00000

08001448 <play_note>:
/**Params:
 * freq:Frequency in Hz
 * duration:Time in milliseconds
 */
void play_note(float freq,uint16_t duration , double volume)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001452:	4603      	mov	r3, r0
 8001454:	ed87 1b00 	vstr	d1, [r7]
 8001458:	817b      	strh	r3, [r7, #10]
	uint8_t res = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]
	process_buffer(i2s_dma_buffer,freq,volume);
 800145e:	ed97 1b00 	vldr	d1, [r7]
 8001462:	ed97 0a03 	vldr	s0, [r7, #12]
 8001466:	480f      	ldr	r0, [pc, #60]	@ (80014a4 <play_note+0x5c>)
 8001468:	f7ff ff62 	bl	8001330 <process_buffer>
	//Please configure the DMA in circular Mode using CUBE MX .ioc file
	full_cpt = 0;
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <play_note+0x60>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
	res = HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)i2s_dma_buffer, nsamples);
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <play_note+0x64>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	490a      	ldr	r1, [pc, #40]	@ (80014a4 <play_note+0x5c>)
 800147c:	480c      	ldr	r0, [pc, #48]	@ (80014b0 <play_note+0x68>)
 800147e:	f002 fbbf 	bl	8003c00 <HAL_I2S_Transmit_DMA>
 8001482:	4603      	mov	r3, r0
 8001484:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(duration);
 8001486:	897b      	ldrh	r3, [r7, #10]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fc3b 	bl	8001d04 <HAL_Delay>

	while(full_cpt == 0);
 800148e:	bf00      	nop
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <play_note+0x60>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0fb      	beq.n	8001490 <play_note+0x48>
	//HAL_I2S_DMAStop(&hi2s3);

}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000018c 	.word	0x2000018c
 80014a8:	2000018a 	.word	0x2000018a
 80014ac:	20000000 	.word	0x20000000
 80014b0:	200000d8 	.word	0x200000d8

080014b4 <stop_dac>:

void stop_dac()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	CS43_SetVolume(0);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff fea3 	bl	8001204 <CS43_SetVolume>
	CS43_Stop();
 80014be:	f7ff ff25 	bl	800130c <CS43_Stop>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2110      	movs	r1, #16
 80014c6:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <stop_dac+0x1c>)
 80014c8:	f001 fa46 	bl	8002958 <HAL_GPIO_WritePin>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40020c00 	.word	0x40020c00

080014d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b095      	sub	sp, #84	@ 0x54
 80014d8:	af12      	add	r7, sp, #72	@ 0x48

  /* USER CODE BEGIN 1 */
	sample_dt = F_OUT/F_SAMPLE;
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <main+0x70>)
 80014dc:	f04f 5274 	mov.w	r2, #1023410176	@ 0x3d000000
 80014e0:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <main+0x74>)
 80014e4:	2220      	movs	r2, #32
 80014e6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e8:	f000 fb9a 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ec:	f000 f834 	bl	8001558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f0:	f000 f918 	bl	8001724 <MX_GPIO_Init>
  MX_DMA_Init();
 80014f4:	f000 f8f6 	bl	80016e4 <MX_DMA_Init>
  MX_I2C1_Init();
 80014f8:	f000 f898 	bl	800162c <MX_I2C1_Init>
  MX_I2S3_Init();
 80014fc:	f000 f8c4 	bl	8001688 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
 	CS43_Init(hi2c1, MODE_I2S);
 8001500:	4c12      	ldr	r4, [pc, #72]	@ (800154c <main+0x78>)
 8001502:	2300      	movs	r3, #0
 8001504:	9311      	str	r3, [sp, #68]	@ 0x44
 8001506:	4668      	mov	r0, sp
 8001508:	f104 0310 	add.w	r3, r4, #16
 800150c:	2244      	movs	r2, #68	@ 0x44
 800150e:	4619      	mov	r1, r3
 8001510:	f003 fdd2 	bl	80050b8 <memcpy>
 8001514:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001518:	f7ff fd04 	bl	8000f24 <CS43_Init>
 	CS43_SetVolume(1); //0 - 100,, 40
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff fe71 	bl	8001204 <CS43_SetVolume>
 	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8001522:	2003      	movs	r0, #3
 8001524:	f7ff fe12 	bl	800114c <CS43_Enable_RightLeft>
 	CS43_Start();
 8001528:	f7ff feae 	bl	8001288 <CS43_Start>

    HAL_StatusTypeDef res;
   uint8_t temp = full_cpt;
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <main+0x7c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	71fb      	strb	r3, [r7, #7]
   //test_notes();

   play_melody(mary_lamb_melody, MARY_LAMB_LENGTH);
 8001532:	211a      	movs	r1, #26
 8001534:	4807      	ldr	r0, [pc, #28]	@ (8001554 <main+0x80>)
 8001536:	f000 f981 	bl	800183c <play_melody>

   stop_dac();
 800153a:	f7ff ffbb 	bl	80014b4 <stop_dac>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800153e:	bf00      	nop
 8001540:	e7fd      	b.n	800153e <main+0x6a>
 8001542:	bf00      	nop
 8001544:	20000184 	.word	0x20000184
 8001548:	20000188 	.word	0x20000188
 800154c:	20000084 	.word	0x20000084
 8001550:	2000018a 	.word	0x2000018a
 8001554:	08006150 	.word	0x08006150

08001558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b094      	sub	sp, #80	@ 0x50
 800155c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	2230      	movs	r2, #48	@ 0x30
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f003 fd7a 	bl	8005060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	4b28      	ldr	r3, [pc, #160]	@ (8001624 <SystemClock_Config+0xcc>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001584:	4a27      	ldr	r2, [pc, #156]	@ (8001624 <SystemClock_Config+0xcc>)
 8001586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800158a:	6413      	str	r3, [r2, #64]	@ 0x40
 800158c:	4b25      	ldr	r3, [pc, #148]	@ (8001624 <SystemClock_Config+0xcc>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <SystemClock_Config+0xd0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a21      	ldr	r2, [pc, #132]	@ (8001628 <SystemClock_Config+0xd0>)
 80015a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <SystemClock_Config+0xd0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b8:	2301      	movs	r3, #1
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015bc:	2310      	movs	r3, #16
 80015be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c0:	2302      	movs	r3, #2
 80015c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015c8:	2308      	movs	r3, #8
 80015ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80015cc:	23c0      	movs	r3, #192	@ 0xc0
 80015ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015d0:	2304      	movs	r3, #4
 80015d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80015d4:	2308      	movs	r3, #8
 80015d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d8:	f107 0320 	add.w	r3, r7, #32
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 ff69 	bl	80044b4 <HAL_RCC_OscConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015e8:	f000 f922 	bl	8001830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ec:	230f      	movs	r3, #15
 80015ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f0:	2302      	movs	r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2103      	movs	r1, #3
 800160a:	4618      	mov	r0, r3
 800160c:	f003 f9ca 	bl	80049a4 <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001616:	f000 f90b 	bl	8001830 <Error_Handler>
  }
}
 800161a:	bf00      	nop
 800161c:	3750      	adds	r7, #80	@ 0x50
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40007000 	.word	0x40007000

0800162c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <MX_I2C1_Init+0x50>)
 8001632:	4a13      	ldr	r2, [pc, #76]	@ (8001680 <MX_I2C1_Init+0x54>)
 8001634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <MX_I2C1_Init+0x50>)
 8001638:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <MX_I2C1_Init+0x58>)
 800163a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <MX_I2C1_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <MX_I2C1_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <MX_I2C1_Init+0x50>)
 800164a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800164e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001650:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165c:	4b07      	ldr	r3, [pc, #28]	@ (800167c <MX_I2C1_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <MX_I2C1_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	@ (800167c <MX_I2C1_Init+0x50>)
 800166a:	f001 f98f 	bl	800298c <HAL_I2C_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001674:	f000 f8dc 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000084 	.word	0x20000084
 8001680:	40005400 	.word	0x40005400
 8001684:	000186a0 	.word	0x000186a0

08001688 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <MX_I2S3_Init+0x54>)
 800168e:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <MX_I2S3_Init+0x58>)
 8001690:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <MX_I2S3_Init+0x54>)
 8001694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001698:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <MX_I2S3_Init+0x54>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80016a0:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_I2S3_Init+0x54>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <MX_I2S3_Init+0x54>)
 80016a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <MX_I2S3_Init+0x54>)
 80016b0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80016b4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_I2S3_Init+0x54>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <MX_I2S3_Init+0x54>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_I2S3_Init+0x54>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	@ (80016dc <MX_I2S3_Init+0x54>)
 80016ca:	f002 f959 	bl	8003980 <HAL_I2S_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80016d4:	f000 f8ac 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200000d8 	.word	0x200000d8
 80016e0:	40003c00 	.word	0x40003c00

080016e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <MX_DMA_Init+0x3c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001720 <MX_DMA_Init+0x3c>)
 80016f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <MX_DMA_Init+0x3c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2010      	movs	r0, #16
 800170c:	f000 fbf9 	bl	8001f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001710:	2010      	movs	r0, #16
 8001712:	f000 fc12 	bl	8001f3a <HAL_NVIC_EnableIRQ>

}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	@ 0x28
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b2d      	ldr	r3, [pc, #180]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a2c      	ldr	r2, [pc, #176]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b2a      	ldr	r3, [pc, #168]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b26      	ldr	r3, [pc, #152]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a25      	ldr	r2, [pc, #148]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b23      	ldr	r3, [pc, #140]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a1e      	ldr	r2, [pc, #120]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a17      	ldr	r2, [pc, #92]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a10      	ldr	r2, [pc, #64]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <MX_GPIO_Init+0xd0>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2110      	movs	r1, #16
 80017ca:	480b      	ldr	r0, [pc, #44]	@ (80017f8 <MX_GPIO_Init+0xd4>)
 80017cc:	f001 f8c4 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017d0:	2310      	movs	r3, #16
 80017d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	4804      	ldr	r0, [pc, #16]	@ (80017f8 <MX_GPIO_Init+0xd4>)
 80017e8:	f000 ff32 	bl	8002650 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	@ 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020c00 	.word	0x40020c00

080017fc <HAL_I2S_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
//   else
//   {
// 	 process_buffer(&i2s_dma_buffer[2*I2S_DMA_BUFFER_SAMPLES]);
// 	 full_cpt = 1;
//   }
	full_cpt = 1;
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <HAL_I2S_TxCpltCallback+0x1c>)
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	2000018a 	.word	0x2000018a

0800181c <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
//   else
//   {
//	  process_buffer(&i2s_dma_buffer[0]);
//	   half_cpt = 1;
//   }
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <Error_Handler+0x8>

0800183c <play_melody>:
    {D4, QUARTER_NOTE, VOLUME_PIANO, STACCATO},
    {C4, HALF_NOTE, VOLUME_PIANO, NORMAL} // Final note is soft
};

void play_melody(const melody_s* mel,int len)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
	for(int i=0;i<len;i++)
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e02f      	b.n	80018ac <play_melody+0x70>
	{
		play_note( mel[i].frequency , mel[i].duration * 1000 , mel[i].volume );
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f95a 	bl	8000b14 <__aeabi_d2f>
 8001860:	4604      	mov	r4, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	015b      	lsls	r3, r3, #5
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <play_melody+0x84>)
 8001874:	f7fe fe6c 	bl	8000550 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f928 	bl	8000ad4 <__aeabi_d2uiz>
 8001884:	4603      	mov	r3, r0
 8001886:	b299      	uxth	r1, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	015b      	lsls	r3, r3, #5
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	ed93 7b04 	vldr	d7, [r3, #16]
 8001894:	eeb0 1a47 	vmov.f32	s2, s14
 8001898:	eef0 1a67 	vmov.f32	s3, s15
 800189c:	4608      	mov	r0, r1
 800189e:	ee00 4a10 	vmov	s0, r4
 80018a2:	f7ff fdd1 	bl	8001448 <play_note>
	for(int i=0;i<len;i++)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3301      	adds	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dbcb      	blt.n	800184c <play_melody+0x10>
	}
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	bf00      	nop
 80018c0:	408f4000 	.word	0x408f4000

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001910 <HAL_MspInit+0x4c>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018da:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <HAL_MspInit+0x4c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001902:	2007      	movs	r0, #7
 8001904:	f000 faf2 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	@ 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a19      	ldr	r2, [pc, #100]	@ (8001998 <HAL_I2C_MspInit+0x84>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d12c      	bne.n	8001990 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b18      	ldr	r3, [pc, #96]	@ (800199c <HAL_I2C_MspInit+0x88>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a17      	ldr	r2, [pc, #92]	@ (800199c <HAL_I2C_MspInit+0x88>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <HAL_I2C_MspInit+0x88>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001952:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001958:	2312      	movs	r3, #18
 800195a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001964:	2304      	movs	r3, #4
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <HAL_I2C_MspInit+0x8c>)
 8001970:	f000 fe6e 	bl	8002650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <HAL_I2C_MspInit+0x88>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	4a07      	ldr	r2, [pc, #28]	@ (800199c <HAL_I2C_MspInit+0x88>)
 800197e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001982:	6413      	str	r3, [r2, #64]	@ 0x40
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_I2C_MspInit+0x88>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001990:	bf00      	nop
 8001992:	3728      	adds	r7, #40	@ 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40005400 	.word	0x40005400
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020400 	.word	0x40020400

080019a4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b090      	sub	sp, #64	@ 0x40
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001b08 <HAL_I2S_MspInit+0x164>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	f040 8093 	bne.w	8001b00 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80019da:	2301      	movs	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80019de:	23c8      	movs	r3, #200	@ 0xc8
 80019e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80019e2:	2308      	movs	r3, #8
 80019e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 80019e6:	2304      	movs	r3, #4
 80019e8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 f9e4 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 80019fa:	f7ff ff19 	bl	8001830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b42      	ldr	r3, [pc, #264]	@ (8001b0c <HAL_I2S_MspInit+0x168>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	4a41      	ldr	r2, [pc, #260]	@ (8001b0c <HAL_I2S_MspInit+0x168>)
 8001a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b0c <HAL_I2S_MspInit+0x168>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b0c <HAL_I2S_MspInit+0x168>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a3a      	ldr	r2, [pc, #232]	@ (8001b0c <HAL_I2S_MspInit+0x168>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b38      	ldr	r3, [pc, #224]	@ (8001b0c <HAL_I2S_MspInit+0x168>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b34      	ldr	r3, [pc, #208]	@ (8001b0c <HAL_I2S_MspInit+0x168>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a33      	ldr	r2, [pc, #204]	@ (8001b0c <HAL_I2S_MspInit+0x168>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b31      	ldr	r3, [pc, #196]	@ (8001b0c <HAL_I2S_MspInit+0x168>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a52:	2310      	movs	r3, #16
 8001a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a62:	2306      	movs	r3, #6
 8001a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4828      	ldr	r0, [pc, #160]	@ (8001b10 <HAL_I2S_MspInit+0x16c>)
 8001a6e:	f000 fdef 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001a72:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a84:	2306      	movs	r3, #6
 8001a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4821      	ldr	r0, [pc, #132]	@ (8001b14 <HAL_I2S_MspInit+0x170>)
 8001a90:	f000 fdde 	bl	8002650 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001a94:	4b20      	ldr	r3, [pc, #128]	@ (8001b18 <HAL_I2S_MspInit+0x174>)
 8001a96:	4a21      	ldr	r2, [pc, #132]	@ (8001b1c <HAL_I2S_MspInit+0x178>)
 8001a98:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <HAL_I2S_MspInit+0x174>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b18 <HAL_I2S_MspInit+0x174>)
 8001aa2:	2240      	movs	r2, #64	@ 0x40
 8001aa4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <HAL_I2S_MspInit+0x174>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001aac:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <HAL_I2S_MspInit+0x174>)
 8001aae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ab2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab4:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <HAL_I2S_MspInit+0x174>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aba:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <HAL_I2S_MspInit+0x174>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001ac0:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_I2S_MspInit+0x174>)
 8001ac2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ac6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <HAL_I2S_MspInit+0x174>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ace:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_I2S_MspInit+0x174>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001ad4:	4810      	ldr	r0, [pc, #64]	@ (8001b18 <HAL_I2S_MspInit+0x174>)
 8001ad6:	f000 fa4b 	bl	8001f70 <HAL_DMA_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_I2S_MspInit+0x140>
    {
      Error_Handler();
 8001ae0:	f7ff fea6 	bl	8001830 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8001b18 <HAL_I2S_MspInit+0x174>)
 8001ae8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001aea:	4a0b      	ldr	r2, [pc, #44]	@ (8001b18 <HAL_I2S_MspInit+0x174>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2033      	movs	r0, #51	@ 0x33
 8001af6:	f000 fa04 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001afa:	2033      	movs	r0, #51	@ 0x33
 8001afc:	f000 fa1d 	bl	8001f3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b00:	bf00      	nop
 8001b02:	3740      	adds	r7, #64	@ 0x40
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40003c00 	.word	0x40003c00
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020800 	.word	0x40020800
 8001b18:	20000120 	.word	0x20000120
 8001b1c:	40026088 	.word	0x40026088

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <NMI_Handler+0x4>

08001b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <MemManage_Handler+0x4>

08001b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b76:	f000 f8a5 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001b84:	4802      	ldr	r0, [pc, #8]	@ (8001b90 <DMA1_Stream5_IRQHandler+0x10>)
 8001b86:	f000 faf9 	bl	800217c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000120 	.word	0x20000120

08001b94 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001b98:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <SPI3_IRQHandler+0x10>)
 8001b9a:	f002 f8d5 	bl	8003d48 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200000d8 	.word	0x200000d8

08001ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <SystemInit+0x20>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bb2:	4a05      	ldr	r2, [pc, #20]	@ (8001bc8 <SystemInit+0x20>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bd0:	f7ff ffea 	bl	8001ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd4:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bd6:	490d      	ldr	r1, [pc, #52]	@ (8001c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bec:	4c0a      	ldr	r4, [pc, #40]	@ (8001c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f003 fa39 	bl	8005070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfe:	f7ff fc69 	bl	80014d4 <main>
  bx  lr    
 8001c02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c0c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001c10:	08006698 	.word	0x08006698
  ldr r2, =_sbss
 8001c14:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c18:	20013a10 	.word	0x20013a10

08001c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c24:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	@ (8001c60 <HAL_Init+0x40>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	@ (8001c60 <HAL_Init+0x40>)
 8001c36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <HAL_Init+0x40>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 f94f 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fe36 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f967 	bl	8001f56 <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 f92f 	bl	8001f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	@ (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	2000000c 	.word	0x2000000c
 8001cc0:	20000008 	.word	0x20000008

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	2000000c 	.word	0x2000000c
 8001ce8:	20013a0c 	.word	0x20013a0c

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20013a0c 	.word	0x20013a0c

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_Delay+0x44>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000000c 	.word	0x2000000c

08001d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	@ (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	@ (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	@ (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	@ 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	@ 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff8e 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff29 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff3e 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff8e 	bl	8001e40 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5d 	bl	8001dec <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff31 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffa2 	bl	8001ea8 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff feb6 	bl	8001cec <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e099      	b.n	80020c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fac:	e00f      	b.n	8001fce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fae:	f7ff fe9d 	bl	8001cec <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d908      	bls.n	8001fce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e078      	b.n	80020c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1e8      	bne.n	8001fae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	4b38      	ldr	r3, [pc, #224]	@ (80020c8 <HAL_DMA_Init+0x158>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	2b04      	cmp	r3, #4
 8002026:	d107      	bne.n	8002038 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002030:	4313      	orrs	r3, r2
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4313      	orrs	r3, r2
 8002036:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f023 0307 	bic.w	r3, r3, #7
 800204e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	2b04      	cmp	r3, #4
 8002060:	d117      	bne.n	8002092 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00e      	beq.n	8002092 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fa6f 	bl	8002558 <DMA_CheckFifoParam>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2240      	movs	r2, #64	@ 0x40
 8002084:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800208e:	2301      	movs	r3, #1
 8002090:	e016      	b.n	80020c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa26 	bl	80024ec <DMA_CalcBaseAndBitshift>
 80020a0:	4603      	mov	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a8:	223f      	movs	r2, #63	@ 0x3f
 80020aa:	409a      	lsls	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	f010803f 	.word	0xf010803f

080020cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_DMA_Start_IT+0x26>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e040      	b.n	8002174 <HAL_DMA_Start_IT+0xa8>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d12f      	bne.n	8002166 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2202      	movs	r2, #2
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f9b8 	bl	8002490 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002124:	223f      	movs	r2, #63	@ 0x3f
 8002126:	409a      	lsls	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0216 	orr.w	r2, r2, #22
 800213a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0208 	orr.w	r2, r2, #8
 8002152:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	e005      	b.n	8002172 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800216e:	2302      	movs	r3, #2
 8002170:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002172:	7dfb      	ldrb	r3, [r7, #23]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002188:	4b8e      	ldr	r3, [pc, #568]	@ (80023c4 <HAL_DMA_IRQHandler+0x248>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a8e      	ldr	r2, [pc, #568]	@ (80023c8 <HAL_DMA_IRQHandler+0x24c>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0a9b      	lsrs	r3, r3, #10
 8002194:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a6:	2208      	movs	r2, #8
 80021a8:	409a      	lsls	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d01a      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0204 	bic.w	r2, r2, #4
 80021ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d4:	2208      	movs	r2, #8
 80021d6:	409a      	lsls	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ec:	2201      	movs	r2, #1
 80021ee:	409a      	lsls	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d012      	beq.n	800221e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220a:	2201      	movs	r2, #1
 800220c:	409a      	lsls	r2, r3
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002216:	f043 0202 	orr.w	r2, r3, #2
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002222:	2204      	movs	r2, #4
 8002224:	409a      	lsls	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d012      	beq.n	8002254 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00b      	beq.n	8002254 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002240:	2204      	movs	r2, #4
 8002242:	409a      	lsls	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002258:	2210      	movs	r2, #16
 800225a:	409a      	lsls	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d043      	beq.n	80022ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d03c      	beq.n	80022ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	2210      	movs	r2, #16
 8002278:	409a      	lsls	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d018      	beq.n	80022be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d108      	bne.n	80022ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d024      	beq.n	80022ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
 80022aa:	e01f      	b.n	80022ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01b      	beq.n	80022ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
 80022bc:	e016      	b.n	80022ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d107      	bne.n	80022dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0208 	bic.w	r2, r2, #8
 80022da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f0:	2220      	movs	r2, #32
 80022f2:	409a      	lsls	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 808f 	beq.w	800241c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8087 	beq.w	800241c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002312:	2220      	movs	r2, #32
 8002314:	409a      	lsls	r2, r3
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b05      	cmp	r3, #5
 8002324:	d136      	bne.n	8002394 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0216 	bic.w	r2, r2, #22
 8002334:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002344:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d103      	bne.n	8002356 <HAL_DMA_IRQHandler+0x1da>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0208 	bic.w	r2, r2, #8
 8002364:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236a:	223f      	movs	r2, #63	@ 0x3f
 800236c:	409a      	lsls	r2, r3
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002386:	2b00      	cmp	r3, #0
 8002388:	d07e      	beq.n	8002488 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
        }
        return;
 8002392:	e079      	b.n	8002488 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01d      	beq.n	80023de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10d      	bne.n	80023cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d031      	beq.n	800241c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	4798      	blx	r3
 80023c0:	e02c      	b.n	800241c <HAL_DMA_IRQHandler+0x2a0>
 80023c2:	bf00      	nop
 80023c4:	20000004 	.word	0x20000004
 80023c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d023      	beq.n	800241c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
 80023dc:	e01e      	b.n	800241c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10f      	bne.n	800240c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0210 	bic.w	r2, r2, #16
 80023fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002420:	2b00      	cmp	r3, #0
 8002422:	d032      	beq.n	800248a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d022      	beq.n	8002476 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2205      	movs	r2, #5
 8002434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	3301      	adds	r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d307      	bcc.n	8002464 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f2      	bne.n	8002448 <HAL_DMA_IRQHandler+0x2cc>
 8002462:	e000      	b.n	8002466 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002464:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
 8002486:	e000      	b.n	800248a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002488:	bf00      	nop
    }
  }
}
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b40      	cmp	r3, #64	@ 0x40
 80024bc:	d108      	bne.n	80024d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024ce:	e007      	b.n	80024e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	60da      	str	r2, [r3, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	3b10      	subs	r3, #16
 80024fc:	4a14      	ldr	r2, [pc, #80]	@ (8002550 <DMA_CalcBaseAndBitshift+0x64>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002506:	4a13      	ldr	r2, [pc, #76]	@ (8002554 <DMA_CalcBaseAndBitshift+0x68>)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d909      	bls.n	800252e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	1d1a      	adds	r2, r3, #4
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	659a      	str	r2, [r3, #88]	@ 0x58
 800252c:	e007      	b.n	800253e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002536:	f023 0303 	bic.w	r3, r3, #3
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	aaaaaaab 	.word	0xaaaaaaab
 8002554:	080064a8 	.word	0x080064a8

08002558 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d11f      	bne.n	80025b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b03      	cmp	r3, #3
 8002576:	d856      	bhi.n	8002626 <DMA_CheckFifoParam+0xce>
 8002578:	a201      	add	r2, pc, #4	@ (adr r2, 8002580 <DMA_CheckFifoParam+0x28>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	08002591 	.word	0x08002591
 8002584:	080025a3 	.word	0x080025a3
 8002588:	08002591 	.word	0x08002591
 800258c:	08002627 	.word	0x08002627
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002594:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d046      	beq.n	800262a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a0:	e043      	b.n	800262a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025aa:	d140      	bne.n	800262e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b0:	e03d      	b.n	800262e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ba:	d121      	bne.n	8002600 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d837      	bhi.n	8002632 <DMA_CheckFifoParam+0xda>
 80025c2:	a201      	add	r2, pc, #4	@ (adr r2, 80025c8 <DMA_CheckFifoParam+0x70>)
 80025c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c8:	080025d9 	.word	0x080025d9
 80025cc:	080025df 	.word	0x080025df
 80025d0:	080025d9 	.word	0x080025d9
 80025d4:	080025f1 	.word	0x080025f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      break;
 80025dc:	e030      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d025      	beq.n	8002636 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ee:	e022      	b.n	8002636 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025f8:	d11f      	bne.n	800263a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025fe:	e01c      	b.n	800263a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d903      	bls.n	800260e <DMA_CheckFifoParam+0xb6>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b03      	cmp	r3, #3
 800260a:	d003      	beq.n	8002614 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800260c:	e018      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
      break;
 8002612:	e015      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00e      	beq.n	800263e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      break;
 8002624:	e00b      	b.n	800263e <DMA_CheckFifoParam+0xe6>
      break;
 8002626:	bf00      	nop
 8002628:	e00a      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      break;
 800262a:	bf00      	nop
 800262c:	e008      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
 8002630:	e006      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      break;
 8002632:	bf00      	nop
 8002634:	e004      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      break;
 8002636:	bf00      	nop
 8002638:	e002      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      break;   
 800263a:	bf00      	nop
 800263c:	e000      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      break;
 800263e:	bf00      	nop
    }
  } 
  
  return status; 
 8002640:	7bfb      	ldrb	r3, [r7, #15]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	@ 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e159      	b.n	8002920 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	429a      	cmp	r2, r3
 8002686:	f040 8148 	bne.w	800291a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d005      	beq.n	80026a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d130      	bne.n	8002704 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d8:	2201      	movs	r2, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 0201 	and.w	r2, r3, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b03      	cmp	r3, #3
 800270e:	d017      	beq.n	8002740 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d123      	bne.n	8002794 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	220f      	movs	r2, #15
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	69b9      	ldr	r1, [r7, #24]
 8002790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0203 	and.w	r2, r3, #3
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80a2 	beq.w	800291a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b57      	ldr	r3, [pc, #348]	@ (8002938 <HAL_GPIO_Init+0x2e8>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	4a56      	ldr	r2, [pc, #344]	@ (8002938 <HAL_GPIO_Init+0x2e8>)
 80027e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027e6:	4b54      	ldr	r3, [pc, #336]	@ (8002938 <HAL_GPIO_Init+0x2e8>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f2:	4a52      	ldr	r2, [pc, #328]	@ (800293c <HAL_GPIO_Init+0x2ec>)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3302      	adds	r3, #2
 80027fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	220f      	movs	r2, #15
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a49      	ldr	r2, [pc, #292]	@ (8002940 <HAL_GPIO_Init+0x2f0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d019      	beq.n	8002852 <HAL_GPIO_Init+0x202>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a48      	ldr	r2, [pc, #288]	@ (8002944 <HAL_GPIO_Init+0x2f4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_GPIO_Init+0x1fe>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a47      	ldr	r2, [pc, #284]	@ (8002948 <HAL_GPIO_Init+0x2f8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00d      	beq.n	800284a <HAL_GPIO_Init+0x1fa>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a46      	ldr	r2, [pc, #280]	@ (800294c <HAL_GPIO_Init+0x2fc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <HAL_GPIO_Init+0x1f6>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a45      	ldr	r2, [pc, #276]	@ (8002950 <HAL_GPIO_Init+0x300>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_GPIO_Init+0x1f2>
 800283e:	2304      	movs	r3, #4
 8002840:	e008      	b.n	8002854 <HAL_GPIO_Init+0x204>
 8002842:	2307      	movs	r3, #7
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x204>
 8002846:	2303      	movs	r3, #3
 8002848:	e004      	b.n	8002854 <HAL_GPIO_Init+0x204>
 800284a:	2302      	movs	r3, #2
 800284c:	e002      	b.n	8002854 <HAL_GPIO_Init+0x204>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_GPIO_Init+0x204>
 8002852:	2300      	movs	r3, #0
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	f002 0203 	and.w	r2, r2, #3
 800285a:	0092      	lsls	r2, r2, #2
 800285c:	4093      	lsls	r3, r2
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002864:	4935      	ldr	r1, [pc, #212]	@ (800293c <HAL_GPIO_Init+0x2ec>)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	3302      	adds	r3, #2
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002872:	4b38      	ldr	r3, [pc, #224]	@ (8002954 <HAL_GPIO_Init+0x304>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002896:	4a2f      	ldr	r2, [pc, #188]	@ (8002954 <HAL_GPIO_Init+0x304>)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800289c:	4b2d      	ldr	r3, [pc, #180]	@ (8002954 <HAL_GPIO_Init+0x304>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c0:	4a24      	ldr	r2, [pc, #144]	@ (8002954 <HAL_GPIO_Init+0x304>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028c6:	4b23      	ldr	r3, [pc, #140]	@ (8002954 <HAL_GPIO_Init+0x304>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002954 <HAL_GPIO_Init+0x304>)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f0:	4b18      	ldr	r3, [pc, #96]	@ (8002954 <HAL_GPIO_Init+0x304>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002914:	4a0f      	ldr	r2, [pc, #60]	@ (8002954 <HAL_GPIO_Init+0x304>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3301      	adds	r3, #1
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	2b0f      	cmp	r3, #15
 8002924:	f67f aea2 	bls.w	800266c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	3724      	adds	r7, #36	@ 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	40013800 	.word	0x40013800
 8002940:	40020000 	.word	0x40020000
 8002944:	40020400 	.word	0x40020400
 8002948:	40020800 	.word	0x40020800
 800294c:	40020c00 	.word	0x40020c00
 8002950:	40021000 	.word	0x40021000
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002974:	e003      	b.n	800297e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	041a      	lsls	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	619a      	str	r2, [r3, #24]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e12b      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe ffae 	bl	8001914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	@ 0x24
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029f0:	f002 f9d0 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 80029f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a81      	ldr	r2, [pc, #516]	@ (8002c00 <HAL_I2C_Init+0x274>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d807      	bhi.n	8002a10 <HAL_I2C_Init+0x84>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a80      	ldr	r2, [pc, #512]	@ (8002c04 <HAL_I2C_Init+0x278>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e006      	b.n	8002a1e <HAL_I2C_Init+0x92>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a7d      	ldr	r2, [pc, #500]	@ (8002c08 <HAL_I2C_Init+0x27c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	bf94      	ite	ls
 8002a18:	2301      	movls	r3, #1
 8002a1a:	2300      	movhi	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0e7      	b.n	8002bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a78      	ldr	r2, [pc, #480]	@ (8002c0c <HAL_I2C_Init+0x280>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a6a      	ldr	r2, [pc, #424]	@ (8002c00 <HAL_I2C_Init+0x274>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d802      	bhi.n	8002a60 <HAL_I2C_Init+0xd4>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	e009      	b.n	8002a74 <HAL_I2C_Init+0xe8>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	4a69      	ldr	r2, [pc, #420]	@ (8002c10 <HAL_I2C_Init+0x284>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	3301      	adds	r3, #1
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	495c      	ldr	r1, [pc, #368]	@ (8002c00 <HAL_I2C_Init+0x274>)
 8002a90:	428b      	cmp	r3, r1
 8002a92:	d819      	bhi.n	8002ac8 <HAL_I2C_Init+0x13c>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e59      	subs	r1, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa2:	1c59      	adds	r1, r3, #1
 8002aa4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_I2C_Init+0x138>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1e59      	subs	r1, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac2:	e051      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	e04f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d111      	bne.n	8002af4 <HAL_I2C_Init+0x168>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	440b      	add	r3, r1
 8002ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e012      	b.n	8002b1a <HAL_I2C_Init+0x18e>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	0099      	lsls	r1, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Init+0x196>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e022      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10e      	bne.n	8002b48 <HAL_I2C_Init+0x1bc>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e58      	subs	r0, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	440b      	add	r3, r1
 8002b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b46:	e00f      	b.n	8002b68 <HAL_I2C_Init+0x1dc>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	0099      	lsls	r1, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	6809      	ldr	r1, [r1, #0]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6911      	ldr	r1, [r2, #16]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68d2      	ldr	r2, [r2, #12]
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	000186a0 	.word	0x000186a0
 8002c04:	001e847f 	.word	0x001e847f
 8002c08:	003d08ff 	.word	0x003d08ff
 8002c0c:	431bde83 	.word	0x431bde83
 8002c10:	10624dd3 	.word	0x10624dd3

08002c14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	460b      	mov	r3, r1
 8002c22:	817b      	strh	r3, [r7, #10]
 8002c24:	4613      	mov	r3, r2
 8002c26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff f860 	bl	8001cec <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	f040 80e0 	bne.w	8002dfc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2319      	movs	r3, #25
 8002c42:	2201      	movs	r2, #1
 8002c44:	4970      	ldr	r1, [pc, #448]	@ (8002e08 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fc64 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
 8002c54:	e0d3      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_I2C_Master_Transmit+0x50>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e0cc      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d007      	beq.n	8002c8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2221      	movs	r2, #33	@ 0x21
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	893a      	ldrh	r2, [r7, #8]
 8002cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a50      	ldr	r2, [pc, #320]	@ (8002e0c <HAL_I2C_Master_Transmit+0x1f8>)
 8002cca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ccc:	8979      	ldrh	r1, [r7, #10]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	6a3a      	ldr	r2, [r7, #32]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 face 	bl	8003274 <I2C_MasterRequestWrite>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e08d      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cf8:	e066      	b.n	8002dc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	6a39      	ldr	r1, [r7, #32]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fd22 	bl	8003748 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00d      	beq.n	8002d26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d107      	bne.n	8002d22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e06b      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d11b      	bne.n	8002d9c <HAL_I2C_Master_Transmit+0x188>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d017      	beq.n	8002d9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	6a39      	ldr	r1, [r7, #32]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fd19 	bl	80037d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d107      	bne.n	8002dc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e01a      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d194      	bne.n	8002cfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e000      	b.n	8002dfe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dfc:	2302      	movs	r3, #2
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	00100002 	.word	0x00100002
 8002e0c:	ffff0000 	.word	0xffff0000

08002e10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08c      	sub	sp, #48	@ 0x30
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	817b      	strh	r3, [r7, #10]
 8002e20:	4613      	mov	r3, r2
 8002e22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7fe ff62 	bl	8001cec <HAL_GetTick>
 8002e28:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	f040 8217 	bne.w	8003266 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2319      	movs	r3, #25
 8002e3e:	2201      	movs	r2, #1
 8002e40:	497c      	ldr	r1, [pc, #496]	@ (8003034 <HAL_I2C_Master_Receive+0x224>)
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fb66 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e20a      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2C_Master_Receive+0x50>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e203      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d007      	beq.n	8002e86 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2222      	movs	r2, #34	@ 0x22
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	893a      	ldrh	r2, [r7, #8]
 8002eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a5c      	ldr	r2, [pc, #368]	@ (8003038 <HAL_I2C_Master_Receive+0x228>)
 8002ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ec8:	8979      	ldrh	r1, [r7, #10]
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fa52 	bl	8003378 <I2C_MasterRequestRead>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e1c4      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d113      	bne.n	8002f0e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	623b      	str	r3, [r7, #32]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	623b      	str	r3, [r7, #32]
 8002efa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e198      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d11b      	bne.n	8002f4e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e178      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d11b      	bne.n	8002f8e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	e158      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fb4:	e144      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	f200 80f1 	bhi.w	80031a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d123      	bne.n	8003010 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 fc4b 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e145      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800300e:	e117      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003014:	2b02      	cmp	r3, #2
 8003016:	d14e      	bne.n	80030b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301e:	2200      	movs	r2, #0
 8003020:	4906      	ldr	r1, [pc, #24]	@ (800303c <HAL_I2C_Master_Receive+0x22c>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fa76 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e11a      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
 8003032:	bf00      	nop
 8003034:	00100002 	.word	0x00100002
 8003038:	ffff0000 	.word	0xffff0000
 800303c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800304e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030b4:	e0c4      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030bc:	2200      	movs	r2, #0
 80030be:	496c      	ldr	r1, [pc, #432]	@ (8003270 <HAL_I2C_Master_Receive+0x460>)
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fa27 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0cb      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003118:	2200      	movs	r2, #0
 800311a:	4955      	ldr	r1, [pc, #340]	@ (8003270 <HAL_I2C_Master_Receive+0x460>)
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f9f9 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e09d      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800313a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031a0:	e04e      	b.n	8003240 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fb5e 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e058      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d124      	bne.n	8003240 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d107      	bne.n	800320e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800320c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003244:	2b00      	cmp	r3, #0
 8003246:	f47f aeb6 	bne.w	8002fb6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003266:	2302      	movs	r3, #2
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	3728      	adds	r7, #40	@ 0x28
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	00010004 	.word	0x00010004

08003274 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	460b      	mov	r3, r1
 8003282:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d006      	beq.n	800329e <I2C_MasterRequestWrite+0x2a>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d003      	beq.n	800329e <I2C_MasterRequestWrite+0x2a>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800329c:	d108      	bne.n	80032b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e00b      	b.n	80032c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	2b12      	cmp	r3, #18
 80032b6:	d107      	bne.n	80032c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f91d 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ee:	d103      	bne.n	80032f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e035      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003304:	d108      	bne.n	8003318 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003306:	897b      	ldrh	r3, [r7, #10]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	e01b      	b.n	8003350 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003318:	897b      	ldrh	r3, [r7, #10]
 800331a:	11db      	asrs	r3, r3, #7
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0306 	and.w	r3, r3, #6
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f063 030f 	orn	r3, r3, #15
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	490e      	ldr	r1, [pc, #56]	@ (8003370 <I2C_MasterRequestWrite+0xfc>)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f966 	bl	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e010      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4907      	ldr	r1, [pc, #28]	@ (8003374 <I2C_MasterRequestWrite+0x100>)
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f956 	bl	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	00010008 	.word	0x00010008
 8003374:	00010002 	.word	0x00010002

08003378 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	460b      	mov	r3, r1
 8003386:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800339c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d006      	beq.n	80033b2 <I2C_MasterRequestRead+0x3a>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d003      	beq.n	80033b2 <I2C_MasterRequestRead+0x3a>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033b0:	d108      	bne.n	80033c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e00b      	b.n	80033dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	2b11      	cmp	r3, #17
 80033ca:	d107      	bne.n	80033dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f893 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00d      	beq.n	8003410 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003402:	d103      	bne.n	800340c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e079      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003418:	d108      	bne.n	800342c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800341a:	897b      	ldrh	r3, [r7, #10]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	611a      	str	r2, [r3, #16]
 800342a:	e05f      	b.n	80034ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800342c:	897b      	ldrh	r3, [r7, #10]
 800342e:	11db      	asrs	r3, r3, #7
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f003 0306 	and.w	r3, r3, #6
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f063 030f 	orn	r3, r3, #15
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4930      	ldr	r1, [pc, #192]	@ (800350c <I2C_MasterRequestRead+0x194>)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f8dc 	bl	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e054      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4929      	ldr	r1, [pc, #164]	@ (8003510 <I2C_MasterRequestRead+0x198>)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f8cc 	bl	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e044      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800349e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f831 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034c6:	d103      	bne.n	80034d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ce:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e017      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034d4:	897b      	ldrh	r3, [r7, #10]
 80034d6:	11db      	asrs	r3, r3, #7
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f003 0306 	and.w	r3, r3, #6
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f063 030e 	orn	r3, r3, #14
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4907      	ldr	r1, [pc, #28]	@ (8003510 <I2C_MasterRequestRead+0x198>)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f888 	bl	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	00010008 	.word	0x00010008
 8003510:	00010002 	.word	0x00010002

08003514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003524:	e048      	b.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d044      	beq.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7fe fbdd 	bl	8001cec <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <I2C_WaitOnFlagUntilTimeout+0x30>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d139      	bne.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	0c1b      	lsrs	r3, r3, #16
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d10d      	bne.n	800356a <I2C_WaitOnFlagUntilTimeout+0x56>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	43da      	mvns	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4013      	ands	r3, r2
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	e00c      	b.n	8003584 <I2C_WaitOnFlagUntilTimeout+0x70>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	43da      	mvns	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4013      	ands	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	429a      	cmp	r2, r3
 8003588:	d116      	bne.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e023      	b.n	8003600 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d10d      	bne.n	80035de <I2C_WaitOnFlagUntilTimeout+0xca>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	43da      	mvns	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	e00c      	b.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	43da      	mvns	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d093      	beq.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003616:	e071      	b.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003626:	d123      	bne.n	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003636:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003640:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	f043 0204 	orr.w	r2, r3, #4
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e067      	b.n	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d041      	beq.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003678:	f7fe fb38 	bl	8001cec <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	429a      	cmp	r2, r3
 8003686:	d302      	bcc.n	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d136      	bne.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d10c      	bne.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	43da      	mvns	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e00b      	b.n	80036ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	43da      	mvns	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	4013      	ands	r3, r2
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	f043 0220 	orr.w	r2, r3, #32
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e021      	b.n	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	0c1b      	lsrs	r3, r3, #16
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d10c      	bne.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	43da      	mvns	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e00b      	b.n	8003738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	43da      	mvns	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4013      	ands	r3, r2
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	f47f af6d 	bne.w	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003754:	e034      	b.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f8e3 	bl	8003922 <I2C_IsAcknowledgeFailed>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e034      	b.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d028      	beq.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7fe fabd 	bl	8001cec <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11d      	bne.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378e:	2b80      	cmp	r3, #128	@ 0x80
 8003790:	d016      	beq.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e007      	b.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ca:	2b80      	cmp	r3, #128	@ 0x80
 80037cc:	d1c3      	bne.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e4:	e034      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f89b 	bl	8003922 <I2C_IsAcknowledgeFailed>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e034      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d028      	beq.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7fe fa75 	bl	8001cec <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d11d      	bne.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b04      	cmp	r3, #4
 8003820:	d016      	beq.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e007      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d1c3      	bne.n	80037e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003874:	e049      	b.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b10      	cmp	r3, #16
 8003882:	d119      	bne.n	80038b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0210 	mvn.w	r2, #16
 800388c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e030      	b.n	800391a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b8:	f7fe fa18 	bl	8001cec <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d11d      	bne.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d8:	2b40      	cmp	r3, #64	@ 0x40
 80038da:	d016      	beq.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	f043 0220 	orr.w	r2, r3, #32
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e007      	b.n	800391a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003914:	2b40      	cmp	r3, #64	@ 0x40
 8003916:	d1ae      	bne.n	8003876 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003938:	d11b      	bne.n	8003972 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003942:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e128      	b.n	8003be4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a90      	ldr	r2, [pc, #576]	@ (8003bec <HAL_I2S_Init+0x26c>)
 80039aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7fd fff9 	bl	80019a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039c8:	f023 030f 	bic.w	r3, r3, #15
 80039cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2202      	movs	r2, #2
 80039d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d060      	beq.n	8003aa0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039e6:	2310      	movs	r3, #16
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e001      	b.n	80039f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039ec:	2320      	movs	r3, #32
 80039ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d802      	bhi.n	80039fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039fe:	2001      	movs	r0, #1
 8003a00:	f001 facc 	bl	8004f9c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a04:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a0e:	d125      	bne.n	8003a5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	3305      	adds	r3, #5
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e01f      	b.n	8003a7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	3305      	adds	r3, #5
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	e00e      	b.n	8003a7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a76:	3305      	adds	r3, #5
 8003a78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4a5c      	ldr	r2, [pc, #368]	@ (8003bf0 <HAL_I2S_Init+0x270>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	08db      	lsrs	r3, r3, #3
 8003a84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d902      	bls.n	8003ab4 <HAL_I2S_Init+0x134>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2bff      	cmp	r3, #255	@ 0xff
 8003ab2:	d907      	bls.n	8003ac4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab8:	f043 0210 	orr.w	r2, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e08f      	b.n	8003be4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	ea42 0103 	orr.w	r1, r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ae2:	f023 030f 	bic.w	r3, r3, #15
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6851      	ldr	r1, [r2, #4]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6892      	ldr	r2, [r2, #8]
 8003aee:	4311      	orrs	r1, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68d2      	ldr	r2, [r2, #12]
 8003af4:	4311      	orrs	r1, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6992      	ldr	r2, [r2, #24]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d161      	bne.n	8003bd4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a38      	ldr	r2, [pc, #224]	@ (8003bf4 <HAL_I2S_Init+0x274>)
 8003b14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a37      	ldr	r2, [pc, #220]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2S_Init+0x1a4>
 8003b20:	4b36      	ldr	r3, [pc, #216]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003b22:	e001      	b.n	8003b28 <HAL_I2S_Init+0x1a8>
 8003b24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	4932      	ldr	r1, [pc, #200]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003b30:	428a      	cmp	r2, r1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2S_Init+0x1b8>
 8003b34:	4a31      	ldr	r2, [pc, #196]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003b36:	e001      	b.n	8003b3c <HAL_I2S_Init+0x1bc>
 8003b38:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003b3c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b40:	f023 030f 	bic.w	r3, r3, #15
 8003b44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_I2S_Init+0x1d4>
 8003b50:	4b2a      	ldr	r3, [pc, #168]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003b52:	e001      	b.n	8003b58 <HAL_I2S_Init+0x1d8>
 8003b54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b58:	2202      	movs	r2, #2
 8003b5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a25      	ldr	r2, [pc, #148]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <HAL_I2S_Init+0x1ea>
 8003b66:	4b25      	ldr	r3, [pc, #148]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003b68:	e001      	b.n	8003b6e <HAL_I2S_Init+0x1ee>
 8003b6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b7a:	d003      	beq.n	8003b84 <HAL_I2S_Init+0x204>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d103      	bne.n	8003b8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e001      	b.n	8003b90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003bbc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2S_Init+0x24c>
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003bca:	e001      	b.n	8003bd0 <HAL_I2S_Init+0x250>
 8003bcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bd0:	897a      	ldrh	r2, [r7, #10]
 8003bd2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08003eed 	.word	0x08003eed
 8003bf0:	cccccccd 	.word	0xcccccccd
 8003bf4:	08004001 	.word	0x08004001
 8003bf8:	40003800 	.word	0x40003800
 8003bfc:	40003400 	.word	0x40003400

08003c00 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_I2S_Transmit_DMA+0x1a>
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e08a      	b.n	8003d34 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d001      	beq.n	8003c2e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e082      	b.n	8003d34 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_I2S_Transmit_DMA+0x3e>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e07a      	b.n	8003d34 <HAL_I2S_Transmit_DMA+0x134>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d002      	beq.n	8003c72 <HAL_I2S_Transmit_DMA+0x72>
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d10a      	bne.n	8003c88 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c86:	e005      	b.n	8003c94 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	88fa      	ldrh	r2, [r7, #6]
 8003c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	88fa      	ldrh	r2, [r7, #6]
 8003c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c98:	4a28      	ldr	r2, [pc, #160]	@ (8003d3c <HAL_I2S_Transmit_DMA+0x13c>)
 8003c9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca0:	4a27      	ldr	r2, [pc, #156]	@ (8003d40 <HAL_I2S_Transmit_DMA+0x140>)
 8003ca2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca8:	4a26      	ldr	r2, [pc, #152]	@ (8003d44 <HAL_I2S_Transmit_DMA+0x144>)
 8003caa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003cb4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003cbc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003cc4:	f7fe fa02 	bl	80020cc <HAL_DMA_Start_IT>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00f      	beq.n	8003cee <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd2:	f043 0208 	orr.w	r2, r3, #8
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e022      	b.n	8003d34 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d107      	bne.n	8003d14 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0202 	orr.w	r2, r2, #2
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d107      	bne.n	8003d32 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d30:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	08003dcb 	.word	0x08003dcb
 8003d40:	08003d89 	.word	0x08003d89
 8003d44:	08003de7 	.word	0x08003de7

08003d48 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4798      	blx	r3
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d94:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10e      	bne.n	8003dbc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0202 	bic.w	r2, r2, #2
 8003dac:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f7fd fd1d 	bl	80017fc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7fd fd1f 	bl	800181c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0203 	bic.w	r2, r2, #3
 8003e02:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1c:	f043 0208 	orr.w	r2, r3, #8
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7ff ffa5 	bl	8003d74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	881a      	ldrh	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	1c9a      	adds	r2, r3, #2
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10e      	bne.n	8003e86 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e76:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fd fcbb 	bl	80017fc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	b292      	uxth	r2, r2
 8003ea2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	1c9a      	adds	r2, r3, #2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10e      	bne.n	8003ee4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ed4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ff3e 	bl	8003d60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d13a      	bne.n	8003f7e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d109      	bne.n	8003f26 <I2S_IRQHandler+0x3a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1c:	2b40      	cmp	r3, #64	@ 0x40
 8003f1e:	d102      	bne.n	8003f26 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ffb4 	bl	8003e8e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2c:	2b40      	cmp	r3, #64	@ 0x40
 8003f2e:	d126      	bne.n	8003f7e <I2S_IRQHandler+0x92>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d11f      	bne.n	8003f7e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f4c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f70:	f043 0202 	orr.w	r2, r3, #2
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff fefb 	bl	8003d74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d136      	bne.n	8003ff8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d109      	bne.n	8003fa8 <I2S_IRQHandler+0xbc>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9e:	2b80      	cmp	r3, #128	@ 0x80
 8003fa0:	d102      	bne.n	8003fa8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff ff45 	bl	8003e32 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d122      	bne.n	8003ff8 <I2S_IRQHandler+0x10c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d11b      	bne.n	8003ff8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fce:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fea:	f043 0204 	orr.w	r2, r3, #4
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff febe 	bl	8003d74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a92      	ldr	r2, [pc, #584]	@ (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800401a:	4b92      	ldr	r3, [pc, #584]	@ (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800401c:	e001      	b.n	8004022 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800401e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a8b      	ldr	r2, [pc, #556]	@ (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d101      	bne.n	800403c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004038:	4b8a      	ldr	r3, [pc, #552]	@ (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800403a:	e001      	b.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800403c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800404c:	d004      	beq.n	8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	f040 8099 	bne.w	800418a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	d107      	bne.n	8004072 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f925 	bl	80042bc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b01      	cmp	r3, #1
 800407a:	d107      	bne.n	800408c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f9c8 	bl	800441c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004092:	2b40      	cmp	r3, #64	@ 0x40
 8004094:	d13a      	bne.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d035      	beq.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d101      	bne.n	80040ae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80040aa:	4b6e      	ldr	r3, [pc, #440]	@ (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040ac:	e001      	b.n	80040b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80040ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4969      	ldr	r1, [pc, #420]	@ (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040ba:	428b      	cmp	r3, r1
 80040bc:	d101      	bne.n	80040c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80040be:	4b69      	ldr	r3, [pc, #420]	@ (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040c0:	e001      	b.n	80040c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80040c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040ca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f043 0202 	orr.w	r2, r3, #2
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff fe34 	bl	8003d74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b08      	cmp	r3, #8
 8004114:	f040 80c3 	bne.w	800429e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80bd 	beq.w	800429e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004132:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a49      	ldr	r2, [pc, #292]	@ (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d101      	bne.n	8004142 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800413e:	4b49      	ldr	r3, [pc, #292]	@ (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004140:	e001      	b.n	8004146 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004142:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4944      	ldr	r1, [pc, #272]	@ (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800414e:	428b      	cmp	r3, r1
 8004150:	d101      	bne.n	8004156 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004152:	4b44      	ldr	r3, [pc, #272]	@ (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004154:	e001      	b.n	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004156:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800415a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800415e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004160:	2300      	movs	r3, #0
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417a:	f043 0204 	orr.w	r2, r3, #4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff fdf6 	bl	8003d74 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004188:	e089      	b.n	800429e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b02      	cmp	r3, #2
 8004192:	d107      	bne.n	80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f8be 	bl	8004320 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d107      	bne.n	80041be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f8fd 	bl	80043b8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c4:	2b40      	cmp	r3, #64	@ 0x40
 80041c6:	d12f      	bne.n	8004228 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d02a      	beq.n	8004228 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041e0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d101      	bne.n	80041f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80041ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041ee:	e001      	b.n	80041f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80041f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4919      	ldr	r1, [pc, #100]	@ (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041fc:	428b      	cmp	r3, r1
 80041fe:	d101      	bne.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004200:	4b18      	ldr	r3, [pc, #96]	@ (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004202:	e001      	b.n	8004208 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004204:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004208:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800420c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421a:	f043 0202 	orr.w	r2, r3, #2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff fda6 	bl	8003d74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b08      	cmp	r3, #8
 8004230:	d136      	bne.n	80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d031      	beq.n	80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a07      	ldr	r2, [pc, #28]	@ (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d101      	bne.n	800424a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004246:	4b07      	ldr	r3, [pc, #28]	@ (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004248:	e001      	b.n	800424e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800424a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4902      	ldr	r1, [pc, #8]	@ (8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004256:	428b      	cmp	r3, r1
 8004258:	d106      	bne.n	8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800425a:	4b02      	ldr	r3, [pc, #8]	@ (8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800425c:	e006      	b.n	800426c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800425e:	bf00      	nop
 8004260:	40003800 	.word	0x40003800
 8004264:	40003400 	.word	0x40003400
 8004268:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800426c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004270:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004280:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	f043 0204 	orr.w	r2, r3, #4
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fd6c 	bl	8003d74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800429c:	e000      	b.n	80042a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800429e:	bf00      	nop
}
 80042a0:	bf00      	nop
 80042a2:	3720      	adds	r7, #32
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	1c99      	adds	r1, r3, #2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6251      	str	r1, [r2, #36]	@ 0x24
 80042ce:	881a      	ldrh	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d113      	bne.n	8004316 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ffc9 	bl	80042a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004316:	bf00      	nop
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	1c99      	adds	r1, r3, #2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6251      	str	r1, [r2, #36]	@ 0x24
 8004332:	8819      	ldrh	r1, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1d      	ldr	r2, [pc, #116]	@ (80043b0 <I2SEx_TxISR_I2SExt+0x90>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d101      	bne.n	8004342 <I2SEx_TxISR_I2SExt+0x22>
 800433e:	4b1d      	ldr	r3, [pc, #116]	@ (80043b4 <I2SEx_TxISR_I2SExt+0x94>)
 8004340:	e001      	b.n	8004346 <I2SEx_TxISR_I2SExt+0x26>
 8004342:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004346:	460a      	mov	r2, r1
 8004348:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d121      	bne.n	80043a6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a12      	ldr	r2, [pc, #72]	@ (80043b0 <I2SEx_TxISR_I2SExt+0x90>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d101      	bne.n	8004370 <I2SEx_TxISR_I2SExt+0x50>
 800436c:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <I2SEx_TxISR_I2SExt+0x94>)
 800436e:	e001      	b.n	8004374 <I2SEx_TxISR_I2SExt+0x54>
 8004370:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	490d      	ldr	r1, [pc, #52]	@ (80043b0 <I2SEx_TxISR_I2SExt+0x90>)
 800437c:	428b      	cmp	r3, r1
 800437e:	d101      	bne.n	8004384 <I2SEx_TxISR_I2SExt+0x64>
 8004380:	4b0c      	ldr	r3, [pc, #48]	@ (80043b4 <I2SEx_TxISR_I2SExt+0x94>)
 8004382:	e001      	b.n	8004388 <I2SEx_TxISR_I2SExt+0x68>
 8004384:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004388:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800438c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff ff81 	bl	80042a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40003800 	.word	0x40003800
 80043b4:	40003400 	.word	0x40003400

080043b8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68d8      	ldr	r0, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ca:	1c99      	adds	r1, r3, #2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80043d0:	b282      	uxth	r2, r0
 80043d2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d113      	bne.n	8004414 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043fa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff ff4a 	bl	80042a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a20      	ldr	r2, [pc, #128]	@ (80044ac <I2SEx_RxISR_I2SExt+0x90>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <I2SEx_RxISR_I2SExt+0x16>
 800442e:	4b20      	ldr	r3, [pc, #128]	@ (80044b0 <I2SEx_RxISR_I2SExt+0x94>)
 8004430:	e001      	b.n	8004436 <I2SEx_RxISR_I2SExt+0x1a>
 8004432:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004436:	68d8      	ldr	r0, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	1c99      	adds	r1, r3, #2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004442:	b282      	uxth	r2, r0
 8004444:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d121      	bne.n	80044a2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a12      	ldr	r2, [pc, #72]	@ (80044ac <I2SEx_RxISR_I2SExt+0x90>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d101      	bne.n	800446c <I2SEx_RxISR_I2SExt+0x50>
 8004468:	4b11      	ldr	r3, [pc, #68]	@ (80044b0 <I2SEx_RxISR_I2SExt+0x94>)
 800446a:	e001      	b.n	8004470 <I2SEx_RxISR_I2SExt+0x54>
 800446c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	490d      	ldr	r1, [pc, #52]	@ (80044ac <I2SEx_RxISR_I2SExt+0x90>)
 8004478:	428b      	cmp	r3, r1
 800447a:	d101      	bne.n	8004480 <I2SEx_RxISR_I2SExt+0x64>
 800447c:	4b0c      	ldr	r3, [pc, #48]	@ (80044b0 <I2SEx_RxISR_I2SExt+0x94>)
 800447e:	e001      	b.n	8004484 <I2SEx_RxISR_I2SExt+0x68>
 8004480:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004484:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004488:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ff03 	bl	80042a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40003800 	.word	0x40003800
 80044b0:	40003400 	.word	0x40003400

080044b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e267      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d075      	beq.n	80045be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044d2:	4b88      	ldr	r3, [pc, #544]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d00c      	beq.n	80044f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044de:	4b85      	ldr	r3, [pc, #532]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d112      	bne.n	8004510 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ea:	4b82      	ldr	r3, [pc, #520]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044f6:	d10b      	bne.n	8004510 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	4b7e      	ldr	r3, [pc, #504]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d05b      	beq.n	80045bc <HAL_RCC_OscConfig+0x108>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d157      	bne.n	80045bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e242      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004518:	d106      	bne.n	8004528 <HAL_RCC_OscConfig+0x74>
 800451a:	4b76      	ldr	r3, [pc, #472]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a75      	ldr	r2, [pc, #468]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e01d      	b.n	8004564 <HAL_RCC_OscConfig+0xb0>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004530:	d10c      	bne.n	800454c <HAL_RCC_OscConfig+0x98>
 8004532:	4b70      	ldr	r3, [pc, #448]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a6f      	ldr	r2, [pc, #444]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4b6d      	ldr	r3, [pc, #436]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a6c      	ldr	r2, [pc, #432]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	e00b      	b.n	8004564 <HAL_RCC_OscConfig+0xb0>
 800454c:	4b69      	ldr	r3, [pc, #420]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a68      	ldr	r2, [pc, #416]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4b66      	ldr	r3, [pc, #408]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a65      	ldr	r2, [pc, #404]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 800455e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d013      	beq.n	8004594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fd fbbe 	bl	8001cec <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004574:	f7fd fbba 	bl	8001cec <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	@ 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e207      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	4b5b      	ldr	r3, [pc, #364]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0xc0>
 8004592:	e014      	b.n	80045be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fd fbaa 	bl	8001cec <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800459c:	f7fd fba6 	bl	8001cec <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	@ 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e1f3      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ae:	4b51      	ldr	r3, [pc, #324]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0xe8>
 80045ba:	e000      	b.n	80045be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d063      	beq.n	8004692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ca:	4b4a      	ldr	r3, [pc, #296]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d6:	4b47      	ldr	r3, [pc, #284]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d11c      	bne.n	800461c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e2:	4b44      	ldr	r3, [pc, #272]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d116      	bne.n	800461c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ee:	4b41      	ldr	r3, [pc, #260]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_RCC_OscConfig+0x152>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d001      	beq.n	8004606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e1c7      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004606:	4b3b      	ldr	r3, [pc, #236]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4937      	ldr	r1, [pc, #220]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461a:	e03a      	b.n	8004692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d020      	beq.n	8004666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004624:	4b34      	ldr	r3, [pc, #208]	@ (80046f8 <HAL_RCC_OscConfig+0x244>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462a:	f7fd fb5f 	bl	8001cec <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004632:	f7fd fb5b 	bl	8001cec <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e1a8      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004644:	4b2b      	ldr	r3, [pc, #172]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004650:	4b28      	ldr	r3, [pc, #160]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4925      	ldr	r1, [pc, #148]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]
 8004664:	e015      	b.n	8004692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004666:	4b24      	ldr	r3, [pc, #144]	@ (80046f8 <HAL_RCC_OscConfig+0x244>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fd fb3e 	bl	8001cec <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004674:	f7fd fb3a 	bl	8001cec <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e187      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004686:	4b1b      	ldr	r3, [pc, #108]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d036      	beq.n	800470c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d016      	beq.n	80046d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a6:	4b15      	ldr	r3, [pc, #84]	@ (80046fc <HAL_RCC_OscConfig+0x248>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ac:	f7fd fb1e 	bl	8001cec <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b4:	f7fd fb1a 	bl	8001cec <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e167      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c6:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80046c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x200>
 80046d2:	e01b      	b.n	800470c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d4:	4b09      	ldr	r3, [pc, #36]	@ (80046fc <HAL_RCC_OscConfig+0x248>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046da:	f7fd fb07 	bl	8001cec <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e0:	e00e      	b.n	8004700 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e2:	f7fd fb03 	bl	8001cec <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d907      	bls.n	8004700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e150      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
 80046f4:	40023800 	.word	0x40023800
 80046f8:	42470000 	.word	0x42470000
 80046fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004700:	4b88      	ldr	r3, [pc, #544]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1ea      	bne.n	80046e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 8097 	beq.w	8004848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471a:	2300      	movs	r3, #0
 800471c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800471e:	4b81      	ldr	r3, [pc, #516]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10f      	bne.n	800474a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	4b7d      	ldr	r3, [pc, #500]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	4a7c      	ldr	r2, [pc, #496]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004738:	6413      	str	r3, [r2, #64]	@ 0x40
 800473a:	4b7a      	ldr	r3, [pc, #488]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474a:	4b77      	ldr	r3, [pc, #476]	@ (8004928 <HAL_RCC_OscConfig+0x474>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d118      	bne.n	8004788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004756:	4b74      	ldr	r3, [pc, #464]	@ (8004928 <HAL_RCC_OscConfig+0x474>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a73      	ldr	r2, [pc, #460]	@ (8004928 <HAL_RCC_OscConfig+0x474>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004762:	f7fd fac3 	bl	8001cec <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476a:	f7fd fabf 	bl	8001cec <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e10c      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477c:	4b6a      	ldr	r3, [pc, #424]	@ (8004928 <HAL_RCC_OscConfig+0x474>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x2ea>
 8004790:	4b64      	ldr	r3, [pc, #400]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004794:	4a63      	ldr	r2, [pc, #396]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6713      	str	r3, [r2, #112]	@ 0x70
 800479c:	e01c      	b.n	80047d8 <HAL_RCC_OscConfig+0x324>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b05      	cmp	r3, #5
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x30c>
 80047a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047aa:	4a5e      	ldr	r2, [pc, #376]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047ac:	f043 0304 	orr.w	r3, r3, #4
 80047b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_OscConfig+0x324>
 80047c0:	4b58      	ldr	r3, [pc, #352]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c4:	4a57      	ldr	r2, [pc, #348]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80047cc:	4b55      	ldr	r3, [pc, #340]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d0:	4a54      	ldr	r2, [pc, #336]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047d2:	f023 0304 	bic.w	r3, r3, #4
 80047d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d015      	beq.n	800480c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e0:	f7fd fa84 	bl	8001cec <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e8:	f7fd fa80 	bl	8001cec <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e0cb      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fe:	4b49      	ldr	r3, [pc, #292]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0ee      	beq.n	80047e8 <HAL_RCC_OscConfig+0x334>
 800480a:	e014      	b.n	8004836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480c:	f7fd fa6e 	bl	8001cec <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004812:	e00a      	b.n	800482a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004814:	f7fd fa6a 	bl	8001cec <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e0b5      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482a:	4b3e      	ldr	r3, [pc, #248]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1ee      	bne.n	8004814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004836:	7dfb      	ldrb	r3, [r7, #23]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d105      	bne.n	8004848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483c:	4b39      	ldr	r3, [pc, #228]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	4a38      	ldr	r2, [pc, #224]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004846:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80a1 	beq.w	8004994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004852:	4b34      	ldr	r3, [pc, #208]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 030c 	and.w	r3, r3, #12
 800485a:	2b08      	cmp	r3, #8
 800485c:	d05c      	beq.n	8004918 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d141      	bne.n	80048ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004866:	4b31      	ldr	r3, [pc, #196]	@ (800492c <HAL_RCC_OscConfig+0x478>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fd fa3e 	bl	8001cec <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004874:	f7fd fa3a 	bl	8001cec <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e087      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004886:	4b27      	ldr	r3, [pc, #156]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	019b      	lsls	r3, r3, #6
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	3b01      	subs	r3, #1
 80048ac:	041b      	lsls	r3, r3, #16
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	491b      	ldr	r1, [pc, #108]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048bc:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <HAL_RCC_OscConfig+0x478>)
 80048be:	2201      	movs	r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c2:	f7fd fa13 	bl	8001cec <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ca:	f7fd fa0f 	bl	8001cec <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e05c      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048dc:	4b11      	ldr	r3, [pc, #68]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCC_OscConfig+0x416>
 80048e8:	e054      	b.n	8004994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ea:	4b10      	ldr	r3, [pc, #64]	@ (800492c <HAL_RCC_OscConfig+0x478>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f0:	f7fd f9fc 	bl	8001cec <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f8:	f7fd f9f8 	bl	8001cec <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e045      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x444>
 8004916:	e03d      	b.n	8004994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d107      	bne.n	8004930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e038      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
 8004924:	40023800 	.word	0x40023800
 8004928:	40007000 	.word	0x40007000
 800492c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004930:	4b1b      	ldr	r3, [pc, #108]	@ (80049a0 <HAL_RCC_OscConfig+0x4ec>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d028      	beq.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d121      	bne.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d11a      	bne.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004960:	4013      	ands	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004968:	4293      	cmp	r3, r2
 800496a:	d111      	bne.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	3b01      	subs	r3, #1
 800497a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800497c:	429a      	cmp	r2, r3
 800497e:	d107      	bne.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800

080049a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0cc      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049b8:	4b68      	ldr	r3, [pc, #416]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d90c      	bls.n	80049e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b65      	ldr	r3, [pc, #404]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b63      	ldr	r3, [pc, #396]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0b8      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d020      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f8:	4b59      	ldr	r3, [pc, #356]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4a58      	ldr	r2, [pc, #352]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a10:	4b53      	ldr	r3, [pc, #332]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	4a52      	ldr	r2, [pc, #328]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a1c:	4b50      	ldr	r3, [pc, #320]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	494d      	ldr	r1, [pc, #308]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d044      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d107      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	4b47      	ldr	r3, [pc, #284]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d119      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e07f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d003      	beq.n	8004a62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d107      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a62:	4b3f      	ldr	r3, [pc, #252]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e06f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a72:	4b3b      	ldr	r3, [pc, #236]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e067      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a82:	4b37      	ldr	r3, [pc, #220]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f023 0203 	bic.w	r2, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4934      	ldr	r1, [pc, #208]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a94:	f7fd f92a 	bl	8001cec <HAL_GetTick>
 8004a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9a:	e00a      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a9c:	f7fd f926 	bl	8001cec <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e04f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 020c 	and.w	r2, r3, #12
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d1eb      	bne.n	8004a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac4:	4b25      	ldr	r3, [pc, #148]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d20c      	bcs.n	8004aec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad2:	4b22      	ldr	r3, [pc, #136]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	4b20      	ldr	r3, [pc, #128]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e032      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af8:	4b19      	ldr	r3, [pc, #100]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	4916      	ldr	r1, [pc, #88]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b16:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	490e      	ldr	r1, [pc, #56]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b2a:	f000 f821 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	4b0b      	ldr	r3, [pc, #44]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	490a      	ldr	r1, [pc, #40]	@ (8004b64 <HAL_RCC_ClockConfig+0x1c0>)
 8004b3c:	5ccb      	ldrb	r3, [r1, r3]
 8004b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b42:	4a09      	ldr	r2, [pc, #36]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b46:	4b09      	ldr	r3, [pc, #36]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fd f88a 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023c00 	.word	0x40023c00
 8004b60:	40023800 	.word	0x40023800
 8004b64:	08006490 	.word	0x08006490
 8004b68:	20000004 	.word	0x20000004
 8004b6c:	20000008 	.word	0x20000008

08004b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b094      	sub	sp, #80	@ 0x50
 8004b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b88:	4b79      	ldr	r3, [pc, #484]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 030c 	and.w	r3, r3, #12
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d00d      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	f200 80e1 	bhi.w	8004d5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d003      	beq.n	8004baa <HAL_RCC_GetSysClockFreq+0x3a>
 8004ba2:	e0db      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba4:	4b73      	ldr	r3, [pc, #460]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ba8:	e0db      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004baa:	4b73      	ldr	r3, [pc, #460]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bae:	e0d8      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bba:	4b6d      	ldr	r3, [pc, #436]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d063      	beq.n	8004c8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	099b      	lsrs	r3, r3, #6
 8004bcc:	2200      	movs	r2, #0
 8004bce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bda:	2300      	movs	r3, #0
 8004bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004be2:	4622      	mov	r2, r4
 8004be4:	462b      	mov	r3, r5
 8004be6:	f04f 0000 	mov.w	r0, #0
 8004bea:	f04f 0100 	mov.w	r1, #0
 8004bee:	0159      	lsls	r1, r3, #5
 8004bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf4:	0150      	lsls	r0, r2, #5
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	1a51      	subs	r1, r2, r1
 8004bfe:	6139      	str	r1, [r7, #16]
 8004c00:	4629      	mov	r1, r5
 8004c02:	eb63 0301 	sbc.w	r3, r3, r1
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c14:	4659      	mov	r1, fp
 8004c16:	018b      	lsls	r3, r1, #6
 8004c18:	4651      	mov	r1, sl
 8004c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c1e:	4651      	mov	r1, sl
 8004c20:	018a      	lsls	r2, r1, #6
 8004c22:	4651      	mov	r1, sl
 8004c24:	ebb2 0801 	subs.w	r8, r2, r1
 8004c28:	4659      	mov	r1, fp
 8004c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c42:	4690      	mov	r8, r2
 8004c44:	4699      	mov	r9, r3
 8004c46:	4623      	mov	r3, r4
 8004c48:	eb18 0303 	adds.w	r3, r8, r3
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	462b      	mov	r3, r5
 8004c50:	eb49 0303 	adc.w	r3, r9, r3
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c62:	4629      	mov	r1, r5
 8004c64:	024b      	lsls	r3, r1, #9
 8004c66:	4621      	mov	r1, r4
 8004c68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	024a      	lsls	r2, r1, #9
 8004c70:	4610      	mov	r0, r2
 8004c72:	4619      	mov	r1, r3
 8004c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c76:	2200      	movs	r2, #0
 8004c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c80:	f7fb ff98 	bl	8000bb4 <__aeabi_uldivmod>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4613      	mov	r3, r2
 8004c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c8c:	e058      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8e:	4b38      	ldr	r3, [pc, #224]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	099b      	lsrs	r3, r3, #6
 8004c94:	2200      	movs	r2, #0
 8004c96:	4618      	mov	r0, r3
 8004c98:	4611      	mov	r1, r2
 8004c9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c9e:	623b      	str	r3, [r7, #32]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ca8:	4642      	mov	r2, r8
 8004caa:	464b      	mov	r3, r9
 8004cac:	f04f 0000 	mov.w	r0, #0
 8004cb0:	f04f 0100 	mov.w	r1, #0
 8004cb4:	0159      	lsls	r1, r3, #5
 8004cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cba:	0150      	lsls	r0, r2, #5
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	00eb      	lsls	r3, r5, #3
 8004cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cf6:	00e2      	lsls	r2, r4, #3
 8004cf8:	4614      	mov	r4, r2
 8004cfa:	461d      	mov	r5, r3
 8004cfc:	4643      	mov	r3, r8
 8004cfe:	18e3      	adds	r3, r4, r3
 8004d00:	603b      	str	r3, [r7, #0]
 8004d02:	464b      	mov	r3, r9
 8004d04:	eb45 0303 	adc.w	r3, r5, r3
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d16:	4629      	mov	r1, r5
 8004d18:	028b      	lsls	r3, r1, #10
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d20:	4621      	mov	r1, r4
 8004d22:	028a      	lsls	r2, r1, #10
 8004d24:	4610      	mov	r0, r2
 8004d26:	4619      	mov	r1, r3
 8004d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	61fa      	str	r2, [r7, #28]
 8004d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d34:	f7fb ff3e 	bl	8000bb4 <__aeabi_uldivmod>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d40:	4b0b      	ldr	r3, [pc, #44]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	0c1b      	lsrs	r3, r3, #16
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d5a:	e002      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d5c:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3750      	adds	r7, #80	@ 0x50
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800
 8004d74:	00f42400 	.word	0x00f42400
 8004d78:	007a1200 	.word	0x007a1200

08004d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d80:	4b03      	ldr	r3, [pc, #12]	@ (8004d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d82:	681b      	ldr	r3, [r3, #0]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000004 	.word	0x20000004

08004d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d98:	f7ff fff0 	bl	8004d7c <HAL_RCC_GetHCLKFreq>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4b05      	ldr	r3, [pc, #20]	@ (8004db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	0a9b      	lsrs	r3, r3, #10
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	4903      	ldr	r1, [pc, #12]	@ (8004db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004daa:	5ccb      	ldrb	r3, [r1, r3]
 8004dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40023800 	.word	0x40023800
 8004db8:	080064a0 	.word	0x080064a0

08004dbc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d038      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004de4:	4b68      	ldr	r3, [pc, #416]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dea:	f7fc ff7f 	bl	8001cec <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004df0:	e008      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004df2:	f7fc ff7b 	bl	8001cec <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e0bd      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e04:	4b61      	ldr	r3, [pc, #388]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f0      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	019b      	lsls	r3, r3, #6
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	071b      	lsls	r3, r3, #28
 8004e22:	495a      	ldr	r1, [pc, #360]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e2a:	4b57      	ldr	r3, [pc, #348]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e30:	f7fc ff5c 	bl	8001cec <HAL_GetTick>
 8004e34:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e38:	f7fc ff58 	bl	8001cec <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e09a      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e4a:	4b50      	ldr	r3, [pc, #320]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 8083 	beq.w	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	4b48      	ldr	r3, [pc, #288]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6c:	4a47      	ldr	r2, [pc, #284]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e74:	4b45      	ldr	r3, [pc, #276]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e80:	4b43      	ldr	r3, [pc, #268]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a42      	ldr	r2, [pc, #264]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e8a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e8c:	f7fc ff2e 	bl	8001cec <HAL_GetTick>
 8004e90:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e94:	f7fc ff2a 	bl	8001cec <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e06c      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004ea6:	4b3a      	ldr	r3, [pc, #232]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eb2:	4b36      	ldr	r3, [pc, #216]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eba:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d02f      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d028      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eda:	4b2e      	ldr	r3, [pc, #184]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ee6:	4a29      	ldr	r2, [pc, #164]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004eec:	4b27      	ldr	r3, [pc, #156]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d114      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ef8:	f7fc fef8 	bl	8001cec <HAL_GetTick>
 8004efc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efe:	e00a      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f00:	f7fc fef4 	bl	8001cec <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e034      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f16:	4b1d      	ldr	r3, [pc, #116]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0ee      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f2e:	d10d      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004f30:	4b16      	ldr	r3, [pc, #88]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f44:	4911      	ldr	r1, [pc, #68]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	608b      	str	r3, [r1, #8]
 8004f4a:	e005      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	4a0e      	ldr	r2, [pc, #56]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f52:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f56:	6093      	str	r3, [r2, #8]
 8004f58:	4b0c      	ldr	r3, [pc, #48]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f64:	4909      	ldr	r1, [pc, #36]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	7d1a      	ldrb	r2, [r3, #20]
 8004f7a:	4b07      	ldr	r3, [pc, #28]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f7c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	42470068 	.word	0x42470068
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	40007000 	.word	0x40007000
 8004f94:	42470e40 	.word	0x42470e40
 8004f98:	424711e0 	.word	0x424711e0

08004f9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d141      	bne.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004fba:	4b25      	ldr	r3, [pc, #148]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d006      	beq.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fd0:	d131      	bne.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fd2:	4b20      	ldr	r3, [pc, #128]	@ (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004fd4:	617b      	str	r3, [r7, #20]
          break;
 8004fd6:	e031      	b.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fe4:	d109      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ff0:	4a19      	ldr	r2, [pc, #100]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	e008      	b.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ffa:	4b15      	ldr	r3, [pc, #84]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005004:	4a15      	ldr	r2, [pc, #84]	@ (800505c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005006:	fbb2 f3f3 	udiv	r3, r2, r3
 800500a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800500c:	4b10      	ldr	r3, [pc, #64]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800500e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005012:	099b      	lsrs	r3, r3, #6
 8005014:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	fb02 f303 	mul.w	r3, r2, r3
 800501e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005020:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005026:	0f1b      	lsrs	r3, r3, #28
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005032:	617b      	str	r3, [r7, #20]
          break;
 8005034:	e002      	b.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
          break;
 800503a:	bf00      	nop
        }
      }
      break;
 800503c:	e000      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 800503e:	bf00      	nop
    }
  }
  return frequency;
 8005040:	697b      	ldr	r3, [r7, #20]
}
 8005042:	4618      	mov	r0, r3
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800
 8005054:	00bb8000 	.word	0x00bb8000
 8005058:	007a1200 	.word	0x007a1200
 800505c:	00f42400 	.word	0x00f42400

08005060 <memset>:
 8005060:	4402      	add	r2, r0
 8005062:	4603      	mov	r3, r0
 8005064:	4293      	cmp	r3, r2
 8005066:	d100      	bne.n	800506a <memset+0xa>
 8005068:	4770      	bx	lr
 800506a:	f803 1b01 	strb.w	r1, [r3], #1
 800506e:	e7f9      	b.n	8005064 <memset+0x4>

08005070 <__libc_init_array>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	4d0d      	ldr	r5, [pc, #52]	@ (80050a8 <__libc_init_array+0x38>)
 8005074:	4c0d      	ldr	r4, [pc, #52]	@ (80050ac <__libc_init_array+0x3c>)
 8005076:	1b64      	subs	r4, r4, r5
 8005078:	10a4      	asrs	r4, r4, #2
 800507a:	2600      	movs	r6, #0
 800507c:	42a6      	cmp	r6, r4
 800507e:	d109      	bne.n	8005094 <__libc_init_array+0x24>
 8005080:	4d0b      	ldr	r5, [pc, #44]	@ (80050b0 <__libc_init_array+0x40>)
 8005082:	4c0c      	ldr	r4, [pc, #48]	@ (80050b4 <__libc_init_array+0x44>)
 8005084:	f001 f858 	bl	8006138 <_init>
 8005088:	1b64      	subs	r4, r4, r5
 800508a:	10a4      	asrs	r4, r4, #2
 800508c:	2600      	movs	r6, #0
 800508e:	42a6      	cmp	r6, r4
 8005090:	d105      	bne.n	800509e <__libc_init_array+0x2e>
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	f855 3b04 	ldr.w	r3, [r5], #4
 8005098:	4798      	blx	r3
 800509a:	3601      	adds	r6, #1
 800509c:	e7ee      	b.n	800507c <__libc_init_array+0xc>
 800509e:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a2:	4798      	blx	r3
 80050a4:	3601      	adds	r6, #1
 80050a6:	e7f2      	b.n	800508e <__libc_init_array+0x1e>
 80050a8:	08006690 	.word	0x08006690
 80050ac:	08006690 	.word	0x08006690
 80050b0:	08006690 	.word	0x08006690
 80050b4:	08006694 	.word	0x08006694

080050b8 <memcpy>:
 80050b8:	440a      	add	r2, r1
 80050ba:	4291      	cmp	r1, r2
 80050bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80050c0:	d100      	bne.n	80050c4 <memcpy+0xc>
 80050c2:	4770      	bx	lr
 80050c4:	b510      	push	{r4, lr}
 80050c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050ce:	4291      	cmp	r1, r2
 80050d0:	d1f9      	bne.n	80050c6 <memcpy+0xe>
 80050d2:	bd10      	pop	{r4, pc}
 80050d4:	0000      	movs	r0, r0
	...

080050d8 <sin>:
 80050d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050da:	ec53 2b10 	vmov	r2, r3, d0
 80050de:	4826      	ldr	r0, [pc, #152]	@ (8005178 <sin+0xa0>)
 80050e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80050e4:	4281      	cmp	r1, r0
 80050e6:	d807      	bhi.n	80050f8 <sin+0x20>
 80050e8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005170 <sin+0x98>
 80050ec:	2000      	movs	r0, #0
 80050ee:	b005      	add	sp, #20
 80050f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050f4:	f000 b90c 	b.w	8005310 <__kernel_sin>
 80050f8:	4820      	ldr	r0, [pc, #128]	@ (800517c <sin+0xa4>)
 80050fa:	4281      	cmp	r1, r0
 80050fc:	d908      	bls.n	8005110 <sin+0x38>
 80050fe:	4610      	mov	r0, r2
 8005100:	4619      	mov	r1, r3
 8005102:	f7fb f86d 	bl	80001e0 <__aeabi_dsub>
 8005106:	ec41 0b10 	vmov	d0, r0, r1
 800510a:	b005      	add	sp, #20
 800510c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005110:	4668      	mov	r0, sp
 8005112:	f000 f9b9 	bl	8005488 <__ieee754_rem_pio2>
 8005116:	f000 0003 	and.w	r0, r0, #3
 800511a:	2801      	cmp	r0, #1
 800511c:	d00c      	beq.n	8005138 <sin+0x60>
 800511e:	2802      	cmp	r0, #2
 8005120:	d011      	beq.n	8005146 <sin+0x6e>
 8005122:	b9e8      	cbnz	r0, 8005160 <sin+0x88>
 8005124:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005128:	ed9d 0b00 	vldr	d0, [sp]
 800512c:	2001      	movs	r0, #1
 800512e:	f000 f8ef 	bl	8005310 <__kernel_sin>
 8005132:	ec51 0b10 	vmov	r0, r1, d0
 8005136:	e7e6      	b.n	8005106 <sin+0x2e>
 8005138:	ed9d 1b02 	vldr	d1, [sp, #8]
 800513c:	ed9d 0b00 	vldr	d0, [sp]
 8005140:	f000 f81e 	bl	8005180 <__kernel_cos>
 8005144:	e7f5      	b.n	8005132 <sin+0x5a>
 8005146:	ed9d 1b02 	vldr	d1, [sp, #8]
 800514a:	ed9d 0b00 	vldr	d0, [sp]
 800514e:	2001      	movs	r0, #1
 8005150:	f000 f8de 	bl	8005310 <__kernel_sin>
 8005154:	ec53 2b10 	vmov	r2, r3, d0
 8005158:	4610      	mov	r0, r2
 800515a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800515e:	e7d2      	b.n	8005106 <sin+0x2e>
 8005160:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005164:	ed9d 0b00 	vldr	d0, [sp]
 8005168:	f000 f80a 	bl	8005180 <__kernel_cos>
 800516c:	e7f2      	b.n	8005154 <sin+0x7c>
 800516e:	bf00      	nop
	...
 8005178:	3fe921fb 	.word	0x3fe921fb
 800517c:	7fefffff 	.word	0x7fefffff

08005180 <__kernel_cos>:
 8005180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	ec57 6b10 	vmov	r6, r7, d0
 8005188:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800518c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005190:	ed8d 1b00 	vstr	d1, [sp]
 8005194:	d206      	bcs.n	80051a4 <__kernel_cos+0x24>
 8005196:	4630      	mov	r0, r6
 8005198:	4639      	mov	r1, r7
 800519a:	f7fb fc73 	bl	8000a84 <__aeabi_d2iz>
 800519e:	2800      	cmp	r0, #0
 80051a0:	f000 8088 	beq.w	80052b4 <__kernel_cos+0x134>
 80051a4:	4632      	mov	r2, r6
 80051a6:	463b      	mov	r3, r7
 80051a8:	4630      	mov	r0, r6
 80051aa:	4639      	mov	r1, r7
 80051ac:	f7fb f9d0 	bl	8000550 <__aeabi_dmul>
 80051b0:	4b51      	ldr	r3, [pc, #324]	@ (80052f8 <__kernel_cos+0x178>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	4604      	mov	r4, r0
 80051b6:	460d      	mov	r5, r1
 80051b8:	f7fb f9ca 	bl	8000550 <__aeabi_dmul>
 80051bc:	a340      	add	r3, pc, #256	@ (adr r3, 80052c0 <__kernel_cos+0x140>)
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	4682      	mov	sl, r0
 80051c4:	468b      	mov	fp, r1
 80051c6:	4620      	mov	r0, r4
 80051c8:	4629      	mov	r1, r5
 80051ca:	f7fb f9c1 	bl	8000550 <__aeabi_dmul>
 80051ce:	a33e      	add	r3, pc, #248	@ (adr r3, 80052c8 <__kernel_cos+0x148>)
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f7fb f806 	bl	80001e4 <__adddf3>
 80051d8:	4622      	mov	r2, r4
 80051da:	462b      	mov	r3, r5
 80051dc:	f7fb f9b8 	bl	8000550 <__aeabi_dmul>
 80051e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80052d0 <__kernel_cos+0x150>)
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f7fa fffb 	bl	80001e0 <__aeabi_dsub>
 80051ea:	4622      	mov	r2, r4
 80051ec:	462b      	mov	r3, r5
 80051ee:	f7fb f9af 	bl	8000550 <__aeabi_dmul>
 80051f2:	a339      	add	r3, pc, #228	@ (adr r3, 80052d8 <__kernel_cos+0x158>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f7fa fff4 	bl	80001e4 <__adddf3>
 80051fc:	4622      	mov	r2, r4
 80051fe:	462b      	mov	r3, r5
 8005200:	f7fb f9a6 	bl	8000550 <__aeabi_dmul>
 8005204:	a336      	add	r3, pc, #216	@ (adr r3, 80052e0 <__kernel_cos+0x160>)
 8005206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520a:	f7fa ffe9 	bl	80001e0 <__aeabi_dsub>
 800520e:	4622      	mov	r2, r4
 8005210:	462b      	mov	r3, r5
 8005212:	f7fb f99d 	bl	8000550 <__aeabi_dmul>
 8005216:	a334      	add	r3, pc, #208	@ (adr r3, 80052e8 <__kernel_cos+0x168>)
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f7fa ffe2 	bl	80001e4 <__adddf3>
 8005220:	4622      	mov	r2, r4
 8005222:	462b      	mov	r3, r5
 8005224:	f7fb f994 	bl	8000550 <__aeabi_dmul>
 8005228:	4622      	mov	r2, r4
 800522a:	462b      	mov	r3, r5
 800522c:	f7fb f990 	bl	8000550 <__aeabi_dmul>
 8005230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005234:	4604      	mov	r4, r0
 8005236:	460d      	mov	r5, r1
 8005238:	4630      	mov	r0, r6
 800523a:	4639      	mov	r1, r7
 800523c:	f7fb f988 	bl	8000550 <__aeabi_dmul>
 8005240:	460b      	mov	r3, r1
 8005242:	4602      	mov	r2, r0
 8005244:	4629      	mov	r1, r5
 8005246:	4620      	mov	r0, r4
 8005248:	f7fa ffca 	bl	80001e0 <__aeabi_dsub>
 800524c:	4b2b      	ldr	r3, [pc, #172]	@ (80052fc <__kernel_cos+0x17c>)
 800524e:	4598      	cmp	r8, r3
 8005250:	4606      	mov	r6, r0
 8005252:	460f      	mov	r7, r1
 8005254:	d810      	bhi.n	8005278 <__kernel_cos+0xf8>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4650      	mov	r0, sl
 800525c:	4659      	mov	r1, fp
 800525e:	f7fa ffbf 	bl	80001e0 <__aeabi_dsub>
 8005262:	460b      	mov	r3, r1
 8005264:	4926      	ldr	r1, [pc, #152]	@ (8005300 <__kernel_cos+0x180>)
 8005266:	4602      	mov	r2, r0
 8005268:	2000      	movs	r0, #0
 800526a:	f7fa ffb9 	bl	80001e0 <__aeabi_dsub>
 800526e:	ec41 0b10 	vmov	d0, r0, r1
 8005272:	b003      	add	sp, #12
 8005274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005278:	4b22      	ldr	r3, [pc, #136]	@ (8005304 <__kernel_cos+0x184>)
 800527a:	4921      	ldr	r1, [pc, #132]	@ (8005300 <__kernel_cos+0x180>)
 800527c:	4598      	cmp	r8, r3
 800527e:	bf8c      	ite	hi
 8005280:	4d21      	ldrhi	r5, [pc, #132]	@ (8005308 <__kernel_cos+0x188>)
 8005282:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005286:	2400      	movs	r4, #0
 8005288:	4622      	mov	r2, r4
 800528a:	462b      	mov	r3, r5
 800528c:	2000      	movs	r0, #0
 800528e:	f7fa ffa7 	bl	80001e0 <__aeabi_dsub>
 8005292:	4622      	mov	r2, r4
 8005294:	4680      	mov	r8, r0
 8005296:	4689      	mov	r9, r1
 8005298:	462b      	mov	r3, r5
 800529a:	4650      	mov	r0, sl
 800529c:	4659      	mov	r1, fp
 800529e:	f7fa ff9f 	bl	80001e0 <__aeabi_dsub>
 80052a2:	4632      	mov	r2, r6
 80052a4:	463b      	mov	r3, r7
 80052a6:	f7fa ff9b 	bl	80001e0 <__aeabi_dsub>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4640      	mov	r0, r8
 80052b0:	4649      	mov	r1, r9
 80052b2:	e7da      	b.n	800526a <__kernel_cos+0xea>
 80052b4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80052f0 <__kernel_cos+0x170>
 80052b8:	e7db      	b.n	8005272 <__kernel_cos+0xf2>
 80052ba:	bf00      	nop
 80052bc:	f3af 8000 	nop.w
 80052c0:	be8838d4 	.word	0xbe8838d4
 80052c4:	bda8fae9 	.word	0xbda8fae9
 80052c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80052cc:	3e21ee9e 	.word	0x3e21ee9e
 80052d0:	809c52ad 	.word	0x809c52ad
 80052d4:	3e927e4f 	.word	0x3e927e4f
 80052d8:	19cb1590 	.word	0x19cb1590
 80052dc:	3efa01a0 	.word	0x3efa01a0
 80052e0:	16c15177 	.word	0x16c15177
 80052e4:	3f56c16c 	.word	0x3f56c16c
 80052e8:	5555554c 	.word	0x5555554c
 80052ec:	3fa55555 	.word	0x3fa55555
 80052f0:	00000000 	.word	0x00000000
 80052f4:	3ff00000 	.word	0x3ff00000
 80052f8:	3fe00000 	.word	0x3fe00000
 80052fc:	3fd33332 	.word	0x3fd33332
 8005300:	3ff00000 	.word	0x3ff00000
 8005304:	3fe90000 	.word	0x3fe90000
 8005308:	3fd20000 	.word	0x3fd20000
 800530c:	00000000 	.word	0x00000000

08005310 <__kernel_sin>:
 8005310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005314:	ec55 4b10 	vmov	r4, r5, d0
 8005318:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800531c:	b085      	sub	sp, #20
 800531e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005322:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005326:	4680      	mov	r8, r0
 8005328:	d205      	bcs.n	8005336 <__kernel_sin+0x26>
 800532a:	4620      	mov	r0, r4
 800532c:	4629      	mov	r1, r5
 800532e:	f7fb fba9 	bl	8000a84 <__aeabi_d2iz>
 8005332:	2800      	cmp	r0, #0
 8005334:	d052      	beq.n	80053dc <__kernel_sin+0xcc>
 8005336:	4622      	mov	r2, r4
 8005338:	462b      	mov	r3, r5
 800533a:	4620      	mov	r0, r4
 800533c:	4629      	mov	r1, r5
 800533e:	f7fb f907 	bl	8000550 <__aeabi_dmul>
 8005342:	4682      	mov	sl, r0
 8005344:	468b      	mov	fp, r1
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4620      	mov	r0, r4
 800534c:	4629      	mov	r1, r5
 800534e:	f7fb f8ff 	bl	8000550 <__aeabi_dmul>
 8005352:	a342      	add	r3, pc, #264	@ (adr r3, 800545c <__kernel_sin+0x14c>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	e9cd 0100 	strd	r0, r1, [sp]
 800535c:	4650      	mov	r0, sl
 800535e:	4659      	mov	r1, fp
 8005360:	f7fb f8f6 	bl	8000550 <__aeabi_dmul>
 8005364:	a33f      	add	r3, pc, #252	@ (adr r3, 8005464 <__kernel_sin+0x154>)
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	f7fa ff39 	bl	80001e0 <__aeabi_dsub>
 800536e:	4652      	mov	r2, sl
 8005370:	465b      	mov	r3, fp
 8005372:	f7fb f8ed 	bl	8000550 <__aeabi_dmul>
 8005376:	a33d      	add	r3, pc, #244	@ (adr r3, 800546c <__kernel_sin+0x15c>)
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f7fa ff32 	bl	80001e4 <__adddf3>
 8005380:	4652      	mov	r2, sl
 8005382:	465b      	mov	r3, fp
 8005384:	f7fb f8e4 	bl	8000550 <__aeabi_dmul>
 8005388:	a33a      	add	r3, pc, #232	@ (adr r3, 8005474 <__kernel_sin+0x164>)
 800538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538e:	f7fa ff27 	bl	80001e0 <__aeabi_dsub>
 8005392:	4652      	mov	r2, sl
 8005394:	465b      	mov	r3, fp
 8005396:	f7fb f8db 	bl	8000550 <__aeabi_dmul>
 800539a:	a338      	add	r3, pc, #224	@ (adr r3, 800547c <__kernel_sin+0x16c>)
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	f7fa ff20 	bl	80001e4 <__adddf3>
 80053a4:	4606      	mov	r6, r0
 80053a6:	460f      	mov	r7, r1
 80053a8:	f1b8 0f00 	cmp.w	r8, #0
 80053ac:	d11b      	bne.n	80053e6 <__kernel_sin+0xd6>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4650      	mov	r0, sl
 80053b4:	4659      	mov	r1, fp
 80053b6:	f7fb f8cb 	bl	8000550 <__aeabi_dmul>
 80053ba:	a325      	add	r3, pc, #148	@ (adr r3, 8005450 <__kernel_sin+0x140>)
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f7fa ff0e 	bl	80001e0 <__aeabi_dsub>
 80053c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053c8:	f7fb f8c2 	bl	8000550 <__aeabi_dmul>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4620      	mov	r0, r4
 80053d2:	4629      	mov	r1, r5
 80053d4:	f7fa ff06 	bl	80001e4 <__adddf3>
 80053d8:	4604      	mov	r4, r0
 80053da:	460d      	mov	r5, r1
 80053dc:	ec45 4b10 	vmov	d0, r4, r5
 80053e0:	b005      	add	sp, #20
 80053e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005458 <__kernel_sin+0x148>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	f7fb f8af 	bl	8000550 <__aeabi_dmul>
 80053f2:	4632      	mov	r2, r6
 80053f4:	4680      	mov	r8, r0
 80053f6:	4689      	mov	r9, r1
 80053f8:	463b      	mov	r3, r7
 80053fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053fe:	f7fb f8a7 	bl	8000550 <__aeabi_dmul>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4640      	mov	r0, r8
 8005408:	4649      	mov	r1, r9
 800540a:	f7fa fee9 	bl	80001e0 <__aeabi_dsub>
 800540e:	4652      	mov	r2, sl
 8005410:	465b      	mov	r3, fp
 8005412:	f7fb f89d 	bl	8000550 <__aeabi_dmul>
 8005416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800541a:	f7fa fee1 	bl	80001e0 <__aeabi_dsub>
 800541e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005450 <__kernel_sin+0x140>)
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	4606      	mov	r6, r0
 8005426:	460f      	mov	r7, r1
 8005428:	e9dd 0100 	ldrd	r0, r1, [sp]
 800542c:	f7fb f890 	bl	8000550 <__aeabi_dmul>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4630      	mov	r0, r6
 8005436:	4639      	mov	r1, r7
 8005438:	f7fa fed4 	bl	80001e4 <__adddf3>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4620      	mov	r0, r4
 8005442:	4629      	mov	r1, r5
 8005444:	f7fa fecc 	bl	80001e0 <__aeabi_dsub>
 8005448:	e7c6      	b.n	80053d8 <__kernel_sin+0xc8>
 800544a:	bf00      	nop
 800544c:	f3af 8000 	nop.w
 8005450:	55555549 	.word	0x55555549
 8005454:	3fc55555 	.word	0x3fc55555
 8005458:	3fe00000 	.word	0x3fe00000
 800545c:	5acfd57c 	.word	0x5acfd57c
 8005460:	3de5d93a 	.word	0x3de5d93a
 8005464:	8a2b9ceb 	.word	0x8a2b9ceb
 8005468:	3e5ae5e6 	.word	0x3e5ae5e6
 800546c:	57b1fe7d 	.word	0x57b1fe7d
 8005470:	3ec71de3 	.word	0x3ec71de3
 8005474:	19c161d5 	.word	0x19c161d5
 8005478:	3f2a01a0 	.word	0x3f2a01a0
 800547c:	1110f8a6 	.word	0x1110f8a6
 8005480:	3f811111 	.word	0x3f811111
 8005484:	00000000 	.word	0x00000000

08005488 <__ieee754_rem_pio2>:
 8005488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548c:	ec57 6b10 	vmov	r6, r7, d0
 8005490:	4bc5      	ldr	r3, [pc, #788]	@ (80057a8 <__ieee754_rem_pio2+0x320>)
 8005492:	b08d      	sub	sp, #52	@ 0x34
 8005494:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005498:	4598      	cmp	r8, r3
 800549a:	4604      	mov	r4, r0
 800549c:	9704      	str	r7, [sp, #16]
 800549e:	d807      	bhi.n	80054b0 <__ieee754_rem_pio2+0x28>
 80054a0:	2200      	movs	r2, #0
 80054a2:	2300      	movs	r3, #0
 80054a4:	ed80 0b00 	vstr	d0, [r0]
 80054a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80054ac:	2500      	movs	r5, #0
 80054ae:	e028      	b.n	8005502 <__ieee754_rem_pio2+0x7a>
 80054b0:	4bbe      	ldr	r3, [pc, #760]	@ (80057ac <__ieee754_rem_pio2+0x324>)
 80054b2:	4598      	cmp	r8, r3
 80054b4:	d878      	bhi.n	80055a8 <__ieee754_rem_pio2+0x120>
 80054b6:	9b04      	ldr	r3, [sp, #16]
 80054b8:	4dbd      	ldr	r5, [pc, #756]	@ (80057b0 <__ieee754_rem_pio2+0x328>)
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	4630      	mov	r0, r6
 80054be:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005770 <__ieee754_rem_pio2+0x2e8>)
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	4639      	mov	r1, r7
 80054c6:	dd38      	ble.n	800553a <__ieee754_rem_pio2+0xb2>
 80054c8:	f7fa fe8a 	bl	80001e0 <__aeabi_dsub>
 80054cc:	45a8      	cmp	r8, r5
 80054ce:	4606      	mov	r6, r0
 80054d0:	460f      	mov	r7, r1
 80054d2:	d01a      	beq.n	800550a <__ieee754_rem_pio2+0x82>
 80054d4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005778 <__ieee754_rem_pio2+0x2f0>)
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	f7fa fe81 	bl	80001e0 <__aeabi_dsub>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4680      	mov	r8, r0
 80054e4:	4689      	mov	r9, r1
 80054e6:	4630      	mov	r0, r6
 80054e8:	4639      	mov	r1, r7
 80054ea:	f7fa fe79 	bl	80001e0 <__aeabi_dsub>
 80054ee:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005778 <__ieee754_rem_pio2+0x2f0>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f7fa fe74 	bl	80001e0 <__aeabi_dsub>
 80054f8:	e9c4 8900 	strd	r8, r9, [r4]
 80054fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005500:	2501      	movs	r5, #1
 8005502:	4628      	mov	r0, r5
 8005504:	b00d      	add	sp, #52	@ 0x34
 8005506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550a:	a39d      	add	r3, pc, #628	@ (adr r3, 8005780 <__ieee754_rem_pio2+0x2f8>)
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f7fa fe66 	bl	80001e0 <__aeabi_dsub>
 8005514:	a39c      	add	r3, pc, #624	@ (adr r3, 8005788 <__ieee754_rem_pio2+0x300>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	4606      	mov	r6, r0
 800551c:	460f      	mov	r7, r1
 800551e:	f7fa fe5f 	bl	80001e0 <__aeabi_dsub>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4680      	mov	r8, r0
 8005528:	4689      	mov	r9, r1
 800552a:	4630      	mov	r0, r6
 800552c:	4639      	mov	r1, r7
 800552e:	f7fa fe57 	bl	80001e0 <__aeabi_dsub>
 8005532:	a395      	add	r3, pc, #596	@ (adr r3, 8005788 <__ieee754_rem_pio2+0x300>)
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	e7dc      	b.n	80054f4 <__ieee754_rem_pio2+0x6c>
 800553a:	f7fa fe53 	bl	80001e4 <__adddf3>
 800553e:	45a8      	cmp	r8, r5
 8005540:	4606      	mov	r6, r0
 8005542:	460f      	mov	r7, r1
 8005544:	d018      	beq.n	8005578 <__ieee754_rem_pio2+0xf0>
 8005546:	a38c      	add	r3, pc, #560	@ (adr r3, 8005778 <__ieee754_rem_pio2+0x2f0>)
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f7fa fe4a 	bl	80001e4 <__adddf3>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4680      	mov	r8, r0
 8005556:	4689      	mov	r9, r1
 8005558:	4630      	mov	r0, r6
 800555a:	4639      	mov	r1, r7
 800555c:	f7fa fe40 	bl	80001e0 <__aeabi_dsub>
 8005560:	a385      	add	r3, pc, #532	@ (adr r3, 8005778 <__ieee754_rem_pio2+0x2f0>)
 8005562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005566:	f7fa fe3d 	bl	80001e4 <__adddf3>
 800556a:	f04f 35ff 	mov.w	r5, #4294967295
 800556e:	e9c4 8900 	strd	r8, r9, [r4]
 8005572:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005576:	e7c4      	b.n	8005502 <__ieee754_rem_pio2+0x7a>
 8005578:	a381      	add	r3, pc, #516	@ (adr r3, 8005780 <__ieee754_rem_pio2+0x2f8>)
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f7fa fe31 	bl	80001e4 <__adddf3>
 8005582:	a381      	add	r3, pc, #516	@ (adr r3, 8005788 <__ieee754_rem_pio2+0x300>)
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	4606      	mov	r6, r0
 800558a:	460f      	mov	r7, r1
 800558c:	f7fa fe2a 	bl	80001e4 <__adddf3>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4680      	mov	r8, r0
 8005596:	4689      	mov	r9, r1
 8005598:	4630      	mov	r0, r6
 800559a:	4639      	mov	r1, r7
 800559c:	f7fa fe20 	bl	80001e0 <__aeabi_dsub>
 80055a0:	a379      	add	r3, pc, #484	@ (adr r3, 8005788 <__ieee754_rem_pio2+0x300>)
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	e7de      	b.n	8005566 <__ieee754_rem_pio2+0xde>
 80055a8:	4b82      	ldr	r3, [pc, #520]	@ (80057b4 <__ieee754_rem_pio2+0x32c>)
 80055aa:	4598      	cmp	r8, r3
 80055ac:	f200 80d1 	bhi.w	8005752 <__ieee754_rem_pio2+0x2ca>
 80055b0:	f000 f966 	bl	8005880 <fabs>
 80055b4:	ec57 6b10 	vmov	r6, r7, d0
 80055b8:	a375      	add	r3, pc, #468	@ (adr r3, 8005790 <__ieee754_rem_pio2+0x308>)
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	4630      	mov	r0, r6
 80055c0:	4639      	mov	r1, r7
 80055c2:	f7fa ffc5 	bl	8000550 <__aeabi_dmul>
 80055c6:	4b7c      	ldr	r3, [pc, #496]	@ (80057b8 <__ieee754_rem_pio2+0x330>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	f7fa fe0b 	bl	80001e4 <__adddf3>
 80055ce:	f7fb fa59 	bl	8000a84 <__aeabi_d2iz>
 80055d2:	4605      	mov	r5, r0
 80055d4:	f7fa ff52 	bl	800047c <__aeabi_i2d>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055e0:	a363      	add	r3, pc, #396	@ (adr r3, 8005770 <__ieee754_rem_pio2+0x2e8>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f7fa ffb3 	bl	8000550 <__aeabi_dmul>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4630      	mov	r0, r6
 80055f0:	4639      	mov	r1, r7
 80055f2:	f7fa fdf5 	bl	80001e0 <__aeabi_dsub>
 80055f6:	a360      	add	r3, pc, #384	@ (adr r3, 8005778 <__ieee754_rem_pio2+0x2f0>)
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	4682      	mov	sl, r0
 80055fe:	468b      	mov	fp, r1
 8005600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005604:	f7fa ffa4 	bl	8000550 <__aeabi_dmul>
 8005608:	2d1f      	cmp	r5, #31
 800560a:	4606      	mov	r6, r0
 800560c:	460f      	mov	r7, r1
 800560e:	dc0c      	bgt.n	800562a <__ieee754_rem_pio2+0x1a2>
 8005610:	4b6a      	ldr	r3, [pc, #424]	@ (80057bc <__ieee754_rem_pio2+0x334>)
 8005612:	1e6a      	subs	r2, r5, #1
 8005614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005618:	4543      	cmp	r3, r8
 800561a:	d006      	beq.n	800562a <__ieee754_rem_pio2+0x1a2>
 800561c:	4632      	mov	r2, r6
 800561e:	463b      	mov	r3, r7
 8005620:	4650      	mov	r0, sl
 8005622:	4659      	mov	r1, fp
 8005624:	f7fa fddc 	bl	80001e0 <__aeabi_dsub>
 8005628:	e00e      	b.n	8005648 <__ieee754_rem_pio2+0x1c0>
 800562a:	463b      	mov	r3, r7
 800562c:	4632      	mov	r2, r6
 800562e:	4650      	mov	r0, sl
 8005630:	4659      	mov	r1, fp
 8005632:	f7fa fdd5 	bl	80001e0 <__aeabi_dsub>
 8005636:	ea4f 5328 	mov.w	r3, r8, asr #20
 800563a:	9305      	str	r3, [sp, #20]
 800563c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005640:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005644:	2b10      	cmp	r3, #16
 8005646:	dc02      	bgt.n	800564e <__ieee754_rem_pio2+0x1c6>
 8005648:	e9c4 0100 	strd	r0, r1, [r4]
 800564c:	e039      	b.n	80056c2 <__ieee754_rem_pio2+0x23a>
 800564e:	a34c      	add	r3, pc, #304	@ (adr r3, 8005780 <__ieee754_rem_pio2+0x2f8>)
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005658:	f7fa ff7a 	bl	8000550 <__aeabi_dmul>
 800565c:	4606      	mov	r6, r0
 800565e:	460f      	mov	r7, r1
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4650      	mov	r0, sl
 8005666:	4659      	mov	r1, fp
 8005668:	f7fa fdba 	bl	80001e0 <__aeabi_dsub>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4680      	mov	r8, r0
 8005672:	4689      	mov	r9, r1
 8005674:	4650      	mov	r0, sl
 8005676:	4659      	mov	r1, fp
 8005678:	f7fa fdb2 	bl	80001e0 <__aeabi_dsub>
 800567c:	4632      	mov	r2, r6
 800567e:	463b      	mov	r3, r7
 8005680:	f7fa fdae 	bl	80001e0 <__aeabi_dsub>
 8005684:	a340      	add	r3, pc, #256	@ (adr r3, 8005788 <__ieee754_rem_pio2+0x300>)
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	4606      	mov	r6, r0
 800568c:	460f      	mov	r7, r1
 800568e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005692:	f7fa ff5d 	bl	8000550 <__aeabi_dmul>
 8005696:	4632      	mov	r2, r6
 8005698:	463b      	mov	r3, r7
 800569a:	f7fa fda1 	bl	80001e0 <__aeabi_dsub>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4606      	mov	r6, r0
 80056a4:	460f      	mov	r7, r1
 80056a6:	4640      	mov	r0, r8
 80056a8:	4649      	mov	r1, r9
 80056aa:	f7fa fd99 	bl	80001e0 <__aeabi_dsub>
 80056ae:	9a05      	ldr	r2, [sp, #20]
 80056b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b31      	cmp	r3, #49	@ 0x31
 80056b8:	dc20      	bgt.n	80056fc <__ieee754_rem_pio2+0x274>
 80056ba:	e9c4 0100 	strd	r0, r1, [r4]
 80056be:	46c2      	mov	sl, r8
 80056c0:	46cb      	mov	fp, r9
 80056c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80056c6:	4650      	mov	r0, sl
 80056c8:	4642      	mov	r2, r8
 80056ca:	464b      	mov	r3, r9
 80056cc:	4659      	mov	r1, fp
 80056ce:	f7fa fd87 	bl	80001e0 <__aeabi_dsub>
 80056d2:	463b      	mov	r3, r7
 80056d4:	4632      	mov	r2, r6
 80056d6:	f7fa fd83 	bl	80001e0 <__aeabi_dsub>
 80056da:	9b04      	ldr	r3, [sp, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80056e2:	f6bf af0e 	bge.w	8005502 <__ieee754_rem_pio2+0x7a>
 80056e6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80056ea:	6063      	str	r3, [r4, #4]
 80056ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80056f0:	f8c4 8000 	str.w	r8, [r4]
 80056f4:	60a0      	str	r0, [r4, #8]
 80056f6:	60e3      	str	r3, [r4, #12]
 80056f8:	426d      	negs	r5, r5
 80056fa:	e702      	b.n	8005502 <__ieee754_rem_pio2+0x7a>
 80056fc:	a326      	add	r3, pc, #152	@ (adr r3, 8005798 <__ieee754_rem_pio2+0x310>)
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005706:	f7fa ff23 	bl	8000550 <__aeabi_dmul>
 800570a:	4606      	mov	r6, r0
 800570c:	460f      	mov	r7, r1
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4640      	mov	r0, r8
 8005714:	4649      	mov	r1, r9
 8005716:	f7fa fd63 	bl	80001e0 <__aeabi_dsub>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4682      	mov	sl, r0
 8005720:	468b      	mov	fp, r1
 8005722:	4640      	mov	r0, r8
 8005724:	4649      	mov	r1, r9
 8005726:	f7fa fd5b 	bl	80001e0 <__aeabi_dsub>
 800572a:	4632      	mov	r2, r6
 800572c:	463b      	mov	r3, r7
 800572e:	f7fa fd57 	bl	80001e0 <__aeabi_dsub>
 8005732:	a31b      	add	r3, pc, #108	@ (adr r3, 80057a0 <__ieee754_rem_pio2+0x318>)
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	4606      	mov	r6, r0
 800573a:	460f      	mov	r7, r1
 800573c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005740:	f7fa ff06 	bl	8000550 <__aeabi_dmul>
 8005744:	4632      	mov	r2, r6
 8005746:	463b      	mov	r3, r7
 8005748:	f7fa fd4a 	bl	80001e0 <__aeabi_dsub>
 800574c:	4606      	mov	r6, r0
 800574e:	460f      	mov	r7, r1
 8005750:	e764      	b.n	800561c <__ieee754_rem_pio2+0x194>
 8005752:	4b1b      	ldr	r3, [pc, #108]	@ (80057c0 <__ieee754_rem_pio2+0x338>)
 8005754:	4598      	cmp	r8, r3
 8005756:	d935      	bls.n	80057c4 <__ieee754_rem_pio2+0x33c>
 8005758:	4632      	mov	r2, r6
 800575a:	463b      	mov	r3, r7
 800575c:	4630      	mov	r0, r6
 800575e:	4639      	mov	r1, r7
 8005760:	f7fa fd3e 	bl	80001e0 <__aeabi_dsub>
 8005764:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005768:	e9c4 0100 	strd	r0, r1, [r4]
 800576c:	e69e      	b.n	80054ac <__ieee754_rem_pio2+0x24>
 800576e:	bf00      	nop
 8005770:	54400000 	.word	0x54400000
 8005774:	3ff921fb 	.word	0x3ff921fb
 8005778:	1a626331 	.word	0x1a626331
 800577c:	3dd0b461 	.word	0x3dd0b461
 8005780:	1a600000 	.word	0x1a600000
 8005784:	3dd0b461 	.word	0x3dd0b461
 8005788:	2e037073 	.word	0x2e037073
 800578c:	3ba3198a 	.word	0x3ba3198a
 8005790:	6dc9c883 	.word	0x6dc9c883
 8005794:	3fe45f30 	.word	0x3fe45f30
 8005798:	2e000000 	.word	0x2e000000
 800579c:	3ba3198a 	.word	0x3ba3198a
 80057a0:	252049c1 	.word	0x252049c1
 80057a4:	397b839a 	.word	0x397b839a
 80057a8:	3fe921fb 	.word	0x3fe921fb
 80057ac:	4002d97b 	.word	0x4002d97b
 80057b0:	3ff921fb 	.word	0x3ff921fb
 80057b4:	413921fb 	.word	0x413921fb
 80057b8:	3fe00000 	.word	0x3fe00000
 80057bc:	080064b0 	.word	0x080064b0
 80057c0:	7fefffff 	.word	0x7fefffff
 80057c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80057c8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80057cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80057d0:	4630      	mov	r0, r6
 80057d2:	460f      	mov	r7, r1
 80057d4:	f7fb f956 	bl	8000a84 <__aeabi_d2iz>
 80057d8:	f7fa fe50 	bl	800047c <__aeabi_i2d>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4630      	mov	r0, r6
 80057e2:	4639      	mov	r1, r7
 80057e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80057e8:	f7fa fcfa 	bl	80001e0 <__aeabi_dsub>
 80057ec:	4b22      	ldr	r3, [pc, #136]	@ (8005878 <__ieee754_rem_pio2+0x3f0>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	f7fa feae 	bl	8000550 <__aeabi_dmul>
 80057f4:	460f      	mov	r7, r1
 80057f6:	4606      	mov	r6, r0
 80057f8:	f7fb f944 	bl	8000a84 <__aeabi_d2iz>
 80057fc:	f7fa fe3e 	bl	800047c <__aeabi_i2d>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4630      	mov	r0, r6
 8005806:	4639      	mov	r1, r7
 8005808:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800580c:	f7fa fce8 	bl	80001e0 <__aeabi_dsub>
 8005810:	4b19      	ldr	r3, [pc, #100]	@ (8005878 <__ieee754_rem_pio2+0x3f0>)
 8005812:	2200      	movs	r2, #0
 8005814:	f7fa fe9c 	bl	8000550 <__aeabi_dmul>
 8005818:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800581c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005820:	f04f 0803 	mov.w	r8, #3
 8005824:	2600      	movs	r6, #0
 8005826:	2700      	movs	r7, #0
 8005828:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800582c:	4632      	mov	r2, r6
 800582e:	463b      	mov	r3, r7
 8005830:	46c2      	mov	sl, r8
 8005832:	f108 38ff 	add.w	r8, r8, #4294967295
 8005836:	f7fb f8f3 	bl	8000a20 <__aeabi_dcmpeq>
 800583a:	2800      	cmp	r0, #0
 800583c:	d1f4      	bne.n	8005828 <__ieee754_rem_pio2+0x3a0>
 800583e:	4b0f      	ldr	r3, [pc, #60]	@ (800587c <__ieee754_rem_pio2+0x3f4>)
 8005840:	9301      	str	r3, [sp, #4]
 8005842:	2302      	movs	r3, #2
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	462a      	mov	r2, r5
 8005848:	4653      	mov	r3, sl
 800584a:	4621      	mov	r1, r4
 800584c:	a806      	add	r0, sp, #24
 800584e:	f000 f81f 	bl	8005890 <__kernel_rem_pio2>
 8005852:	9b04      	ldr	r3, [sp, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	4605      	mov	r5, r0
 8005858:	f6bf ae53 	bge.w	8005502 <__ieee754_rem_pio2+0x7a>
 800585c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005860:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005864:	e9c4 2300 	strd	r2, r3, [r4]
 8005868:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800586c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005870:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005874:	e740      	b.n	80056f8 <__ieee754_rem_pio2+0x270>
 8005876:	bf00      	nop
 8005878:	41700000 	.word	0x41700000
 800587c:	08006530 	.word	0x08006530

08005880 <fabs>:
 8005880:	ec51 0b10 	vmov	r0, r1, d0
 8005884:	4602      	mov	r2, r0
 8005886:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800588a:	ec43 2b10 	vmov	d0, r2, r3
 800588e:	4770      	bx	lr

08005890 <__kernel_rem_pio2>:
 8005890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005894:	ed2d 8b02 	vpush	{d8}
 8005898:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800589c:	f112 0f14 	cmn.w	r2, #20
 80058a0:	9306      	str	r3, [sp, #24]
 80058a2:	9104      	str	r1, [sp, #16]
 80058a4:	4bbe      	ldr	r3, [pc, #760]	@ (8005ba0 <__kernel_rem_pio2+0x310>)
 80058a6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80058a8:	9008      	str	r0, [sp, #32]
 80058aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	9b06      	ldr	r3, [sp, #24]
 80058b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80058b6:	bfa8      	it	ge
 80058b8:	1ed4      	subge	r4, r2, #3
 80058ba:	9305      	str	r3, [sp, #20]
 80058bc:	bfb2      	itee	lt
 80058be:	2400      	movlt	r4, #0
 80058c0:	2318      	movge	r3, #24
 80058c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80058c6:	f06f 0317 	mvn.w	r3, #23
 80058ca:	fb04 3303 	mla	r3, r4, r3, r3
 80058ce:	eb03 0b02 	add.w	fp, r3, r2
 80058d2:	9b00      	ldr	r3, [sp, #0]
 80058d4:	9a05      	ldr	r2, [sp, #20]
 80058d6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005b90 <__kernel_rem_pio2+0x300>
 80058da:	eb03 0802 	add.w	r8, r3, r2
 80058de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80058e0:	1aa7      	subs	r7, r4, r2
 80058e2:	ae20      	add	r6, sp, #128	@ 0x80
 80058e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80058e8:	2500      	movs	r5, #0
 80058ea:	4545      	cmp	r5, r8
 80058ec:	dd13      	ble.n	8005916 <__kernel_rem_pio2+0x86>
 80058ee:	9b06      	ldr	r3, [sp, #24]
 80058f0:	aa20      	add	r2, sp, #128	@ 0x80
 80058f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80058f6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80058fa:	f04f 0800 	mov.w	r8, #0
 80058fe:	9b00      	ldr	r3, [sp, #0]
 8005900:	4598      	cmp	r8, r3
 8005902:	dc31      	bgt.n	8005968 <__kernel_rem_pio2+0xd8>
 8005904:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005b90 <__kernel_rem_pio2+0x300>
 8005908:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800590c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005910:	462f      	mov	r7, r5
 8005912:	2600      	movs	r6, #0
 8005914:	e01b      	b.n	800594e <__kernel_rem_pio2+0xbe>
 8005916:	42ef      	cmn	r7, r5
 8005918:	d407      	bmi.n	800592a <__kernel_rem_pio2+0x9a>
 800591a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800591e:	f7fa fdad 	bl	800047c <__aeabi_i2d>
 8005922:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005926:	3501      	adds	r5, #1
 8005928:	e7df      	b.n	80058ea <__kernel_rem_pio2+0x5a>
 800592a:	ec51 0b18 	vmov	r0, r1, d8
 800592e:	e7f8      	b.n	8005922 <__kernel_rem_pio2+0x92>
 8005930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005934:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005938:	f7fa fe0a 	bl	8000550 <__aeabi_dmul>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005944:	f7fa fc4e 	bl	80001e4 <__adddf3>
 8005948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800594c:	3601      	adds	r6, #1
 800594e:	9b05      	ldr	r3, [sp, #20]
 8005950:	429e      	cmp	r6, r3
 8005952:	f1a7 0708 	sub.w	r7, r7, #8
 8005956:	ddeb      	ble.n	8005930 <__kernel_rem_pio2+0xa0>
 8005958:	ed9d 7b02 	vldr	d7, [sp, #8]
 800595c:	f108 0801 	add.w	r8, r8, #1
 8005960:	ecaa 7b02 	vstmia	sl!, {d7}
 8005964:	3508      	adds	r5, #8
 8005966:	e7ca      	b.n	80058fe <__kernel_rem_pio2+0x6e>
 8005968:	9b00      	ldr	r3, [sp, #0]
 800596a:	f8dd 8000 	ldr.w	r8, [sp]
 800596e:	aa0c      	add	r2, sp, #48	@ 0x30
 8005970:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005974:	930a      	str	r3, [sp, #40]	@ 0x28
 8005976:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005978:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800597c:	9309      	str	r3, [sp, #36]	@ 0x24
 800597e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005982:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005984:	ab98      	add	r3, sp, #608	@ 0x260
 8005986:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800598a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800598e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005992:	ac0c      	add	r4, sp, #48	@ 0x30
 8005994:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005996:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800599a:	46a1      	mov	r9, r4
 800599c:	46c2      	mov	sl, r8
 800599e:	f1ba 0f00 	cmp.w	sl, #0
 80059a2:	f1a5 0508 	sub.w	r5, r5, #8
 80059a6:	dc77      	bgt.n	8005a98 <__kernel_rem_pio2+0x208>
 80059a8:	4658      	mov	r0, fp
 80059aa:	ed9d 0b02 	vldr	d0, [sp, #8]
 80059ae:	f000 fac7 	bl	8005f40 <scalbn>
 80059b2:	ec57 6b10 	vmov	r6, r7, d0
 80059b6:	2200      	movs	r2, #0
 80059b8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80059bc:	4630      	mov	r0, r6
 80059be:	4639      	mov	r1, r7
 80059c0:	f7fa fdc6 	bl	8000550 <__aeabi_dmul>
 80059c4:	ec41 0b10 	vmov	d0, r0, r1
 80059c8:	f000 fb3a 	bl	8006040 <floor>
 80059cc:	4b75      	ldr	r3, [pc, #468]	@ (8005ba4 <__kernel_rem_pio2+0x314>)
 80059ce:	ec51 0b10 	vmov	r0, r1, d0
 80059d2:	2200      	movs	r2, #0
 80059d4:	f7fa fdbc 	bl	8000550 <__aeabi_dmul>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4630      	mov	r0, r6
 80059de:	4639      	mov	r1, r7
 80059e0:	f7fa fbfe 	bl	80001e0 <__aeabi_dsub>
 80059e4:	460f      	mov	r7, r1
 80059e6:	4606      	mov	r6, r0
 80059e8:	f7fb f84c 	bl	8000a84 <__aeabi_d2iz>
 80059ec:	9002      	str	r0, [sp, #8]
 80059ee:	f7fa fd45 	bl	800047c <__aeabi_i2d>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4630      	mov	r0, r6
 80059f8:	4639      	mov	r1, r7
 80059fa:	f7fa fbf1 	bl	80001e0 <__aeabi_dsub>
 80059fe:	f1bb 0f00 	cmp.w	fp, #0
 8005a02:	4606      	mov	r6, r0
 8005a04:	460f      	mov	r7, r1
 8005a06:	dd6c      	ble.n	8005ae2 <__kernel_rem_pio2+0x252>
 8005a08:	f108 31ff 	add.w	r1, r8, #4294967295
 8005a0c:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a0e:	9d02      	ldr	r5, [sp, #8]
 8005a10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a14:	f1cb 0018 	rsb	r0, fp, #24
 8005a18:	fa43 f200 	asr.w	r2, r3, r0
 8005a1c:	4415      	add	r5, r2
 8005a1e:	4082      	lsls	r2, r0
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	aa0c      	add	r2, sp, #48	@ 0x30
 8005a24:	9502      	str	r5, [sp, #8]
 8005a26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005a2a:	f1cb 0217 	rsb	r2, fp, #23
 8005a2e:	fa43 f902 	asr.w	r9, r3, r2
 8005a32:	f1b9 0f00 	cmp.w	r9, #0
 8005a36:	dd64      	ble.n	8005b02 <__kernel_rem_pio2+0x272>
 8005a38:	9b02      	ldr	r3, [sp, #8]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	9302      	str	r3, [sp, #8]
 8005a40:	4615      	mov	r5, r2
 8005a42:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005a46:	4590      	cmp	r8, r2
 8005a48:	f300 80b8 	bgt.w	8005bbc <__kernel_rem_pio2+0x32c>
 8005a4c:	f1bb 0f00 	cmp.w	fp, #0
 8005a50:	dd07      	ble.n	8005a62 <__kernel_rem_pio2+0x1d2>
 8005a52:	f1bb 0f01 	cmp.w	fp, #1
 8005a56:	f000 80bf 	beq.w	8005bd8 <__kernel_rem_pio2+0x348>
 8005a5a:	f1bb 0f02 	cmp.w	fp, #2
 8005a5e:	f000 80c6 	beq.w	8005bee <__kernel_rem_pio2+0x35e>
 8005a62:	f1b9 0f02 	cmp.w	r9, #2
 8005a66:	d14c      	bne.n	8005b02 <__kernel_rem_pio2+0x272>
 8005a68:	4632      	mov	r2, r6
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	494e      	ldr	r1, [pc, #312]	@ (8005ba8 <__kernel_rem_pio2+0x318>)
 8005a6e:	2000      	movs	r0, #0
 8005a70:	f7fa fbb6 	bl	80001e0 <__aeabi_dsub>
 8005a74:	4606      	mov	r6, r0
 8005a76:	460f      	mov	r7, r1
 8005a78:	2d00      	cmp	r5, #0
 8005a7a:	d042      	beq.n	8005b02 <__kernel_rem_pio2+0x272>
 8005a7c:	4658      	mov	r0, fp
 8005a7e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005b98 <__kernel_rem_pio2+0x308>
 8005a82:	f000 fa5d 	bl	8005f40 <scalbn>
 8005a86:	4630      	mov	r0, r6
 8005a88:	4639      	mov	r1, r7
 8005a8a:	ec53 2b10 	vmov	r2, r3, d0
 8005a8e:	f7fa fba7 	bl	80001e0 <__aeabi_dsub>
 8005a92:	4606      	mov	r6, r0
 8005a94:	460f      	mov	r7, r1
 8005a96:	e034      	b.n	8005b02 <__kernel_rem_pio2+0x272>
 8005a98:	4b44      	ldr	r3, [pc, #272]	@ (8005bac <__kernel_rem_pio2+0x31c>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aa0:	f7fa fd56 	bl	8000550 <__aeabi_dmul>
 8005aa4:	f7fa ffee 	bl	8000a84 <__aeabi_d2iz>
 8005aa8:	f7fa fce8 	bl	800047c <__aeabi_i2d>
 8005aac:	4b40      	ldr	r3, [pc, #256]	@ (8005bb0 <__kernel_rem_pio2+0x320>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	460f      	mov	r7, r1
 8005ab4:	f7fa fd4c 	bl	8000550 <__aeabi_dmul>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ac0:	f7fa fb8e 	bl	80001e0 <__aeabi_dsub>
 8005ac4:	f7fa ffde 	bl	8000a84 <__aeabi_d2iz>
 8005ac8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005acc:	f849 0b04 	str.w	r0, [r9], #4
 8005ad0:	4639      	mov	r1, r7
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f7fa fb86 	bl	80001e4 <__adddf3>
 8005ad8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ae0:	e75d      	b.n	800599e <__kernel_rem_pio2+0x10e>
 8005ae2:	d107      	bne.n	8005af4 <__kernel_rem_pio2+0x264>
 8005ae4:	f108 33ff 	add.w	r3, r8, #4294967295
 8005ae8:	aa0c      	add	r2, sp, #48	@ 0x30
 8005aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aee:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005af2:	e79e      	b.n	8005a32 <__kernel_rem_pio2+0x1a2>
 8005af4:	4b2f      	ldr	r3, [pc, #188]	@ (8005bb4 <__kernel_rem_pio2+0x324>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	f7fa ffb0 	bl	8000a5c <__aeabi_dcmpge>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	d143      	bne.n	8005b88 <__kernel_rem_pio2+0x2f8>
 8005b00:	4681      	mov	r9, r0
 8005b02:	2200      	movs	r2, #0
 8005b04:	2300      	movs	r3, #0
 8005b06:	4630      	mov	r0, r6
 8005b08:	4639      	mov	r1, r7
 8005b0a:	f7fa ff89 	bl	8000a20 <__aeabi_dcmpeq>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	f000 80bf 	beq.w	8005c92 <__kernel_rem_pio2+0x402>
 8005b14:	f108 33ff 	add.w	r3, r8, #4294967295
 8005b18:	2200      	movs	r2, #0
 8005b1a:	9900      	ldr	r1, [sp, #0]
 8005b1c:	428b      	cmp	r3, r1
 8005b1e:	da6e      	bge.n	8005bfe <__kernel_rem_pio2+0x36e>
 8005b20:	2a00      	cmp	r2, #0
 8005b22:	f000 8089 	beq.w	8005c38 <__kernel_rem_pio2+0x3a8>
 8005b26:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8005b2c:	f1ab 0b18 	sub.w	fp, fp, #24
 8005b30:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0f6      	beq.n	8005b26 <__kernel_rem_pio2+0x296>
 8005b38:	4658      	mov	r0, fp
 8005b3a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005b98 <__kernel_rem_pio2+0x308>
 8005b3e:	f000 f9ff 	bl	8005f40 <scalbn>
 8005b42:	f108 0301 	add.w	r3, r8, #1
 8005b46:	00da      	lsls	r2, r3, #3
 8005b48:	9205      	str	r2, [sp, #20]
 8005b4a:	ec55 4b10 	vmov	r4, r5, d0
 8005b4e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005b50:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8005bac <__kernel_rem_pio2+0x31c>
 8005b54:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005b58:	4646      	mov	r6, r8
 8005b5a:	f04f 0a00 	mov.w	sl, #0
 8005b5e:	2e00      	cmp	r6, #0
 8005b60:	f280 80cf 	bge.w	8005d02 <__kernel_rem_pio2+0x472>
 8005b64:	4644      	mov	r4, r8
 8005b66:	2c00      	cmp	r4, #0
 8005b68:	f2c0 80fd 	blt.w	8005d66 <__kernel_rem_pio2+0x4d6>
 8005b6c:	4b12      	ldr	r3, [pc, #72]	@ (8005bb8 <__kernel_rem_pio2+0x328>)
 8005b6e:	461f      	mov	r7, r3
 8005b70:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005b72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b76:	9306      	str	r3, [sp, #24]
 8005b78:	f04f 0a00 	mov.w	sl, #0
 8005b7c:	f04f 0b00 	mov.w	fp, #0
 8005b80:	2600      	movs	r6, #0
 8005b82:	eba8 0504 	sub.w	r5, r8, r4
 8005b86:	e0e2      	b.n	8005d4e <__kernel_rem_pio2+0x4be>
 8005b88:	f04f 0902 	mov.w	r9, #2
 8005b8c:	e754      	b.n	8005a38 <__kernel_rem_pio2+0x1a8>
 8005b8e:	bf00      	nop
	...
 8005b9c:	3ff00000 	.word	0x3ff00000
 8005ba0:	08006678 	.word	0x08006678
 8005ba4:	40200000 	.word	0x40200000
 8005ba8:	3ff00000 	.word	0x3ff00000
 8005bac:	3e700000 	.word	0x3e700000
 8005bb0:	41700000 	.word	0x41700000
 8005bb4:	3fe00000 	.word	0x3fe00000
 8005bb8:	08006638 	.word	0x08006638
 8005bbc:	f854 3b04 	ldr.w	r3, [r4], #4
 8005bc0:	b945      	cbnz	r5, 8005bd4 <__kernel_rem_pio2+0x344>
 8005bc2:	b123      	cbz	r3, 8005bce <__kernel_rem_pio2+0x33e>
 8005bc4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005bc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	3201      	adds	r2, #1
 8005bd0:	461d      	mov	r5, r3
 8005bd2:	e738      	b.n	8005a46 <__kernel_rem_pio2+0x1b6>
 8005bd4:	1acb      	subs	r3, r1, r3
 8005bd6:	e7f7      	b.n	8005bc8 <__kernel_rem_pio2+0x338>
 8005bd8:	f108 32ff 	add.w	r2, r8, #4294967295
 8005bdc:	ab0c      	add	r3, sp, #48	@ 0x30
 8005bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005be6:	a90c      	add	r1, sp, #48	@ 0x30
 8005be8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005bec:	e739      	b.n	8005a62 <__kernel_rem_pio2+0x1d2>
 8005bee:	f108 32ff 	add.w	r2, r8, #4294967295
 8005bf2:	ab0c      	add	r3, sp, #48	@ 0x30
 8005bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005bfc:	e7f3      	b.n	8005be6 <__kernel_rem_pio2+0x356>
 8005bfe:	a90c      	add	r1, sp, #48	@ 0x30
 8005c00:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	430a      	orrs	r2, r1
 8005c08:	e787      	b.n	8005b1a <__kernel_rem_pio2+0x28a>
 8005c0a:	3401      	adds	r4, #1
 8005c0c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005c10:	2a00      	cmp	r2, #0
 8005c12:	d0fa      	beq.n	8005c0a <__kernel_rem_pio2+0x37a>
 8005c14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c16:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005c1a:	eb0d 0503 	add.w	r5, sp, r3
 8005c1e:	9b06      	ldr	r3, [sp, #24]
 8005c20:	aa20      	add	r2, sp, #128	@ 0x80
 8005c22:	4443      	add	r3, r8
 8005c24:	f108 0701 	add.w	r7, r8, #1
 8005c28:	3d98      	subs	r5, #152	@ 0x98
 8005c2a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005c2e:	4444      	add	r4, r8
 8005c30:	42bc      	cmp	r4, r7
 8005c32:	da04      	bge.n	8005c3e <__kernel_rem_pio2+0x3ae>
 8005c34:	46a0      	mov	r8, r4
 8005c36:	e6a2      	b.n	800597e <__kernel_rem_pio2+0xee>
 8005c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c3a:	2401      	movs	r4, #1
 8005c3c:	e7e6      	b.n	8005c0c <__kernel_rem_pio2+0x37c>
 8005c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c40:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005c44:	f7fa fc1a 	bl	800047c <__aeabi_i2d>
 8005c48:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005f10 <__kernel_rem_pio2+0x680>
 8005c4c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005c50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c58:	46b2      	mov	sl, r6
 8005c5a:	f04f 0800 	mov.w	r8, #0
 8005c5e:	9b05      	ldr	r3, [sp, #20]
 8005c60:	4598      	cmp	r8, r3
 8005c62:	dd05      	ble.n	8005c70 <__kernel_rem_pio2+0x3e0>
 8005c64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c68:	3701      	adds	r7, #1
 8005c6a:	eca5 7b02 	vstmia	r5!, {d7}
 8005c6e:	e7df      	b.n	8005c30 <__kernel_rem_pio2+0x3a0>
 8005c70:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005c74:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005c78:	f7fa fc6a 	bl	8000550 <__aeabi_dmul>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c84:	f7fa faae 	bl	80001e4 <__adddf3>
 8005c88:	f108 0801 	add.w	r8, r8, #1
 8005c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c90:	e7e5      	b.n	8005c5e <__kernel_rem_pio2+0x3ce>
 8005c92:	f1cb 0000 	rsb	r0, fp, #0
 8005c96:	ec47 6b10 	vmov	d0, r6, r7
 8005c9a:	f000 f951 	bl	8005f40 <scalbn>
 8005c9e:	ec55 4b10 	vmov	r4, r5, d0
 8005ca2:	4b9d      	ldr	r3, [pc, #628]	@ (8005f18 <__kernel_rem_pio2+0x688>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4629      	mov	r1, r5
 8005caa:	f7fa fed7 	bl	8000a5c <__aeabi_dcmpge>
 8005cae:	b300      	cbz	r0, 8005cf2 <__kernel_rem_pio2+0x462>
 8005cb0:	4b9a      	ldr	r3, [pc, #616]	@ (8005f1c <__kernel_rem_pio2+0x68c>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	f7fa fc4a 	bl	8000550 <__aeabi_dmul>
 8005cbc:	f7fa fee2 	bl	8000a84 <__aeabi_d2iz>
 8005cc0:	4606      	mov	r6, r0
 8005cc2:	f7fa fbdb 	bl	800047c <__aeabi_i2d>
 8005cc6:	4b94      	ldr	r3, [pc, #592]	@ (8005f18 <__kernel_rem_pio2+0x688>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f7fa fc41 	bl	8000550 <__aeabi_dmul>
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f7fa fa83 	bl	80001e0 <__aeabi_dsub>
 8005cda:	f7fa fed3 	bl	8000a84 <__aeabi_d2iz>
 8005cde:	ab0c      	add	r3, sp, #48	@ 0x30
 8005ce0:	f10b 0b18 	add.w	fp, fp, #24
 8005ce4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005ce8:	f108 0801 	add.w	r8, r8, #1
 8005cec:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005cf0:	e722      	b.n	8005b38 <__kernel_rem_pio2+0x2a8>
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	4629      	mov	r1, r5
 8005cf6:	f7fa fec5 	bl	8000a84 <__aeabi_d2iz>
 8005cfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8005cfc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005d00:	e71a      	b.n	8005b38 <__kernel_rem_pio2+0x2a8>
 8005d02:	ab0c      	add	r3, sp, #48	@ 0x30
 8005d04:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d08:	f7fa fbb8 	bl	800047c <__aeabi_i2d>
 8005d0c:	4622      	mov	r2, r4
 8005d0e:	462b      	mov	r3, r5
 8005d10:	f7fa fc1e 	bl	8000550 <__aeabi_dmul>
 8005d14:	4652      	mov	r2, sl
 8005d16:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005d1a:	465b      	mov	r3, fp
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	4629      	mov	r1, r5
 8005d20:	f7fa fc16 	bl	8000550 <__aeabi_dmul>
 8005d24:	3e01      	subs	r6, #1
 8005d26:	4604      	mov	r4, r0
 8005d28:	460d      	mov	r5, r1
 8005d2a:	e718      	b.n	8005b5e <__kernel_rem_pio2+0x2ce>
 8005d2c:	9906      	ldr	r1, [sp, #24]
 8005d2e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005d32:	9106      	str	r1, [sp, #24]
 8005d34:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005d38:	f7fa fc0a 	bl	8000550 <__aeabi_dmul>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4650      	mov	r0, sl
 8005d42:	4659      	mov	r1, fp
 8005d44:	f7fa fa4e 	bl	80001e4 <__adddf3>
 8005d48:	3601      	adds	r6, #1
 8005d4a:	4682      	mov	sl, r0
 8005d4c:	468b      	mov	fp, r1
 8005d4e:	9b00      	ldr	r3, [sp, #0]
 8005d50:	429e      	cmp	r6, r3
 8005d52:	dc01      	bgt.n	8005d58 <__kernel_rem_pio2+0x4c8>
 8005d54:	42b5      	cmp	r5, r6
 8005d56:	dae9      	bge.n	8005d2c <__kernel_rem_pio2+0x49c>
 8005d58:	ab48      	add	r3, sp, #288	@ 0x120
 8005d5a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005d5e:	e9c5 ab00 	strd	sl, fp, [r5]
 8005d62:	3c01      	subs	r4, #1
 8005d64:	e6ff      	b.n	8005b66 <__kernel_rem_pio2+0x2d6>
 8005d66:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	dc0b      	bgt.n	8005d84 <__kernel_rem_pio2+0x4f4>
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	dc39      	bgt.n	8005de4 <__kernel_rem_pio2+0x554>
 8005d70:	d05d      	beq.n	8005e2e <__kernel_rem_pio2+0x59e>
 8005d72:	9b02      	ldr	r3, [sp, #8]
 8005d74:	f003 0007 	and.w	r0, r3, #7
 8005d78:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005d7c:	ecbd 8b02 	vpop	{d8}
 8005d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d84:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d1f3      	bne.n	8005d72 <__kernel_rem_pio2+0x4e2>
 8005d8a:	9b05      	ldr	r3, [sp, #20]
 8005d8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005d90:	eb0d 0403 	add.w	r4, sp, r3
 8005d94:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005d98:	4625      	mov	r5, r4
 8005d9a:	46c2      	mov	sl, r8
 8005d9c:	f1ba 0f00 	cmp.w	sl, #0
 8005da0:	f1a5 0508 	sub.w	r5, r5, #8
 8005da4:	dc6b      	bgt.n	8005e7e <__kernel_rem_pio2+0x5ee>
 8005da6:	4645      	mov	r5, r8
 8005da8:	2d01      	cmp	r5, #1
 8005daa:	f1a4 0408 	sub.w	r4, r4, #8
 8005dae:	f300 8087 	bgt.w	8005ec0 <__kernel_rem_pio2+0x630>
 8005db2:	9c05      	ldr	r4, [sp, #20]
 8005db4:	ab48      	add	r3, sp, #288	@ 0x120
 8005db6:	441c      	add	r4, r3
 8005db8:	2000      	movs	r0, #0
 8005dba:	2100      	movs	r1, #0
 8005dbc:	f1b8 0f01 	cmp.w	r8, #1
 8005dc0:	f300 809c 	bgt.w	8005efc <__kernel_rem_pio2+0x66c>
 8005dc4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005dc8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005dcc:	f1b9 0f00 	cmp.w	r9, #0
 8005dd0:	f040 80a6 	bne.w	8005f20 <__kernel_rem_pio2+0x690>
 8005dd4:	9b04      	ldr	r3, [sp, #16]
 8005dd6:	e9c3 7800 	strd	r7, r8, [r3]
 8005dda:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005dde:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005de2:	e7c6      	b.n	8005d72 <__kernel_rem_pio2+0x4e2>
 8005de4:	9d05      	ldr	r5, [sp, #20]
 8005de6:	ab48      	add	r3, sp, #288	@ 0x120
 8005de8:	441d      	add	r5, r3
 8005dea:	4644      	mov	r4, r8
 8005dec:	2000      	movs	r0, #0
 8005dee:	2100      	movs	r1, #0
 8005df0:	2c00      	cmp	r4, #0
 8005df2:	da35      	bge.n	8005e60 <__kernel_rem_pio2+0x5d0>
 8005df4:	f1b9 0f00 	cmp.w	r9, #0
 8005df8:	d038      	beq.n	8005e6c <__kernel_rem_pio2+0x5dc>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e00:	9c04      	ldr	r4, [sp, #16]
 8005e02:	e9c4 2300 	strd	r2, r3, [r4]
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005e0e:	f7fa f9e7 	bl	80001e0 <__aeabi_dsub>
 8005e12:	ad4a      	add	r5, sp, #296	@ 0x128
 8005e14:	2401      	movs	r4, #1
 8005e16:	45a0      	cmp	r8, r4
 8005e18:	da2b      	bge.n	8005e72 <__kernel_rem_pio2+0x5e2>
 8005e1a:	f1b9 0f00 	cmp.w	r9, #0
 8005e1e:	d002      	beq.n	8005e26 <__kernel_rem_pio2+0x596>
 8005e20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e24:	4619      	mov	r1, r3
 8005e26:	9b04      	ldr	r3, [sp, #16]
 8005e28:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005e2c:	e7a1      	b.n	8005d72 <__kernel_rem_pio2+0x4e2>
 8005e2e:	9c05      	ldr	r4, [sp, #20]
 8005e30:	ab48      	add	r3, sp, #288	@ 0x120
 8005e32:	441c      	add	r4, r3
 8005e34:	2000      	movs	r0, #0
 8005e36:	2100      	movs	r1, #0
 8005e38:	f1b8 0f00 	cmp.w	r8, #0
 8005e3c:	da09      	bge.n	8005e52 <__kernel_rem_pio2+0x5c2>
 8005e3e:	f1b9 0f00 	cmp.w	r9, #0
 8005e42:	d002      	beq.n	8005e4a <__kernel_rem_pio2+0x5ba>
 8005e44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e48:	4619      	mov	r1, r3
 8005e4a:	9b04      	ldr	r3, [sp, #16]
 8005e4c:	e9c3 0100 	strd	r0, r1, [r3]
 8005e50:	e78f      	b.n	8005d72 <__kernel_rem_pio2+0x4e2>
 8005e52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e56:	f7fa f9c5 	bl	80001e4 <__adddf3>
 8005e5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e5e:	e7eb      	b.n	8005e38 <__kernel_rem_pio2+0x5a8>
 8005e60:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005e64:	f7fa f9be 	bl	80001e4 <__adddf3>
 8005e68:	3c01      	subs	r4, #1
 8005e6a:	e7c1      	b.n	8005df0 <__kernel_rem_pio2+0x560>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	e7c6      	b.n	8005e00 <__kernel_rem_pio2+0x570>
 8005e72:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005e76:	f7fa f9b5 	bl	80001e4 <__adddf3>
 8005e7a:	3401      	adds	r4, #1
 8005e7c:	e7cb      	b.n	8005e16 <__kernel_rem_pio2+0x586>
 8005e7e:	ed95 7b00 	vldr	d7, [r5]
 8005e82:	ed8d 7b00 	vstr	d7, [sp]
 8005e86:	ed95 7b02 	vldr	d7, [r5, #8]
 8005e8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e8e:	ec53 2b17 	vmov	r2, r3, d7
 8005e92:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005e96:	f7fa f9a5 	bl	80001e4 <__adddf3>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	460f      	mov	r7, r1
 8005ea2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ea6:	f7fa f99b 	bl	80001e0 <__aeabi_dsub>
 8005eaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005eae:	f7fa f999 	bl	80001e4 <__adddf3>
 8005eb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eb6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005eba:	e9c5 6700 	strd	r6, r7, [r5]
 8005ebe:	e76d      	b.n	8005d9c <__kernel_rem_pio2+0x50c>
 8005ec0:	ed94 7b00 	vldr	d7, [r4]
 8005ec4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005ec8:	ec51 0b17 	vmov	r0, r1, d7
 8005ecc:	4652      	mov	r2, sl
 8005ece:	465b      	mov	r3, fp
 8005ed0:	ed8d 7b00 	vstr	d7, [sp]
 8005ed4:	f7fa f986 	bl	80001e4 <__adddf3>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4606      	mov	r6, r0
 8005ede:	460f      	mov	r7, r1
 8005ee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ee4:	f7fa f97c 	bl	80001e0 <__aeabi_dsub>
 8005ee8:	4652      	mov	r2, sl
 8005eea:	465b      	mov	r3, fp
 8005eec:	f7fa f97a 	bl	80001e4 <__adddf3>
 8005ef0:	3d01      	subs	r5, #1
 8005ef2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005ef6:	e9c4 6700 	strd	r6, r7, [r4]
 8005efa:	e755      	b.n	8005da8 <__kernel_rem_pio2+0x518>
 8005efc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005f00:	f7fa f970 	bl	80001e4 <__adddf3>
 8005f04:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f08:	e758      	b.n	8005dbc <__kernel_rem_pio2+0x52c>
 8005f0a:	bf00      	nop
 8005f0c:	f3af 8000 	nop.w
	...
 8005f18:	41700000 	.word	0x41700000
 8005f1c:	3e700000 	.word	0x3e700000
 8005f20:	9b04      	ldr	r3, [sp, #16]
 8005f22:	9a04      	ldr	r2, [sp, #16]
 8005f24:	601f      	str	r7, [r3, #0]
 8005f26:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005f2a:	605c      	str	r4, [r3, #4]
 8005f2c:	609d      	str	r5, [r3, #8]
 8005f2e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005f32:	60d3      	str	r3, [r2, #12]
 8005f34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f38:	6110      	str	r0, [r2, #16]
 8005f3a:	6153      	str	r3, [r2, #20]
 8005f3c:	e719      	b.n	8005d72 <__kernel_rem_pio2+0x4e2>
 8005f3e:	bf00      	nop

08005f40 <scalbn>:
 8005f40:	b570      	push	{r4, r5, r6, lr}
 8005f42:	ec55 4b10 	vmov	r4, r5, d0
 8005f46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005f4a:	4606      	mov	r6, r0
 8005f4c:	462b      	mov	r3, r5
 8005f4e:	b991      	cbnz	r1, 8005f76 <scalbn+0x36>
 8005f50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005f54:	4323      	orrs	r3, r4
 8005f56:	d03d      	beq.n	8005fd4 <scalbn+0x94>
 8005f58:	4b35      	ldr	r3, [pc, #212]	@ (8006030 <scalbn+0xf0>)
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f7fa faf6 	bl	8000550 <__aeabi_dmul>
 8005f64:	4b33      	ldr	r3, [pc, #204]	@ (8006034 <scalbn+0xf4>)
 8005f66:	429e      	cmp	r6, r3
 8005f68:	4604      	mov	r4, r0
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	da0f      	bge.n	8005f8e <scalbn+0x4e>
 8005f6e:	a328      	add	r3, pc, #160	@ (adr r3, 8006010 <scalbn+0xd0>)
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	e01e      	b.n	8005fb4 <scalbn+0x74>
 8005f76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005f7a:	4291      	cmp	r1, r2
 8005f7c:	d10b      	bne.n	8005f96 <scalbn+0x56>
 8005f7e:	4622      	mov	r2, r4
 8005f80:	4620      	mov	r0, r4
 8005f82:	4629      	mov	r1, r5
 8005f84:	f7fa f92e 	bl	80001e4 <__adddf3>
 8005f88:	4604      	mov	r4, r0
 8005f8a:	460d      	mov	r5, r1
 8005f8c:	e022      	b.n	8005fd4 <scalbn+0x94>
 8005f8e:	460b      	mov	r3, r1
 8005f90:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005f94:	3936      	subs	r1, #54	@ 0x36
 8005f96:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005f9a:	4296      	cmp	r6, r2
 8005f9c:	dd0d      	ble.n	8005fba <scalbn+0x7a>
 8005f9e:	2d00      	cmp	r5, #0
 8005fa0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006018 <scalbn+0xd8>)
 8005fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fa6:	da02      	bge.n	8005fae <scalbn+0x6e>
 8005fa8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006020 <scalbn+0xe0>)
 8005faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fae:	a31a      	add	r3, pc, #104	@ (adr r3, 8006018 <scalbn+0xd8>)
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f7fa facc 	bl	8000550 <__aeabi_dmul>
 8005fb8:	e7e6      	b.n	8005f88 <scalbn+0x48>
 8005fba:	1872      	adds	r2, r6, r1
 8005fbc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005fc0:	428a      	cmp	r2, r1
 8005fc2:	dcec      	bgt.n	8005f9e <scalbn+0x5e>
 8005fc4:	2a00      	cmp	r2, #0
 8005fc6:	dd08      	ble.n	8005fda <scalbn+0x9a>
 8005fc8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005fcc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005fd0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005fd4:	ec45 4b10 	vmov	d0, r4, r5
 8005fd8:	bd70      	pop	{r4, r5, r6, pc}
 8005fda:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005fde:	da08      	bge.n	8005ff2 <scalbn+0xb2>
 8005fe0:	2d00      	cmp	r5, #0
 8005fe2:	a10b      	add	r1, pc, #44	@ (adr r1, 8006010 <scalbn+0xd0>)
 8005fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fe8:	dac1      	bge.n	8005f6e <scalbn+0x2e>
 8005fea:	a10f      	add	r1, pc, #60	@ (adr r1, 8006028 <scalbn+0xe8>)
 8005fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ff0:	e7bd      	b.n	8005f6e <scalbn+0x2e>
 8005ff2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005ff6:	3236      	adds	r2, #54	@ 0x36
 8005ff8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005ffc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006000:	4620      	mov	r0, r4
 8006002:	4b0d      	ldr	r3, [pc, #52]	@ (8006038 <scalbn+0xf8>)
 8006004:	4629      	mov	r1, r5
 8006006:	2200      	movs	r2, #0
 8006008:	e7d4      	b.n	8005fb4 <scalbn+0x74>
 800600a:	bf00      	nop
 800600c:	f3af 8000 	nop.w
 8006010:	c2f8f359 	.word	0xc2f8f359
 8006014:	01a56e1f 	.word	0x01a56e1f
 8006018:	8800759c 	.word	0x8800759c
 800601c:	7e37e43c 	.word	0x7e37e43c
 8006020:	8800759c 	.word	0x8800759c
 8006024:	fe37e43c 	.word	0xfe37e43c
 8006028:	c2f8f359 	.word	0xc2f8f359
 800602c:	81a56e1f 	.word	0x81a56e1f
 8006030:	43500000 	.word	0x43500000
 8006034:	ffff3cb0 	.word	0xffff3cb0
 8006038:	3c900000 	.word	0x3c900000
 800603c:	00000000 	.word	0x00000000

08006040 <floor>:
 8006040:	ec51 0b10 	vmov	r0, r1, d0
 8006044:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006050:	2e13      	cmp	r6, #19
 8006052:	460c      	mov	r4, r1
 8006054:	4605      	mov	r5, r0
 8006056:	4680      	mov	r8, r0
 8006058:	dc34      	bgt.n	80060c4 <floor+0x84>
 800605a:	2e00      	cmp	r6, #0
 800605c:	da17      	bge.n	800608e <floor+0x4e>
 800605e:	a332      	add	r3, pc, #200	@ (adr r3, 8006128 <floor+0xe8>)
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	f7fa f8be 	bl	80001e4 <__adddf3>
 8006068:	2200      	movs	r2, #0
 800606a:	2300      	movs	r3, #0
 800606c:	f7fa fd00 	bl	8000a70 <__aeabi_dcmpgt>
 8006070:	b150      	cbz	r0, 8006088 <floor+0x48>
 8006072:	2c00      	cmp	r4, #0
 8006074:	da55      	bge.n	8006122 <floor+0xe2>
 8006076:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800607a:	432c      	orrs	r4, r5
 800607c:	2500      	movs	r5, #0
 800607e:	42ac      	cmp	r4, r5
 8006080:	4c2b      	ldr	r4, [pc, #172]	@ (8006130 <floor+0xf0>)
 8006082:	bf08      	it	eq
 8006084:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006088:	4621      	mov	r1, r4
 800608a:	4628      	mov	r0, r5
 800608c:	e023      	b.n	80060d6 <floor+0x96>
 800608e:	4f29      	ldr	r7, [pc, #164]	@ (8006134 <floor+0xf4>)
 8006090:	4137      	asrs	r7, r6
 8006092:	ea01 0307 	and.w	r3, r1, r7
 8006096:	4303      	orrs	r3, r0
 8006098:	d01d      	beq.n	80060d6 <floor+0x96>
 800609a:	a323      	add	r3, pc, #140	@ (adr r3, 8006128 <floor+0xe8>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa f8a0 	bl	80001e4 <__adddf3>
 80060a4:	2200      	movs	r2, #0
 80060a6:	2300      	movs	r3, #0
 80060a8:	f7fa fce2 	bl	8000a70 <__aeabi_dcmpgt>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d0eb      	beq.n	8006088 <floor+0x48>
 80060b0:	2c00      	cmp	r4, #0
 80060b2:	bfbe      	ittt	lt
 80060b4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80060b8:	4133      	asrlt	r3, r6
 80060ba:	18e4      	addlt	r4, r4, r3
 80060bc:	ea24 0407 	bic.w	r4, r4, r7
 80060c0:	2500      	movs	r5, #0
 80060c2:	e7e1      	b.n	8006088 <floor+0x48>
 80060c4:	2e33      	cmp	r6, #51	@ 0x33
 80060c6:	dd0a      	ble.n	80060de <floor+0x9e>
 80060c8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80060cc:	d103      	bne.n	80060d6 <floor+0x96>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	f7fa f887 	bl	80001e4 <__adddf3>
 80060d6:	ec41 0b10 	vmov	d0, r0, r1
 80060da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060de:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80060e2:	f04f 37ff 	mov.w	r7, #4294967295
 80060e6:	40df      	lsrs	r7, r3
 80060e8:	4207      	tst	r7, r0
 80060ea:	d0f4      	beq.n	80060d6 <floor+0x96>
 80060ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8006128 <floor+0xe8>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f7fa f877 	bl	80001e4 <__adddf3>
 80060f6:	2200      	movs	r2, #0
 80060f8:	2300      	movs	r3, #0
 80060fa:	f7fa fcb9 	bl	8000a70 <__aeabi_dcmpgt>
 80060fe:	2800      	cmp	r0, #0
 8006100:	d0c2      	beq.n	8006088 <floor+0x48>
 8006102:	2c00      	cmp	r4, #0
 8006104:	da0a      	bge.n	800611c <floor+0xdc>
 8006106:	2e14      	cmp	r6, #20
 8006108:	d101      	bne.n	800610e <floor+0xce>
 800610a:	3401      	adds	r4, #1
 800610c:	e006      	b.n	800611c <floor+0xdc>
 800610e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006112:	2301      	movs	r3, #1
 8006114:	40b3      	lsls	r3, r6
 8006116:	441d      	add	r5, r3
 8006118:	4545      	cmp	r5, r8
 800611a:	d3f6      	bcc.n	800610a <floor+0xca>
 800611c:	ea25 0507 	bic.w	r5, r5, r7
 8006120:	e7b2      	b.n	8006088 <floor+0x48>
 8006122:	2500      	movs	r5, #0
 8006124:	462c      	mov	r4, r5
 8006126:	e7af      	b.n	8006088 <floor+0x48>
 8006128:	8800759c 	.word	0x8800759c
 800612c:	7e37e43c 	.word	0x7e37e43c
 8006130:	bff00000 	.word	0xbff00000
 8006134:	000fffff 	.word	0x000fffff

08006138 <_init>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	bf00      	nop
 800613c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613e:	bc08      	pop	{r3}
 8006140:	469e      	mov	lr, r3
 8006142:	4770      	bx	lr

08006144 <_fini>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	bf00      	nop
 8006148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614a:	bc08      	pop	{r3}
 800614c:	469e      	mov	lr, r3
 800614e:	4770      	bx	lr
