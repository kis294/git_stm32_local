
STM32_Audio_CS432L_I2C_only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08007070  08007070  00008070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075a8  080075a8  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  080075a8  080075a8  000085a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075b0  080075b0  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075b0  080075b0  000085b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075b4  080075b4  000085b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080075b8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009e10  20000014  080075cc  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009e24  080075cc  00009e24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f84d  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266a  00000000  00000000  00018891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  0001af00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c08  00000000  00000000  0001be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f29  00000000  00000000  0001ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013548  00000000  00000000  00033991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090633  00000000  00000000  00046ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d750c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044e8  00000000  00000000  000d7550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000dba38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007058 	.word	0x08007058

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08007058 	.word	0x08007058

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000eb0:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <write_register+0x34>)
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <write_register+0x34>)
 8000ebc:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000ebe:	2364      	movs	r3, #100	@ 0x64
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <write_register+0x34>)
 8000ec6:	2194      	movs	r1, #148	@ 0x94
 8000ec8:	4804      	ldr	r0, [pc, #16]	@ (8000edc <write_register+0x38>)
 8000eca:	f001 ff93 	bl	8002df4 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000030 	.word	0x20000030
 8000edc:	20000034 	.word	0x20000034

08000ee0 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000eec:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <read_register+0x3c>)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000ef2:	2364      	movs	r3, #100	@ 0x64
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	4a08      	ldr	r2, [pc, #32]	@ (8000f1c <read_register+0x3c>)
 8000efa:	2194      	movs	r1, #148	@ 0x94
 8000efc:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <read_register+0x40>)
 8000efe:	f001 ff79 	bl	8002df4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000f02:	2364      	movs	r3, #100	@ 0x64
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	2194      	movs	r1, #148	@ 0x94
 8000f0c:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <read_register+0x40>)
 8000f0e:	f002 f86f 	bl	8002ff0 <HAL_I2C_Master_Receive>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000030 	.word	0x20000030
 8000f20:	20000034 	.word	0x20000034

08000f24 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000f24:	b084      	sub	sp, #16
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	f107 0c08 	add.w	ip, r7, #8
 8000f2e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000f32:	4b81      	ldr	r3, [pc, #516]	@ (8001138 <CS43_Init+0x214>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001138 <CS43_Init+0x214>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	69da      	ldr	r2, [r3, #28]
 8000f40:	4b7d      	ldr	r3, [pc, #500]	@ (8001138 <CS43_Init+0x214>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000f48:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	487b      	ldr	r0, [pc, #492]	@ (800113c <CS43_Init+0x218>)
 8000f50:	f001 fdf2 	bl	8002b38 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000f54:	4b7a      	ldr	r3, [pc, #488]	@ (8001140 <CS43_Init+0x21c>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2254      	movs	r2, #84	@ 0x54
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f005 f83c 	bl	8005fdc <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000f64:	4b77      	ldr	r3, [pc, #476]	@ (8001144 <CS43_Init+0x220>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000f6a:	4976      	ldr	r1, [pc, #472]	@ (8001144 <CS43_Init+0x220>)
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f7ff ff99 	bl	8000ea4 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000f72:	4b74      	ldr	r3, [pc, #464]	@ (8001144 <CS43_Init+0x220>)
 8000f74:	2280      	movs	r2, #128	@ 0x80
 8000f76:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000f78:	4b72      	ldr	r3, [pc, #456]	@ (8001144 <CS43_Init+0x220>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	f043 0320 	orr.w	r3, r3, #32
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b70      	ldr	r3, [pc, #448]	@ (8001144 <CS43_Init+0x220>)
 8000f84:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000f86:	4b6f      	ldr	r3, [pc, #444]	@ (8001144 <CS43_Init+0x220>)
 8000f88:	785b      	ldrb	r3, [r3, #1]
 8000f8a:	f043 030c 	orr.w	r3, r3, #12
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b6c      	ldr	r3, [pc, #432]	@ (8001144 <CS43_Init+0x220>)
 8000f92:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000f94:	4b6b      	ldr	r3, [pc, #428]	@ (8001144 <CS43_Init+0x220>)
 8000f96:	785b      	ldrb	r3, [r3, #1]
 8000f98:	f043 0303 	orr.w	r3, r3, #3
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b69      	ldr	r3, [pc, #420]	@ (8001144 <CS43_Init+0x220>)
 8000fa0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000fa2:	4969      	ldr	r1, [pc, #420]	@ (8001148 <CS43_Init+0x224>)
 8000fa4:	2004      	movs	r0, #4
 8000fa6:	f7ff ff7d 	bl	8000ea4 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000faa:	4b66      	ldr	r3, [pc, #408]	@ (8001144 <CS43_Init+0x220>)
 8000fac:	2280      	movs	r2, #128	@ 0x80
 8000fae:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000fb0:	4965      	ldr	r1, [pc, #404]	@ (8001148 <CS43_Init+0x224>)
 8000fb2:	2005      	movs	r0, #5
 8000fb4:	f7ff ff76 	bl	8000ea4 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000fb8:	4962      	ldr	r1, [pc, #392]	@ (8001144 <CS43_Init+0x220>)
 8000fba:	2006      	movs	r0, #6
 8000fbc:	f7ff ff90 	bl	8000ee0 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000fc0:	4b60      	ldr	r3, [pc, #384]	@ (8001144 <CS43_Init+0x220>)
 8000fc2:	785b      	ldrb	r3, [r3, #1]
 8000fc4:	f003 0320 	and.w	r3, r3, #32
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b5e      	ldr	r3, [pc, #376]	@ (8001144 <CS43_Init+0x220>)
 8000fcc:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8000fce:	4b5d      	ldr	r3, [pc, #372]	@ (8001144 <CS43_Init+0x220>)
 8000fd0:	785b      	ldrb	r3, [r3, #1]
 8000fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8001144 <CS43_Init+0x220>)
 8000fda:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000fdc:	4b59      	ldr	r3, [pc, #356]	@ (8001144 <CS43_Init+0x220>)
 8000fde:	785b      	ldrb	r3, [r3, #1]
 8000fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b57      	ldr	r3, [pc, #348]	@ (8001144 <CS43_Init+0x220>)
 8000fe8:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000fea:	4b56      	ldr	r3, [pc, #344]	@ (8001144 <CS43_Init+0x220>)
 8000fec:	785b      	ldrb	r3, [r3, #1]
 8000fee:	f023 0310 	bic.w	r3, r3, #16
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b53      	ldr	r3, [pc, #332]	@ (8001144 <CS43_Init+0x220>)
 8000ff6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000ff8:	4b52      	ldr	r3, [pc, #328]	@ (8001144 <CS43_Init+0x220>)
 8000ffa:	785b      	ldrb	r3, [r3, #1]
 8000ffc:	f023 0304 	bic.w	r3, r3, #4
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b50      	ldr	r3, [pc, #320]	@ (8001144 <CS43_Init+0x220>)
 8001004:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8001006:	4b4f      	ldr	r3, [pc, #316]	@ (8001144 <CS43_Init+0x220>)
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b4c      	ldr	r3, [pc, #304]	@ (8001144 <CS43_Init+0x220>)
 8001012:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8001014:	4b4b      	ldr	r3, [pc, #300]	@ (8001144 <CS43_Init+0x220>)
 8001016:	785b      	ldrb	r3, [r3, #1]
 8001018:	f043 0303 	orr.w	r3, r3, #3
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b49      	ldr	r3, [pc, #292]	@ (8001144 <CS43_Init+0x220>)
 8001020:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8001022:	4949      	ldr	r1, [pc, #292]	@ (8001148 <CS43_Init+0x224>)
 8001024:	2006      	movs	r0, #6
 8001026:	f7ff ff3d 	bl	8000ea4 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800102a:	4947      	ldr	r1, [pc, #284]	@ (8001148 <CS43_Init+0x224>)
 800102c:	2008      	movs	r0, #8
 800102e:	f7ff ff57 	bl	8000ee0 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001032:	4b44      	ldr	r3, [pc, #272]	@ (8001144 <CS43_Init+0x220>)
 8001034:	785b      	ldrb	r3, [r3, #1]
 8001036:	f023 030f 	bic.w	r3, r3, #15
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b41      	ldr	r3, [pc, #260]	@ (8001144 <CS43_Init+0x220>)
 800103e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8001040:	4b40      	ldr	r3, [pc, #256]	@ (8001144 <CS43_Init+0x220>)
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b3e      	ldr	r3, [pc, #248]	@ (8001144 <CS43_Init+0x220>)
 800104c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800104e:	493e      	ldr	r1, [pc, #248]	@ (8001148 <CS43_Init+0x224>)
 8001050:	2008      	movs	r0, #8
 8001052:	f7ff ff27 	bl	8000ea4 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8001056:	493c      	ldr	r1, [pc, #240]	@ (8001148 <CS43_Init+0x224>)
 8001058:	2009      	movs	r0, #9
 800105a:	f7ff ff41 	bl	8000ee0 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800105e:	4b39      	ldr	r3, [pc, #228]	@ (8001144 <CS43_Init+0x220>)
 8001060:	785b      	ldrb	r3, [r3, #1]
 8001062:	f023 030f 	bic.w	r3, r3, #15
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b36      	ldr	r3, [pc, #216]	@ (8001144 <CS43_Init+0x220>)
 800106a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 800106c:	4b35      	ldr	r3, [pc, #212]	@ (8001144 <CS43_Init+0x220>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b33      	ldr	r3, [pc, #204]	@ (8001144 <CS43_Init+0x220>)
 8001078:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 800107a:	4933      	ldr	r1, [pc, #204]	@ (8001148 <CS43_Init+0x224>)
 800107c:	2009      	movs	r0, #9
 800107e:	f7ff ff11 	bl	8000ea4 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8001082:	4931      	ldr	r1, [pc, #196]	@ (8001148 <CS43_Init+0x224>)
 8001084:	200e      	movs	r0, #14
 8001086:	f7ff ff2b 	bl	8000ee0 <read_register>
	if(outputMode == MODE_ANALOG_AUDIO)
 800108a:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800108e:	2b01      	cmp	r3, #1
 8001090:	d123      	bne.n	80010da <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8001092:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <CS43_Init+0x220>)
 8001094:	785b      	ldrb	r3, [r3, #1]
 8001096:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b29      	ldr	r3, [pc, #164]	@ (8001144 <CS43_Init+0x220>)
 800109e:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80010a0:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <CS43_Init+0x220>)
 80010a2:	785b      	ldrb	r3, [r3, #1]
 80010a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <CS43_Init+0x220>)
 80010ac:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80010ae:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <CS43_Init+0x220>)
 80010b0:	785b      	ldrb	r3, [r3, #1]
 80010b2:	f023 0320 	bic.w	r3, r3, #32
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <CS43_Init+0x220>)
 80010ba:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80010bc:	4b21      	ldr	r3, [pc, #132]	@ (8001144 <CS43_Init+0x220>)
 80010be:	785b      	ldrb	r3, [r3, #1]
 80010c0:	f023 0310 	bic.w	r3, r3, #16
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <CS43_Init+0x220>)
 80010c8:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80010ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <CS43_Init+0x220>)
 80010cc:	785b      	ldrb	r3, [r3, #1]
 80010ce:	f023 0308 	bic.w	r3, r3, #8
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <CS43_Init+0x220>)
 80010d6:	705a      	strb	r2, [r3, #1]
 80010d8:	e006      	b.n	80010e8 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80010da:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <CS43_Init+0x220>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80010e8:	4917      	ldr	r1, [pc, #92]	@ (8001148 <CS43_Init+0x224>)
 80010ea:	200e      	movs	r0, #14
 80010ec:	f7ff feda 	bl	8000ea4 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80010f0:	4915      	ldr	r1, [pc, #84]	@ (8001148 <CS43_Init+0x224>)
 80010f2:	200f      	movs	r0, #15
 80010f4:	f7ff fef4 	bl	8000ee0 <read_register>
	iData[1] = 0x00;
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <CS43_Init+0x220>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80010fe:	4912      	ldr	r1, [pc, #72]	@ (8001148 <CS43_Init+0x224>)
 8001100:	200f      	movs	r0, #15
 8001102:	f7ff fecf 	bl	8000ea4 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <CS43_Init+0x220>)
 8001108:	2200      	movs	r2, #0
 800110a:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800110c:	490e      	ldr	r1, [pc, #56]	@ (8001148 <CS43_Init+0x224>)
 800110e:	2014      	movs	r0, #20
 8001110:	f7ff fec8 	bl	8000ea4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001114:	490c      	ldr	r1, [pc, #48]	@ (8001148 <CS43_Init+0x224>)
 8001116:	2015      	movs	r0, #21
 8001118:	f7ff fec4 	bl	8000ea4 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800111c:	490a      	ldr	r1, [pc, #40]	@ (8001148 <CS43_Init+0x224>)
 800111e:	201a      	movs	r0, #26
 8001120:	f7ff fec0 	bl	8000ea4 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8001124:	4908      	ldr	r1, [pc, #32]	@ (8001148 <CS43_Init+0x224>)
 8001126:	201b      	movs	r0, #27
 8001128:	f7ff febc 	bl	8000ea4 <write_register>
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001134:	b004      	add	sp, #16
 8001136:	4770      	bx	lr
 8001138:	200000dc 	.word	0x200000dc
 800113c:	40020c00 	.word	0x40020c00
 8001140:	20000034 	.word	0x20000034
 8001144:	20000030 	.word	0x20000030
 8001148:	20000031 	.word	0x20000031

0800114c <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d837      	bhi.n	80011cc <CS43_Enable_RightLeft+0x80>
 800115c:	a201      	add	r2, pc, #4	@ (adr r2, 8001164 <CS43_Enable_RightLeft+0x18>)
 800115e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001162:	bf00      	nop
 8001164:	08001175 	.word	0x08001175
 8001168:	0800118b 	.word	0x0800118b
 800116c:	080011a1 	.word	0x080011a1
 8001170:	080011b7 	.word	0x080011b7
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001174:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 8001176:	22c0      	movs	r2, #192	@ 0xc0
 8001178:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800117a:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 800117c:	785b      	ldrb	r3, [r3, #1]
 800117e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 8001186:	705a      	strb	r2, [r3, #1]
			break;
 8001188:	e021      	b.n	80011ce <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 800118c:	2280      	movs	r2, #128	@ 0x80
 800118e:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001190:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 800119c:	705a      	strb	r2, [r3, #1]
			break;
 800119e:	e016      	b.n	80011ce <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011a2:	22c0      	movs	r2, #192	@ 0xc0
 80011a4:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	f043 0320 	orr.w	r3, r3, #32
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011b2:	705a      	strb	r2, [r3, #1]
			break;
 80011b4:	e00b      	b.n	80011ce <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011b8:	2280      	movs	r2, #128	@ 0x80
 80011ba:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011be:	785b      	ldrb	r3, [r3, #1]
 80011c0:	f043 0320 	orr.w	r3, r3, #32
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011c8:	705a      	strb	r2, [r3, #1]
			break;
 80011ca:	e000      	b.n	80011ce <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80011cc:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80011ce:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	f043 030c 	orr.w	r3, r3, #12
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011da:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80011dc:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011de:	785b      	ldrb	r3, [r3, #1]
 80011e0:	f043 0303 	orr.w	r3, r3, #3
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <CS43_Enable_RightLeft+0xb0>)
 80011e8:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80011ea:	4905      	ldr	r1, [pc, #20]	@ (8001200 <CS43_Enable_RightLeft+0xb4>)
 80011ec:	2004      	movs	r0, #4
 80011ee:	f7ff fe59 	bl	8000ea4 <write_register>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000030 	.word	0x20000030
 8001200:	20000031 	.word	0x20000031

08001204 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	3b32      	subs	r3, #50	@ 0x32
 8001212:	b2db      	uxtb	r3, r3
 8001214:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8001222:	4a16      	ldr	r2, [pc, #88]	@ (800127c <CS43_SetVolume+0x78>)
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8001228:	4915      	ldr	r1, [pc, #84]	@ (8001280 <CS43_SetVolume+0x7c>)
 800122a:	2014      	movs	r0, #20
 800122c:	f7ff fe3a 	bl	8000ea4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001230:	4913      	ldr	r1, [pc, #76]	@ (8001280 <CS43_SetVolume+0x7c>)
 8001232:	2015      	movs	r0, #21
 8001234:	f7ff fe36 	bl	8000ea4 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b64      	cmp	r3, #100	@ 0x64
 800123c:	d80e      	bhi.n	800125c <CS43_SetVolume+0x58>
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <CS43_SetVolume+0x80>)
 800124a:	fb82 1203 	smull	r1, r2, r2, r3
 800124e:	1152      	asrs	r2, r2, #5
 8001250:	17db      	asrs	r3, r3, #31
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	3b18      	subs	r3, #24
 8001258:	b2db      	uxtb	r3, r3
 800125a:	e000      	b.n	800125e <CS43_SetVolume+0x5a>
 800125c:	2318      	movs	r3, #24
 800125e:	4a07      	ldr	r2, [pc, #28]	@ (800127c <CS43_SetVolume+0x78>)
 8001260:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8001262:	4907      	ldr	r1, [pc, #28]	@ (8001280 <CS43_SetVolume+0x7c>)
 8001264:	2020      	movs	r0, #32
 8001266:	f7ff fe1d 	bl	8000ea4 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800126a:	4905      	ldr	r1, [pc, #20]	@ (8001280 <CS43_SetVolume+0x7c>)
 800126c:	2021      	movs	r0, #33	@ 0x21
 800126e:	f7ff fe19 	bl	8000ea4 <write_register>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000030 	.word	0x20000030
 8001280:	20000031 	.word	0x20000031
 8001284:	51eb851f 	.word	0x51eb851f

08001288 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800128c:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <CS43_Start+0x7c>)
 800128e:	2299      	movs	r2, #153	@ 0x99
 8001290:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8001292:	491d      	ldr	r1, [pc, #116]	@ (8001308 <CS43_Start+0x80>)
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fe05 	bl	8000ea4 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 800129a:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <CS43_Start+0x7c>)
 800129c:	2280      	movs	r2, #128	@ 0x80
 800129e:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80012a0:	4919      	ldr	r1, [pc, #100]	@ (8001308 <CS43_Start+0x80>)
 80012a2:	2047      	movs	r0, #71	@ 0x47
 80012a4:	f7ff fdfe 	bl	8000ea4 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80012a8:	4917      	ldr	r1, [pc, #92]	@ (8001308 <CS43_Start+0x80>)
 80012aa:	2032      	movs	r0, #50	@ 0x32
 80012ac:	f7ff fe18 	bl	8000ee0 <read_register>
	iData[1] |= 0x80;
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <CS43_Start+0x7c>)
 80012b2:	785b      	ldrb	r3, [r3, #1]
 80012b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <CS43_Start+0x7c>)
 80012bc:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80012be:	4912      	ldr	r1, [pc, #72]	@ (8001308 <CS43_Start+0x80>)
 80012c0:	2032      	movs	r0, #50	@ 0x32
 80012c2:	f7ff fdef 	bl	8000ea4 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80012c6:	4910      	ldr	r1, [pc, #64]	@ (8001308 <CS43_Start+0x80>)
 80012c8:	2032      	movs	r0, #50	@ 0x32
 80012ca:	f7ff fe09 	bl	8000ee0 <read_register>
	iData[1] &= ~(0x80);
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <CS43_Start+0x7c>)
 80012d0:	785b      	ldrb	r3, [r3, #1]
 80012d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <CS43_Start+0x7c>)
 80012da:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80012dc:	490a      	ldr	r1, [pc, #40]	@ (8001308 <CS43_Start+0x80>)
 80012de:	2032      	movs	r0, #50	@ 0x32
 80012e0:	f7ff fde0 	bl	8000ea4 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <CS43_Start+0x7c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80012ea:	4907      	ldr	r1, [pc, #28]	@ (8001308 <CS43_Start+0x80>)
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff fdd9 	bl	8000ea4 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80012f2:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <CS43_Start+0x7c>)
 80012f4:	229e      	movs	r2, #158	@ 0x9e
 80012f6:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 80012f8:	4903      	ldr	r1, [pc, #12]	@ (8001308 <CS43_Start+0x80>)
 80012fa:	2002      	movs	r0, #2
 80012fc:	f7ff fdd2 	bl	8000ea4 <write_register>
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000030 	.word	0x20000030
 8001308:	20000031 	.word	0x20000031

0800130c <CS43_Stop>:

void CS43_Stop(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	iData[1] = 0x01;
 8001310:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <CS43_Stop+0x18>)
 8001312:	2201      	movs	r2, #1
 8001314:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8001316:	4904      	ldr	r1, [pc, #16]	@ (8001328 <CS43_Stop+0x1c>)
 8001318:	2002      	movs	r0, #2
 800131a:	f7ff fdc3 	bl	8000ea4 <write_register>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000030 	.word	0x20000030
 8001328:	20000031 	.word	0x20000031
 800132c:	00000000 	.word	0x00000000

08001330 <process_buffer>:
int16_t i2s_dma_buffer[I2S_DMA_BUFFER_SIZE];
int nsamples = sizeof(i2s_dma_buffer) / sizeof(i2s_dma_buffer[0]);


void process_buffer(int16_t* buff,float freq,double volume)
{
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	ed87 0a02 	vstr	s0, [r7, #8]
 800133c:	ed87 1b00 	vstr	d1, [r7]
    int i = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
    dma_processing = 1;
 8001344:	4b34      	ldr	r3, [pc, #208]	@ (8001418 <process_buffer+0xe8>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
    double t = 0.0f;
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(i < 2*I2S_DMA_BUFFER_SAMPLES) {
 8001356:	e04d      	b.n	80013f4 <process_buffer+0xc4>
//           buff[i] = 100*sin(t);
//           buff[i+1] = buff[i];
//           t = t + (2*PI/I2S_DMA_BUFFER_SAMPLES);
//           i += 2;

    	   t = (2*PI*i*(freq/48000.0));
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800141c <process_buffer+0xec>
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	ee17 0a90 	vmov	r0, s15
 800136e:	f7ff f897 	bl	80004a0 <__aeabi_f2d>
 8001372:	4604      	mov	r4, r0
 8001374:	460d      	mov	r5, r1
 8001376:	68b8      	ldr	r0, [r7, #8]
 8001378:	f7ff f892 	bl	80004a0 <__aeabi_f2d>
 800137c:	a324      	add	r3, pc, #144	@ (adr r3, 8001410 <process_buffer+0xe0>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff fa0f 	bl	80007a4 <__aeabi_ddiv>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4620      	mov	r0, r4
 800138c:	4629      	mov	r1, r5
 800138e:	f7ff f8df 	bl	8000550 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	e9c7 2304 	strd	r2, r3, [r7, #16]
		   buff[i] = 100*volume*sin(t); //100*volume*(sin(t));
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <process_buffer+0xf0>)
 80013a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013a4:	f7ff f8d4 	bl	8000550 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4614      	mov	r4, r2
 80013ae:	461d      	mov	r5, r3
 80013b0:	ed97 0b04 	vldr	d0, [r7, #16]
 80013b4:	f004 fe20 	bl	8005ff8 <sin>
 80013b8:	ec53 2b10 	vmov	r2, r3, d0
 80013bc:	4620      	mov	r0, r4
 80013be:	4629      	mov	r1, r5
 80013c0:	f7ff f8c6 	bl	8000550 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	18d4      	adds	r4, r2, r3
 80013d4:	f7ff fb56 	bl	8000a84 <__aeabi_d2iz>
 80013d8:	4603      	mov	r3, r0
 80013da:	b21b      	sxth	r3, r3
 80013dc:	8023      	strh	r3, [r4, #0]
		   buff[i+1] = -100;//buff[i];// buff[i];
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3301      	adds	r3, #1
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	f64f 729c 	movw	r2, #65436	@ 0xff9c
 80013ec:	801a      	strh	r2, [r3, #0]
		   i += 2;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3302      	adds	r3, #2
 80013f2:	61fb      	str	r3, [r7, #28]
    while(i < 2*I2S_DMA_BUFFER_SAMPLES) {
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80013fa:	4293      	cmp	r3, r2
 80013fc:	ddac      	ble.n	8001358 <process_buffer+0x28>
    }
    dma_processing = 0;
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <process_buffer+0xe8>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bdb0      	pop	{r4, r5, r7, pc}
 800140c:	f3af 8000 	nop.w
 8001410:	00000000 	.word	0x00000000
 8001414:	40e77000 	.word	0x40e77000
 8001418:	200001cc 	.word	0x200001cc
 800141c:	40c90fd0 	.word	0x40c90fd0
 8001420:	40590000 	.word	0x40590000

08001424 <play_note>:


void play_note(float freq,uint16_t duration,double vol)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	ed87 0a03 	vstr	s0, [r7, #12]
 800142e:	4603      	mov	r3, r0
 8001430:	ed87 1b00 	vstr	d1, [r7]
 8001434:	817b      	strh	r3, [r7, #10]
	memset(i2s_dma_buffer,-32767,nsamples);
 8001436:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <play_note+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	491a      	ldr	r1, [pc, #104]	@ (80014a8 <play_note+0x84>)
 800143e:	481b      	ldr	r0, [pc, #108]	@ (80014ac <play_note+0x88>)
 8001440:	f004 fda0 	bl	8005f84 <memset>
	process_buffer(i2s_dma_buffer, freq, vol);
 8001444:	ed97 1b00 	vldr	d1, [r7]
 8001448:	ed97 0a03 	vldr	s0, [r7, #12]
 800144c:	4817      	ldr	r0, [pc, #92]	@ (80014ac <play_note+0x88>)
 800144e:	f7ff ff6f 	bl	8001330 <process_buffer>
	timer_elapsed = 0;
 8001452:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <play_note+0x8c>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
	full_cpt = 0;
 8001458:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <play_note+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
	mytimeperiod = (duration) - 1;
 800145e:	897b      	ldrh	r3, [r7, #10]
 8001460:	3b01      	subs	r3, #1
 8001462:	461a      	mov	r2, r3
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <play_note+0x94>)
 8001466:	601a      	str	r2, [r3, #0]
	MX_TIM2_Init();
 8001468:	f000 f944 	bl	80016f4 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 800146c:	4813      	ldr	r0, [pc, #76]	@ (80014bc <play_note+0x98>)
 800146e:	f004 f94b 	bl	8005708 <HAL_TIM_Base_Start_IT>

    //CS43_SetVolume(50);
	//CS43_SetVolume(0);
	HAL_I2S_Transmit_DMA(&hi2s3, i2s_dma_buffer,nsamples);
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <play_note+0x80>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	490c      	ldr	r1, [pc, #48]	@ (80014ac <play_note+0x88>)
 800147c:	4810      	ldr	r0, [pc, #64]	@ (80014c0 <play_note+0x9c>)
 800147e:	f002 fcaf 	bl	8003de0 <HAL_I2S_Transmit_DMA>
	while((timer_elapsed == 0));
 8001482:	bf00      	nop
 8001484:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <play_note+0x8c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0fb      	beq.n	8001484 <play_note+0x60>
	while(full_cpt == 0);
 800148c:	bf00      	nop
 800148e:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <play_note+0x90>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0fb      	beq.n	800148e <play_note+0x6a>
	HAL_I2S_DMAStop(&hi2s3);
 8001496:	480a      	ldr	r0, [pc, #40]	@ (80014c0 <play_note+0x9c>)
 8001498:	f002 fd46 	bl	8003f28 <HAL_I2S_DMAStop>
    //CS43_SetVolume(0);

	//HAL_I2S_DMAStop(&hi2s3);
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000004 	.word	0x20000004
 80014a8:	ffff8001 	.word	0xffff8001
 80014ac:	200001e0 	.word	0x200001e0
 80014b0:	200001d8 	.word	0x200001d8
 80014b4:	200001dc 	.word	0x200001dc
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000184 	.word	0x20000184
 80014c0:	200000dc 	.word	0x200000dc

080014c4 <stop_dac>:

void stop_dac()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	CS43_SetVolume(0);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff fe9b 	bl	8001204 <CS43_SetVolume>
	CS43_Stop();
 80014ce:	f7ff ff1d 	bl	800130c <CS43_Stop>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2110      	movs	r1, #16
 80014d6:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <stop_dac+0x1c>)
 80014d8:	f001 fb2e 	bl	8002b38 <HAL_GPIO_WritePin>

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40020c00 	.word	0x40020c00

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b095      	sub	sp, #84	@ 0x54
 80014e8:	af12      	add	r7, sp, #72	@ 0x48

  /* USER CODE BEGIN 1 */
	sample_dt = F_OUT/F_SAMPLE;
 80014ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <main+0x74>)
 80014ec:	f04f 5274 	mov.w	r2, #1023410176	@ 0x3d000000
 80014f0:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <main+0x78>)
 80014f4:	2220      	movs	r2, #32
 80014f6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f8:	f000 fc36 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fc:	f000 f836 	bl	800156c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001500:	f000 f970 	bl	80017e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001504:	f000 f94e 	bl	80017a4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001508:	f000 f898 	bl	800163c <MX_I2C1_Init>
  MX_I2S3_Init();
 800150c:	f000 f8c4 	bl	8001698 <MX_I2S3_Init>
  MX_TIM2_Init();
 8001510:	f000 f8f0 	bl	80016f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
 	CS43_Init(hi2c1, MODE_I2S);
 8001514:	4c12      	ldr	r4, [pc, #72]	@ (8001560 <main+0x7c>)
 8001516:	2300      	movs	r3, #0
 8001518:	9311      	str	r3, [sp, #68]	@ 0x44
 800151a:	4668      	mov	r0, sp
 800151c:	f104 0310 	add.w	r3, r4, #16
 8001520:	2244      	movs	r2, #68	@ 0x44
 8001522:	4619      	mov	r1, r3
 8001524:	f004 fd5a 	bl	8005fdc <memcpy>
 8001528:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800152c:	f7ff fcfa 	bl	8000f24 <CS43_Init>
 	CS43_SetVolume(50); //0 - 100,, 40
 8001530:	2032      	movs	r0, #50	@ 0x32
 8001532:	f7ff fe67 	bl	8001204 <CS43_SetVolume>
 	//CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 	CS43_Enable_RightLeft(CS43_LEFT);
 8001536:	2002      	movs	r0, #2
 8001538:	f7ff fe08 	bl	800114c <CS43_Enable_RightLeft>
 	CS43_Start();
 800153c:	f7ff fea4 	bl	8001288 <CS43_Start>

    HAL_StatusTypeDef res;
   uint8_t temp = full_cpt;
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <main+0x80>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	71fb      	strb	r3, [r7, #7]
   //test_notes();

   play_melody(mary_lamb_melody, MARY_LAMB_LENGTH);
 8001546:	211a      	movs	r1, #26
 8001548:	4807      	ldr	r0, [pc, #28]	@ (8001568 <main+0x84>)
 800154a:	f000 f9eb 	bl	8001924 <play_melody>

   stop_dac();
 800154e:	f7ff ffb9 	bl	80014c4 <stop_dac>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001552:	bf00      	nop
 8001554:	e7fd      	b.n	8001552 <main+0x6e>
 8001556:	bf00      	nop
 8001558:	200001d0 	.word	0x200001d0
 800155c:	200001d4 	.word	0x200001d4
 8001560:	20000088 	.word	0x20000088
 8001564:	200001dc 	.word	0x200001dc
 8001568:	08007070 	.word	0x08007070

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b094      	sub	sp, #80	@ 0x50
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0320 	add.w	r3, r7, #32
 8001576:	2230      	movs	r2, #48	@ 0x30
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f004 fd02 	bl	8005f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <SystemClock_Config+0xc8>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	4a26      	ldr	r2, [pc, #152]	@ (8001634 <SystemClock_Config+0xc8>)
 800159a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800159e:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a0:	4b24      	ldr	r3, [pc, #144]	@ (8001634 <SystemClock_Config+0xc8>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <SystemClock_Config+0xcc>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a20      	ldr	r2, [pc, #128]	@ (8001638 <SystemClock_Config+0xcc>)
 80015b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <SystemClock_Config+0xcc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c8:	2302      	movs	r3, #2
 80015ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015cc:	2301      	movs	r3, #1
 80015ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d0:	2310      	movs	r3, #16
 80015d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d4:	2302      	movs	r3, #2
 80015d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015d8:	2300      	movs	r3, #0
 80015da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015dc:	2308      	movs	r3, #8
 80015de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80015e0:	2332      	movs	r3, #50	@ 0x32
 80015e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80015e8:	2308      	movs	r3, #8
 80015ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ec:	f107 0320 	add.w	r3, r7, #32
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 fa63 	bl	8004abc <HAL_RCC_OscConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015fc:	f000 f98c 	bl	8001918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001600:	230f      	movs	r3, #15
 8001602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001604:	2302      	movs	r3, #2
 8001606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001610:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	2101      	movs	r1, #1
 800161c:	4618      	mov	r0, r3
 800161e:	f003 fcc5 	bl	8004fac <HAL_RCC_ClockConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001628:	f000 f976 	bl	8001918 <Error_Handler>
  }
}
 800162c:	bf00      	nop
 800162e:	3750      	adds	r7, #80	@ 0x50
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	40007000 	.word	0x40007000

0800163c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <MX_I2C1_Init+0x50>)
 8001642:	4a13      	ldr	r2, [pc, #76]	@ (8001690 <MX_I2C1_Init+0x54>)
 8001644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <MX_I2C1_Init+0x50>)
 8001648:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <MX_I2C1_Init+0x58>)
 800164a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <MX_I2C1_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <MX_I2C1_Init+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <MX_I2C1_Init+0x50>)
 800165a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800165e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001660:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <MX_I2C1_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <MX_I2C1_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800166c:	4b07      	ldr	r3, [pc, #28]	@ (800168c <MX_I2C1_Init+0x50>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_I2C1_Init+0x50>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	@ (800168c <MX_I2C1_Init+0x50>)
 800167a:	f001 fa77 	bl	8002b6c <HAL_I2C_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001684:	f000 f948 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000088 	.word	0x20000088
 8001690:	40005400 	.word	0x40005400
 8001694:	000186a0 	.word	0x000186a0

08001698 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800169c:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <MX_I2S3_Init+0x54>)
 800169e:	4a14      	ldr	r2, [pc, #80]	@ (80016f0 <MX_I2S3_Init+0x58>)
 80016a0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80016a2:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <MX_I2S3_Init+0x54>)
 80016a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016a8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <MX_I2S3_Init+0x54>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_I2S3_Init+0x54>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <MX_I2S3_Init+0x54>)
 80016b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016bc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <MX_I2S3_Init+0x54>)
 80016c0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80016c4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_I2S3_Init+0x54>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <MX_I2S3_Init+0x54>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_I2S3_Init+0x54>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	@ (80016ec <MX_I2S3_Init+0x54>)
 80016da:	f002 fa41 	bl	8003b60 <HAL_I2S_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80016e4:	f000 f918 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200000dc 	.word	0x200000dc
 80016f0:	40003c00 	.word	0x40003c00

080016f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	463b      	mov	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <MX_TIM2_Init+0xa8>)
 8001712:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001716:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4999;
 8001718:	4b20      	ldr	r3, [pc, #128]	@ (800179c <MX_TIM2_Init+0xa8>)
 800171a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800171e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <MX_TIM2_Init+0xa8>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = mytimeperiod;
 8001726:	4b1e      	ldr	r3, [pc, #120]	@ (80017a0 <MX_TIM2_Init+0xac>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1c      	ldr	r2, [pc, #112]	@ (800179c <MX_TIM2_Init+0xa8>)
 800172c:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <MX_TIM2_Init+0xa8>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b19      	ldr	r3, [pc, #100]	@ (800179c <MX_TIM2_Init+0xa8>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800173a:	4818      	ldr	r0, [pc, #96]	@ (800179c <MX_TIM2_Init+0xa8>)
 800173c:	f003 ff94 	bl	8005668 <HAL_TIM_Base_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001746:	f000 f8e7 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4619      	mov	r1, r3
 8001756:	4811      	ldr	r0, [pc, #68]	@ (800179c <MX_TIM2_Init+0xa8>)
 8001758:	f004 f982 	bl	8005a60 <HAL_TIM_ConfigClockSource>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001762:	f000 f8d9 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8001766:	2108      	movs	r1, #8
 8001768:	480c      	ldr	r0, [pc, #48]	@ (800179c <MX_TIM2_Init+0xa8>)
 800176a:	f004 f82f 	bl	80057cc <HAL_TIM_OnePulse_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001774:	f000 f8d0 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	@ (800179c <MX_TIM2_Init+0xa8>)
 8001786:	f004 fb7b 	bl	8005e80 <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001790:	f000 f8c2 	bl	8001918 <Error_Handler>
//  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(TIM2_IRQn);

  /* USER CODE END TIM2_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000184 	.word	0x20000184
 80017a0:	20000000 	.word	0x20000000

080017a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <MX_DMA_Init+0x3c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a0b      	ldr	r2, [pc, #44]	@ (80017e0 <MX_DMA_Init+0x3c>)
 80017b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <MX_DMA_Init+0x3c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2010      	movs	r0, #16
 80017cc:	f000 fc19 	bl	8002002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017d0:	2010      	movs	r0, #16
 80017d2:	f000 fc32 	bl	800203a <HAL_NVIC_EnableIRQ>

}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b2d      	ldr	r3, [pc, #180]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a2c      	ldr	r2, [pc, #176]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b2a      	ldr	r3, [pc, #168]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a25      	ldr	r2, [pc, #148]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	4b1f      	ldr	r3, [pc, #124]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a1e      	ldr	r2, [pc, #120]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a17      	ldr	r2, [pc, #92]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a10      	ldr	r2, [pc, #64]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <MX_GPIO_Init+0xd0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2110      	movs	r1, #16
 800188a:	480b      	ldr	r0, [pc, #44]	@ (80018b8 <MX_GPIO_Init+0xd4>)
 800188c:	f001 f954 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001890:	2310      	movs	r3, #16
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4804      	ldr	r0, [pc, #16]	@ (80018b8 <MX_GPIO_Init+0xd4>)
 80018a8:	f000 ffc2 	bl	8002830 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	@ 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020c00 	.word	0x40020c00

080018bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018cc:	d102      	bne.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
    // Timer expired - one-shot complete
    //HAL_I2S_DMAStop(&hi2s3);
    timer_elapsed = 1;
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
  }
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	200001d8 	.word	0x200001d8

080018e4 <HAL_I2S_TxCpltCallback>:


void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
//   else
//   {
// 	 process_buffer(&i2s_dma_buffer[2*I2S_DMA_BUFFER_SAMPLES]);
// 	 full_cpt = 1;
//   }
	full_cpt = 1;
 80018ec:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <HAL_I2S_TxCpltCallback+0x1c>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	200001dc 	.word	0x200001dc

08001904 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
//   else
//   {
//	  process_buffer(&i2s_dma_buffer[0]);
//	   half_cpt = 1;
//   }
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <Error_Handler+0x8>

08001924 <play_melody>:
    {D4, QUARTER_NOTE, VOLUME_PIANO, STACCATO},
    {C4, HALF_NOTE, VOLUME_PIANO, NORMAL} // Final note is soft
};

void play_melody(const melody_s* mel,int len)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	for(int i=0;i<len;i++)
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	e02f      	b.n	8001994 <play_melody+0x70>
	{
		play_note( mel[i].frequency , mel[i].duration * 1000 , mel[i].volume );
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	015b      	lsls	r3, r3, #5
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f8e6 	bl	8000b14 <__aeabi_d2f>
 8001948:	4604      	mov	r4, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	015b      	lsls	r3, r3, #5
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <play_melody+0x84>)
 800195c:	f7fe fdf8 	bl	8000550 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff f8b4 	bl	8000ad4 <__aeabi_d2uiz>
 800196c:	4603      	mov	r3, r0
 800196e:	b299      	uxth	r1, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	015b      	lsls	r3, r3, #5
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	ed93 7b04 	vldr	d7, [r3, #16]
 800197c:	eeb0 1a47 	vmov.f32	s2, s14
 8001980:	eef0 1a67 	vmov.f32	s3, s15
 8001984:	4608      	mov	r0, r1
 8001986:	ee00 4a10 	vmov	s0, r4
 800198a:	f7ff fd4b 	bl	8001424 <play_note>
	for(int i=0;i<len;i++)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3301      	adds	r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbcb      	blt.n	8001934 <play_melody+0x10>
	}
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	bf00      	nop
 80019a8:	408f4000 	.word	0x408f4000

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	4a0f      	ldr	r2, [pc, #60]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	4a08      	ldr	r2, [pc, #32]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ea:	2007      	movs	r0, #7
 80019ec:	f000 fafe 	bl	8001fec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800

080019fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	@ 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a19      	ldr	r2, [pc, #100]	@ (8001a80 <HAL_I2C_MspInit+0x84>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d12c      	bne.n	8001a78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a17      	ldr	r2, [pc, #92]	@ (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001a3a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a40:	2312      	movs	r3, #18
 8001a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	480c      	ldr	r0, [pc, #48]	@ (8001a88 <HAL_I2C_MspInit+0x8c>)
 8001a58:	f000 feea 	bl	8002830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	4a07      	ldr	r2, [pc, #28]	@ (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	@ 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40005400 	.word	0x40005400
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020400 	.word	0x40020400

08001a8c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b090      	sub	sp, #64	@ 0x40
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a4d      	ldr	r2, [pc, #308]	@ (8001bf0 <HAL_I2S_MspInit+0x164>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	f040 8093 	bne.w	8001be8 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001ac6:	23c8      	movs	r3, #200	@ 0xc8
 8001ac8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8001aca:	2308      	movs	r3, #8
 8001acc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fc74 	bl	80053c4 <HAL_RCCEx_PeriphCLKConfig>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001ae2:	f7ff ff19 	bl	8001918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b42      	ldr	r3, [pc, #264]	@ (8001bf4 <HAL_I2S_MspInit+0x168>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	4a41      	ldr	r2, [pc, #260]	@ (8001bf4 <HAL_I2S_MspInit+0x168>)
 8001af0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf4 <HAL_I2S_MspInit+0x168>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf4 <HAL_I2S_MspInit+0x168>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	4a3a      	ldr	r2, [pc, #232]	@ (8001bf4 <HAL_I2S_MspInit+0x168>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b12:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <HAL_I2S_MspInit+0x168>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	4b34      	ldr	r3, [pc, #208]	@ (8001bf4 <HAL_I2S_MspInit+0x168>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	4a33      	ldr	r2, [pc, #204]	@ (8001bf4 <HAL_I2S_MspInit+0x168>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2e:	4b31      	ldr	r3, [pc, #196]	@ (8001bf4 <HAL_I2S_MspInit+0x168>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b3a:	2310      	movs	r3, #16
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b52:	4619      	mov	r1, r3
 8001b54:	4828      	ldr	r0, [pc, #160]	@ (8001bf8 <HAL_I2S_MspInit+0x16c>)
 8001b56:	f000 fe6b 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001b5a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b6c:	2306      	movs	r3, #6
 8001b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4821      	ldr	r0, [pc, #132]	@ (8001bfc <HAL_I2S_MspInit+0x170>)
 8001b78:	f000 fe5a 	bl	8002830 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001b7c:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <HAL_I2S_MspInit+0x174>)
 8001b7e:	4a21      	ldr	r2, [pc, #132]	@ (8001c04 <HAL_I2S_MspInit+0x178>)
 8001b80:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001b82:	4b1f      	ldr	r3, [pc, #124]	@ (8001c00 <HAL_I2S_MspInit+0x174>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	@ (8001c00 <HAL_I2S_MspInit+0x174>)
 8001b8a:	2240      	movs	r2, #64	@ 0x40
 8001b8c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c00 <HAL_I2S_MspInit+0x174>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	@ (8001c00 <HAL_I2S_MspInit+0x174>)
 8001b96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b9a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <HAL_I2S_MspInit+0x174>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <HAL_I2S_MspInit+0x174>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001ba8:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <HAL_I2S_MspInit+0x174>)
 8001baa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bae:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <HAL_I2S_MspInit+0x174>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bb6:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <HAL_I2S_MspInit+0x174>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001bbc:	4810      	ldr	r0, [pc, #64]	@ (8001c00 <HAL_I2S_MspInit+0x174>)
 8001bbe:	f000 fa57 	bl	8002070 <HAL_DMA_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_I2S_MspInit+0x140>
    {
      Error_Handler();
 8001bc8:	f7ff fea6 	bl	8001918 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a0c      	ldr	r2, [pc, #48]	@ (8001c00 <HAL_I2S_MspInit+0x174>)
 8001bd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8001c00 <HAL_I2S_MspInit+0x174>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2033      	movs	r0, #51	@ 0x33
 8001bde:	f000 fa10 	bl	8002002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001be2:	2033      	movs	r0, #51	@ 0x33
 8001be4:	f000 fa29 	bl	800203a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001be8:	bf00      	nop
 8001bea:	3740      	adds	r7, #64	@ 0x40
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40003c00 	.word	0x40003c00
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	20000124 	.word	0x20000124
 8001c04:	40026088 	.word	0x40026088

08001c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c18:	d115      	bne.n	8001c46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <HAL_TIM_Base_MspInit+0x48>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	4a0b      	ldr	r2, [pc, #44]	@ (8001c50 <HAL_TIM_Base_MspInit+0x48>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2a:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <HAL_TIM_Base_MspInit+0x48>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	201c      	movs	r0, #28
 8001c3c:	f000 f9e1 	bl	8002002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c40:	201c      	movs	r0, #28
 8001c42:	f000 f9fa 	bl	800203a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <NMI_Handler+0x4>

08001c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <HardFault_Handler+0x4>

08001c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <MemManage_Handler+0x4>

08001c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001caa:	f000 f8af 	bl	8001e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001cb8:	4802      	ldr	r0, [pc, #8]	@ (8001cc4 <DMA1_Stream5_IRQHandler+0x10>)
 8001cba:	f000 fb4f 	bl	800235c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000124 	.word	0x20000124

08001cc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ccc:	4802      	ldr	r0, [pc, #8]	@ (8001cd8 <TIM2_IRQHandler+0x10>)
 8001cce:	f003 fdd7 	bl	8005880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000184 	.word	0x20000184

08001cdc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001ce0:	4802      	ldr	r0, [pc, #8]	@ (8001cec <SPI3_IRQHandler+0x10>)
 8001ce2:	f002 fafb 	bl	80042dc <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200000dc 	.word	0x200000dc

08001cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <SystemInit+0x20>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cfa:	4a05      	ldr	r2, [pc, #20]	@ (8001d10 <SystemInit+0x20>)
 8001cfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d18:	f7ff ffea 	bl	8001cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d1c:	480c      	ldr	r0, [pc, #48]	@ (8001d50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d1e:	490d      	ldr	r1, [pc, #52]	@ (8001d54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d20:	4a0d      	ldr	r2, [pc, #52]	@ (8001d58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d34:	4c0a      	ldr	r4, [pc, #40]	@ (8001d60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d42:	f004 f927 	bl	8005f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d46:	f7ff fbcd 	bl	80014e4 <main>
  bx  lr    
 8001d4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d54:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001d58:	080075b8 	.word	0x080075b8
  ldr r2, =_sbss
 8001d5c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001d60:	20009e24 	.word	0x20009e24

08001d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC_IRQHandler>
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0d      	ldr	r2, [pc, #52]	@ (8001da8 <HAL_Init+0x40>)
 8001d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d78:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <HAL_Init+0x40>)
 8001d7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a07      	ldr	r2, [pc, #28]	@ (8001da8 <HAL_Init+0x40>)
 8001d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 f92b 	bl	8001fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f000 f808 	bl	8001dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9c:	f7ff fe06 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023c00 	.word	0x40023c00

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db4:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_InitTick+0x54>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_InitTick+0x58>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f943 	bl	8002056 <HAL_SYSTICK_Config>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00e      	b.n	8001df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	d80a      	bhi.n	8001df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de0:	2200      	movs	r2, #0
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f000 f90b 	bl	8002002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dec:	4a06      	ldr	r2, [pc, #24]	@ (8001e08 <HAL_InitTick+0x5c>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000008 	.word	0x20000008
 8001e04:	20000010 	.word	0x20000010
 8001e08:	2000000c 	.word	0x2000000c

08001e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_IncTick+0x20>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_IncTick+0x24>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a04      	ldr	r2, [pc, #16]	@ (8001e30 <HAL_IncTick+0x24>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	20009e20 	.word	0x20009e20

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b03      	ldr	r3, [pc, #12]	@ (8001e48 <HAL_GetTick+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20009e20 	.word	0x20009e20

08001e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7e:	4a04      	ldr	r2, [pc, #16]	@ (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	60d3      	str	r3, [r2, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4907      	ldr	r1, [pc, #28]	@ (8001ee8 <__NVIC_EnableIRQ+0x38>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	@ (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	@ 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fb8:	d301      	bcc.n	8001fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00f      	b.n	8001fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <SysTick_Config+0x40>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f7ff ff8e 	bl	8001eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <SysTick_Config+0x40>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <SysTick_Config+0x40>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff29 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002014:	f7ff ff3e 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8002018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	6978      	ldr	r0, [r7, #20]
 8002020:	f7ff ff8e 	bl	8001f40 <NVIC_EncodePriority>
 8002024:	4602      	mov	r2, r0
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff5d 	bl	8001eec <__NVIC_SetPriority>
}
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff31 	bl	8001eb0 <__NVIC_EnableIRQ>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ffa2 	bl	8001fa8 <SysTick_Config>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff feda 	bl	8001e34 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e099      	b.n	80021c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ac:	e00f      	b.n	80020ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ae:	f7ff fec1 	bl	8001e34 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d908      	bls.n	80020ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2220      	movs	r2, #32
 80020c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2203      	movs	r2, #3
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e078      	b.n	80021c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1e8      	bne.n	80020ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	4b38      	ldr	r3, [pc, #224]	@ (80021c8 <HAL_DMA_Init+0x158>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	2b04      	cmp	r3, #4
 8002126:	d107      	bne.n	8002138 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002130:	4313      	orrs	r3, r2
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f023 0307 	bic.w	r3, r3, #7
 800214e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	2b04      	cmp	r3, #4
 8002160:	d117      	bne.n	8002192 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00e      	beq.n	8002192 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fadf 	bl	8002738 <DMA_CheckFifoParam>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2240      	movs	r2, #64	@ 0x40
 8002184:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800218e:	2301      	movs	r3, #1
 8002190:	e016      	b.n	80021c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fa96 	bl	80026cc <DMA_CalcBaseAndBitshift>
 80021a0:	4603      	mov	r3, r0
 80021a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a8:	223f      	movs	r2, #63	@ 0x3f
 80021aa:	409a      	lsls	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	f010803f 	.word	0xf010803f

080021cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_DMA_Start_IT+0x26>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e040      	b.n	8002274 <HAL_DMA_Start_IT+0xa8>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d12f      	bne.n	8002266 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2202      	movs	r2, #2
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fa28 	bl	8002670 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002224:	223f      	movs	r2, #63	@ 0x3f
 8002226:	409a      	lsls	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0216 	orr.w	r2, r2, #22
 800223a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0208 	orr.w	r2, r2, #8
 8002252:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e005      	b.n	8002272 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800226e:	2302      	movs	r3, #2
 8002270:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002272:	7dfb      	ldrb	r3, [r7, #23]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002288:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800228a:	f7ff fdd3 	bl	8001e34 <HAL_GetTick>
 800228e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d008      	beq.n	80022ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2280      	movs	r2, #128	@ 0x80
 80022a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e052      	b.n	8002354 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0216 	bic.w	r2, r2, #22
 80022bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <HAL_DMA_Abort+0x62>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0208 	bic.w	r2, r2, #8
 80022ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0201 	bic.w	r2, r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fe:	e013      	b.n	8002328 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002300:	f7ff fd98 	bl	8001e34 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b05      	cmp	r3, #5
 800230c:	d90c      	bls.n	8002328 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2220      	movs	r2, #32
 8002312:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2203      	movs	r2, #3
 8002318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e015      	b.n	8002354 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1e4      	bne.n	8002300 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233a:	223f      	movs	r2, #63	@ 0x3f
 800233c:	409a      	lsls	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002368:	4b8e      	ldr	r3, [pc, #568]	@ (80025a4 <HAL_DMA_IRQHandler+0x248>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a8e      	ldr	r2, [pc, #568]	@ (80025a8 <HAL_DMA_IRQHandler+0x24c>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	0a9b      	lsrs	r3, r3, #10
 8002374:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002386:	2208      	movs	r2, #8
 8002388:	409a      	lsls	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01a      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0204 	bic.w	r2, r2, #4
 80023ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b4:	2208      	movs	r2, #8
 80023b6:	409a      	lsls	r2, r3
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023cc:	2201      	movs	r2, #1
 80023ce:	409a      	lsls	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d012      	beq.n	80023fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ea:	2201      	movs	r2, #1
 80023ec:	409a      	lsls	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002402:	2204      	movs	r2, #4
 8002404:	409a      	lsls	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d012      	beq.n	8002434 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002420:	2204      	movs	r2, #4
 8002422:	409a      	lsls	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242c:	f043 0204 	orr.w	r2, r3, #4
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002438:	2210      	movs	r2, #16
 800243a:	409a      	lsls	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d043      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d03c      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002456:	2210      	movs	r2, #16
 8002458:	409a      	lsls	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d018      	beq.n	800249e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d108      	bne.n	800248c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d024      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
 800248a:	e01f      	b.n	80024cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01b      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	4798      	blx	r3
 800249c:	e016      	b.n	80024cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d107      	bne.n	80024bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0208 	bic.w	r2, r2, #8
 80024ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d0:	2220      	movs	r2, #32
 80024d2:	409a      	lsls	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 808f 	beq.w	80025fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8087 	beq.w	80025fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f2:	2220      	movs	r2, #32
 80024f4:	409a      	lsls	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b05      	cmp	r3, #5
 8002504:	d136      	bne.n	8002574 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0216 	bic.w	r2, r2, #22
 8002514:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002524:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d103      	bne.n	8002536 <HAL_DMA_IRQHandler+0x1da>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0208 	bic.w	r2, r2, #8
 8002544:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	223f      	movs	r2, #63	@ 0x3f
 800254c:	409a      	lsls	r2, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002566:	2b00      	cmp	r3, #0
 8002568:	d07e      	beq.n	8002668 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
        }
        return;
 8002572:	e079      	b.n	8002668 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01d      	beq.n	80025be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10d      	bne.n	80025ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002594:	2b00      	cmp	r3, #0
 8002596:	d031      	beq.n	80025fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
 80025a0:	e02c      	b.n	80025fc <HAL_DMA_IRQHandler+0x2a0>
 80025a2:	bf00      	nop
 80025a4:	20000008 	.word	0x20000008
 80025a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d023      	beq.n	80025fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
 80025bc:	e01e      	b.n	80025fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10f      	bne.n	80025ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0210 	bic.w	r2, r2, #16
 80025da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002600:	2b00      	cmp	r3, #0
 8002602:	d032      	beq.n	800266a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d022      	beq.n	8002656 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2205      	movs	r2, #5
 8002614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	3301      	adds	r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	429a      	cmp	r2, r3
 8002632:	d307      	bcc.n	8002644 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f2      	bne.n	8002628 <HAL_DMA_IRQHandler+0x2cc>
 8002642:	e000      	b.n	8002646 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002644:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	4798      	blx	r3
 8002666:	e000      	b.n	800266a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002668:	bf00      	nop
    }
  }
}
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800268c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b40      	cmp	r3, #64	@ 0x40
 800269c:	d108      	bne.n	80026b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026ae:	e007      	b.n	80026c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	60da      	str	r2, [r3, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	3b10      	subs	r3, #16
 80026dc:	4a14      	ldr	r2, [pc, #80]	@ (8002730 <DMA_CalcBaseAndBitshift+0x64>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026e6:	4a13      	ldr	r2, [pc, #76]	@ (8002734 <DMA_CalcBaseAndBitshift+0x68>)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d909      	bls.n	800270e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	1d1a      	adds	r2, r3, #4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	659a      	str	r2, [r3, #88]	@ 0x58
 800270c:	e007      	b.n	800271e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002716:	f023 0303 	bic.w	r3, r3, #3
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	aaaaaaab 	.word	0xaaaaaaab
 8002734:	080073c8 	.word	0x080073c8

08002738 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002748:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d11f      	bne.n	8002792 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d856      	bhi.n	8002806 <DMA_CheckFifoParam+0xce>
 8002758:	a201      	add	r2, pc, #4	@ (adr r2, 8002760 <DMA_CheckFifoParam+0x28>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002771 	.word	0x08002771
 8002764:	08002783 	.word	0x08002783
 8002768:	08002771 	.word	0x08002771
 800276c:	08002807 	.word	0x08002807
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002774:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d046      	beq.n	800280a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002780:	e043      	b.n	800280a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002786:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800278a:	d140      	bne.n	800280e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002790:	e03d      	b.n	800280e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800279a:	d121      	bne.n	80027e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d837      	bhi.n	8002812 <DMA_CheckFifoParam+0xda>
 80027a2:	a201      	add	r2, pc, #4	@ (adr r2, 80027a8 <DMA_CheckFifoParam+0x70>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	080027bf 	.word	0x080027bf
 80027b0:	080027b9 	.word	0x080027b9
 80027b4:	080027d1 	.word	0x080027d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      break;
 80027bc:	e030      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d025      	beq.n	8002816 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ce:	e022      	b.n	8002816 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027d8:	d11f      	bne.n	800281a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027de:	e01c      	b.n	800281a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d903      	bls.n	80027ee <DMA_CheckFifoParam+0xb6>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d003      	beq.n	80027f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027ec:	e018      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
      break;
 80027f2:	e015      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00e      	beq.n	800281e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      break;
 8002804:	e00b      	b.n	800281e <DMA_CheckFifoParam+0xe6>
      break;
 8002806:	bf00      	nop
 8002808:	e00a      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
 800280c:	e008      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
 8002810:	e006      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      break;
 8002812:	bf00      	nop
 8002814:	e004      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      break;
 8002816:	bf00      	nop
 8002818:	e002      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      break;   
 800281a:	bf00      	nop
 800281c:	e000      	b.n	8002820 <DMA_CheckFifoParam+0xe8>
      break;
 800281e:	bf00      	nop
    }
  } 
  
  return status; 
 8002820:	7bfb      	ldrb	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	@ 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	e159      	b.n	8002b00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800284c:	2201      	movs	r2, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	429a      	cmp	r2, r3
 8002866:	f040 8148 	bne.w	8002afa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d005      	beq.n	8002882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287e:	2b02      	cmp	r3, #2
 8002880:	d130      	bne.n	80028e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	2203      	movs	r2, #3
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b8:	2201      	movs	r2, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 0201 	and.w	r2, r3, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d017      	beq.n	8002920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d123      	bne.n	8002974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	08da      	lsrs	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3208      	adds	r2, #8
 8002934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	220f      	movs	r2, #15
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	08da      	lsrs	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3208      	adds	r2, #8
 800296e:	69b9      	ldr	r1, [r7, #24]
 8002970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2203      	movs	r2, #3
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0203 	and.w	r2, r3, #3
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a2 	beq.w	8002afa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	4b57      	ldr	r3, [pc, #348]	@ (8002b18 <HAL_GPIO_Init+0x2e8>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	4a56      	ldr	r2, [pc, #344]	@ (8002b18 <HAL_GPIO_Init+0x2e8>)
 80029c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029c6:	4b54      	ldr	r3, [pc, #336]	@ (8002b18 <HAL_GPIO_Init+0x2e8>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029d2:	4a52      	ldr	r2, [pc, #328]	@ (8002b1c <HAL_GPIO_Init+0x2ec>)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	220f      	movs	r2, #15
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a49      	ldr	r2, [pc, #292]	@ (8002b20 <HAL_GPIO_Init+0x2f0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d019      	beq.n	8002a32 <HAL_GPIO_Init+0x202>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a48      	ldr	r2, [pc, #288]	@ (8002b24 <HAL_GPIO_Init+0x2f4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_GPIO_Init+0x1fe>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a47      	ldr	r2, [pc, #284]	@ (8002b28 <HAL_GPIO_Init+0x2f8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00d      	beq.n	8002a2a <HAL_GPIO_Init+0x1fa>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a46      	ldr	r2, [pc, #280]	@ (8002b2c <HAL_GPIO_Init+0x2fc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d007      	beq.n	8002a26 <HAL_GPIO_Init+0x1f6>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a45      	ldr	r2, [pc, #276]	@ (8002b30 <HAL_GPIO_Init+0x300>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d101      	bne.n	8002a22 <HAL_GPIO_Init+0x1f2>
 8002a1e:	2304      	movs	r3, #4
 8002a20:	e008      	b.n	8002a34 <HAL_GPIO_Init+0x204>
 8002a22:	2307      	movs	r3, #7
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x204>
 8002a26:	2303      	movs	r3, #3
 8002a28:	e004      	b.n	8002a34 <HAL_GPIO_Init+0x204>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e002      	b.n	8002a34 <HAL_GPIO_Init+0x204>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_GPIO_Init+0x204>
 8002a32:	2300      	movs	r3, #0
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	f002 0203 	and.w	r2, r2, #3
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	4093      	lsls	r3, r2
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a44:	4935      	ldr	r1, [pc, #212]	@ (8002b1c <HAL_GPIO_Init+0x2ec>)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a52:	4b38      	ldr	r3, [pc, #224]	@ (8002b34 <HAL_GPIO_Init+0x304>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a76:	4a2f      	ldr	r2, [pc, #188]	@ (8002b34 <HAL_GPIO_Init+0x304>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b34 <HAL_GPIO_Init+0x304>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa0:	4a24      	ldr	r2, [pc, #144]	@ (8002b34 <HAL_GPIO_Init+0x304>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aa6:	4b23      	ldr	r3, [pc, #140]	@ (8002b34 <HAL_GPIO_Init+0x304>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aca:	4a1a      	ldr	r2, [pc, #104]	@ (8002b34 <HAL_GPIO_Init+0x304>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad0:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <HAL_GPIO_Init+0x304>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af4:	4a0f      	ldr	r2, [pc, #60]	@ (8002b34 <HAL_GPIO_Init+0x304>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3301      	adds	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b0f      	cmp	r3, #15
 8002b04:	f67f aea2 	bls.w	800284c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	3724      	adds	r7, #36	@ 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40013800 	.word	0x40013800
 8002b20:	40020000 	.word	0x40020000
 8002b24:	40020400 	.word	0x40020400
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	40020c00 	.word	0x40020c00
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40013c00 	.word	0x40013c00

08002b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
 8002b44:	4613      	mov	r3, r2
 8002b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b48:	787b      	ldrb	r3, [r7, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b54:	e003      	b.n	8002b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b56:	887b      	ldrh	r3, [r7, #2]
 8002b58:	041a      	lsls	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	619a      	str	r2, [r3, #24]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e12b      	b.n	8002dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe ff32 	bl	80019fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2224      	movs	r2, #36	@ 0x24
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bd0:	f002 fbe4 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 8002bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4a81      	ldr	r2, [pc, #516]	@ (8002de0 <HAL_I2C_Init+0x274>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d807      	bhi.n	8002bf0 <HAL_I2C_Init+0x84>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4a80      	ldr	r2, [pc, #512]	@ (8002de4 <HAL_I2C_Init+0x278>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	bf94      	ite	ls
 8002be8:	2301      	movls	r3, #1
 8002bea:	2300      	movhi	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e006      	b.n	8002bfe <HAL_I2C_Init+0x92>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a7d      	ldr	r2, [pc, #500]	@ (8002de8 <HAL_I2C_Init+0x27c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	bf94      	ite	ls
 8002bf8:	2301      	movls	r3, #1
 8002bfa:	2300      	movhi	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0e7      	b.n	8002dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4a78      	ldr	r2, [pc, #480]	@ (8002dec <HAL_I2C_Init+0x280>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	0c9b      	lsrs	r3, r3, #18
 8002c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a6a      	ldr	r2, [pc, #424]	@ (8002de0 <HAL_I2C_Init+0x274>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d802      	bhi.n	8002c40 <HAL_I2C_Init+0xd4>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	e009      	b.n	8002c54 <HAL_I2C_Init+0xe8>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	4a69      	ldr	r2, [pc, #420]	@ (8002df0 <HAL_I2C_Init+0x284>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	099b      	lsrs	r3, r3, #6
 8002c52:	3301      	adds	r3, #1
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	495c      	ldr	r1, [pc, #368]	@ (8002de0 <HAL_I2C_Init+0x274>)
 8002c70:	428b      	cmp	r3, r1
 8002c72:	d819      	bhi.n	8002ca8 <HAL_I2C_Init+0x13c>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1e59      	subs	r1, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c82:	1c59      	adds	r1, r3, #1
 8002c84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c88:	400b      	ands	r3, r1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_I2C_Init+0x138>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1e59      	subs	r1, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca2:	e051      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	e04f      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d111      	bne.n	8002cd4 <HAL_I2C_Init+0x168>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1e58      	subs	r0, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6859      	ldr	r1, [r3, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	440b      	add	r3, r1
 8002cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e012      	b.n	8002cfa <HAL_I2C_Init+0x18e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1e58      	subs	r0, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	0099      	lsls	r1, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cea:	3301      	adds	r3, #1
 8002cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Init+0x196>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e022      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10e      	bne.n	8002d28 <HAL_I2C_Init+0x1bc>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1e58      	subs	r0, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	440b      	add	r3, r1
 8002d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d26:	e00f      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e58      	subs	r0, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	0099      	lsls	r1, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	6809      	ldr	r1, [r1, #0]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6911      	ldr	r1, [r2, #16]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68d2      	ldr	r2, [r2, #12]
 8002d82:	4311      	orrs	r1, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	000186a0 	.word	0x000186a0
 8002de4:	001e847f 	.word	0x001e847f
 8002de8:	003d08ff 	.word	0x003d08ff
 8002dec:	431bde83 	.word	0x431bde83
 8002df0:	10624dd3 	.word	0x10624dd3

08002df4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	460b      	mov	r3, r1
 8002e02:	817b      	strh	r3, [r7, #10]
 8002e04:	4613      	mov	r3, r2
 8002e06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e08:	f7ff f814 	bl	8001e34 <HAL_GetTick>
 8002e0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	f040 80e0 	bne.w	8002fdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2319      	movs	r3, #25
 8002e22:	2201      	movs	r2, #1
 8002e24:	4970      	ldr	r1, [pc, #448]	@ (8002fe8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fc64 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
 8002e34:	e0d3      	b.n	8002fde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_I2C_Master_Transmit+0x50>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e0cc      	b.n	8002fde <HAL_I2C_Master_Transmit+0x1ea>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d007      	beq.n	8002e6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0201 	orr.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2221      	movs	r2, #33	@ 0x21
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2210      	movs	r2, #16
 8002e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	893a      	ldrh	r2, [r7, #8]
 8002e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4a50      	ldr	r2, [pc, #320]	@ (8002fec <HAL_I2C_Master_Transmit+0x1f8>)
 8002eaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002eac:	8979      	ldrh	r1, [r7, #10]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	6a3a      	ldr	r2, [r7, #32]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 face 	bl	8003454 <I2C_MasterRequestWrite>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e08d      	b.n	8002fde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ed8:	e066      	b.n	8002fa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	6a39      	ldr	r1, [r7, #32]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fd22 	bl	8003928 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00d      	beq.n	8002f06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d107      	bne.n	8002f02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e06b      	b.n	8002fde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	781a      	ldrb	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d11b      	bne.n	8002f7c <HAL_I2C_Master_Transmit+0x188>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d017      	beq.n	8002f7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	6a39      	ldr	r1, [r7, #32]
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fd19 	bl	80039b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00d      	beq.n	8002fa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d107      	bne.n	8002fa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e01a      	b.n	8002fde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d194      	bne.n	8002eda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e000      	b.n	8002fde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fdc:	2302      	movs	r3, #2
  }
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	00100002 	.word	0x00100002
 8002fec:	ffff0000 	.word	0xffff0000

08002ff0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08c      	sub	sp, #48	@ 0x30
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	817b      	strh	r3, [r7, #10]
 8003000:	4613      	mov	r3, r2
 8003002:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003004:	f7fe ff16 	bl	8001e34 <HAL_GetTick>
 8003008:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b20      	cmp	r3, #32
 8003014:	f040 8217 	bne.w	8003446 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2319      	movs	r3, #25
 800301e:	2201      	movs	r2, #1
 8003020:	497c      	ldr	r1, [pc, #496]	@ (8003214 <HAL_I2C_Master_Receive+0x224>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fb66 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	e20a      	b.n	8003448 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_I2C_Master_Receive+0x50>
 800303c:	2302      	movs	r3, #2
 800303e:	e203      	b.n	8003448 <HAL_I2C_Master_Receive+0x458>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d007      	beq.n	8003066 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0201 	orr.w	r2, r2, #1
 8003064:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003074:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2222      	movs	r2, #34	@ 0x22
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2210      	movs	r2, #16
 8003082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	893a      	ldrh	r2, [r7, #8]
 8003096:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4a5c      	ldr	r2, [pc, #368]	@ (8003218 <HAL_I2C_Master_Receive+0x228>)
 80030a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030a8:	8979      	ldrh	r1, [r7, #10]
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fa52 	bl	8003558 <I2C_MasterRequestRead>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e1c4      	b.n	8003448 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d113      	bne.n	80030ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	623b      	str	r3, [r7, #32]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	623b      	str	r3, [r7, #32]
 80030da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e198      	b.n	8003420 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d11b      	bne.n	800312e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e178      	b.n	8003420 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003132:	2b02      	cmp	r3, #2
 8003134:	d11b      	bne.n	800316e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003144:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003156:	2300      	movs	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	e158      	b.n	8003420 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800317c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003194:	e144      	b.n	8003420 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319a:	2b03      	cmp	r3, #3
 800319c:	f200 80f1 	bhi.w	8003382 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d123      	bne.n	80031f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fc4b 	bl	8003a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e145      	b.n	8003448 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031ee:	e117      	b.n	8003420 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d14e      	bne.n	8003296 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fe:	2200      	movs	r2, #0
 8003200:	4906      	ldr	r1, [pc, #24]	@ (800321c <HAL_I2C_Master_Receive+0x22c>)
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fa76 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e11a      	b.n	8003448 <HAL_I2C_Master_Receive+0x458>
 8003212:	bf00      	nop
 8003214:	00100002 	.word	0x00100002
 8003218:	ffff0000 	.word	0xffff0000
 800321c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800322e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003294:	e0c4      	b.n	8003420 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329c:	2200      	movs	r2, #0
 800329e:	496c      	ldr	r1, [pc, #432]	@ (8003450 <HAL_I2C_Master_Receive+0x460>)
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fa27 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0cb      	b.n	8003448 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f8:	2200      	movs	r2, #0
 80032fa:	4955      	ldr	r1, [pc, #340]	@ (8003450 <HAL_I2C_Master_Receive+0x460>)
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f9f9 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e09d      	b.n	8003448 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800331a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003380:	e04e      	b.n	8003420 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003384:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fb5e 	bl	8003a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e058      	b.n	8003448 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d124      	bne.n	8003420 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d107      	bne.n	80033ee <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ec:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	f47f aeb6 	bne.w	8003196 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	e000      	b.n	8003448 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003446:	2302      	movs	r3, #2
  }
}
 8003448:	4618      	mov	r0, r3
 800344a:	3728      	adds	r7, #40	@ 0x28
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	00010004 	.word	0x00010004

08003454 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	460b      	mov	r3, r1
 8003462:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d006      	beq.n	800347e <I2C_MasterRequestWrite+0x2a>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d003      	beq.n	800347e <I2C_MasterRequestWrite+0x2a>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800347c:	d108      	bne.n	8003490 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e00b      	b.n	80034a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003494:	2b12      	cmp	r3, #18
 8003496:	d107      	bne.n	80034a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f91d 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00d      	beq.n	80034dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034ce:	d103      	bne.n	80034d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e035      	b.n	8003548 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034e4:	d108      	bne.n	80034f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034f4:	611a      	str	r2, [r3, #16]
 80034f6:	e01b      	b.n	8003530 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034f8:	897b      	ldrh	r3, [r7, #10]
 80034fa:	11db      	asrs	r3, r3, #7
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f003 0306 	and.w	r3, r3, #6
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f063 030f 	orn	r3, r3, #15
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	490e      	ldr	r1, [pc, #56]	@ (8003550 <I2C_MasterRequestWrite+0xfc>)
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f966 	bl	80037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e010      	b.n	8003548 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003526:	897b      	ldrh	r3, [r7, #10]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4907      	ldr	r1, [pc, #28]	@ (8003554 <I2C_MasterRequestWrite+0x100>)
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f956 	bl	80037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	00010008 	.word	0x00010008
 8003554:	00010002 	.word	0x00010002

08003558 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	460b      	mov	r3, r1
 8003566:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800357c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d006      	beq.n	8003592 <I2C_MasterRequestRead+0x3a>
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d003      	beq.n	8003592 <I2C_MasterRequestRead+0x3a>
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003590:	d108      	bne.n	80035a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e00b      	b.n	80035bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a8:	2b11      	cmp	r3, #17
 80035aa:	d107      	bne.n	80035bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f893 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00d      	beq.n	80035f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035e2:	d103      	bne.n	80035ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e079      	b.n	80036e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035f8:	d108      	bne.n	800360c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035fa:	897b      	ldrh	r3, [r7, #10]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	b2da      	uxtb	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	611a      	str	r2, [r3, #16]
 800360a:	e05f      	b.n	80036cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800360c:	897b      	ldrh	r3, [r7, #10]
 800360e:	11db      	asrs	r3, r3, #7
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f003 0306 	and.w	r3, r3, #6
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f063 030f 	orn	r3, r3, #15
 800361c:	b2da      	uxtb	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	4930      	ldr	r1, [pc, #192]	@ (80036ec <I2C_MasterRequestRead+0x194>)
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f8dc 	bl	80037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e054      	b.n	80036e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800363a:	897b      	ldrh	r3, [r7, #10]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4929      	ldr	r1, [pc, #164]	@ (80036f0 <I2C_MasterRequestRead+0x198>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f8cc 	bl	80037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e044      	b.n	80036e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800367e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f831 	bl	80036f4 <I2C_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036a6:	d103      	bne.n	80036b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ae:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e017      	b.n	80036e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80036b4:	897b      	ldrh	r3, [r7, #10]
 80036b6:	11db      	asrs	r3, r3, #7
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f003 0306 	and.w	r3, r3, #6
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f063 030e 	orn	r3, r3, #14
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	4907      	ldr	r1, [pc, #28]	@ (80036f0 <I2C_MasterRequestRead+0x198>)
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f888 	bl	80037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	00010008 	.word	0x00010008
 80036f0:	00010002 	.word	0x00010002

080036f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003704:	e048      	b.n	8003798 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d044      	beq.n	8003798 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370e:	f7fe fb91 	bl	8001e34 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <I2C_WaitOnFlagUntilTimeout+0x30>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d139      	bne.n	8003798 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d10d      	bne.n	800374a <I2C_WaitOnFlagUntilTimeout+0x56>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	43da      	mvns	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	e00c      	b.n	8003764 <I2C_WaitOnFlagUntilTimeout+0x70>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	43da      	mvns	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4013      	ands	r3, r2
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	429a      	cmp	r2, r3
 8003768:	d116      	bne.n	8003798 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e023      	b.n	80037e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	0c1b      	lsrs	r3, r3, #16
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10d      	bne.n	80037be <I2C_WaitOnFlagUntilTimeout+0xca>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	43da      	mvns	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4013      	ands	r3, r2
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	e00c      	b.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	43da      	mvns	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4013      	ands	r3, r2
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d093      	beq.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037f6:	e071      	b.n	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003806:	d123      	bne.n	8003850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003816:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003820:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	f043 0204 	orr.w	r2, r3, #4
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e067      	b.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d041      	beq.n	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003858:	f7fe faec 	bl	8001e34 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d136      	bne.n	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10c      	bne.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	43da      	mvns	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf14      	ite	ne
 800388a:	2301      	movne	r3, #1
 800388c:	2300      	moveq	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	e00b      	b.n	80038aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	43da      	mvns	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e021      	b.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	0c1b      	lsrs	r3, r3, #16
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d10c      	bne.n	8003900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	43da      	mvns	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4013      	ands	r3, r2
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e00b      	b.n	8003918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	43da      	mvns	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4013      	ands	r3, r2
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	f47f af6d 	bne.w	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003934:	e034      	b.n	80039a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f8e3 	bl	8003b02 <I2C_IsAcknowledgeFailed>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e034      	b.n	80039b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d028      	beq.n	80039a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394e:	f7fe fa71 	bl	8001e34 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d11d      	bne.n	80039a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396e:	2b80      	cmp	r3, #128	@ 0x80
 8003970:	d016      	beq.n	80039a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e007      	b.n	80039b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039aa:	2b80      	cmp	r3, #128	@ 0x80
 80039ac:	d1c3      	bne.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039c4:	e034      	b.n	8003a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f89b 	bl	8003b02 <I2C_IsAcknowledgeFailed>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e034      	b.n	8003a40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d028      	beq.n	8003a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039de:	f7fe fa29 	bl	8001e34 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d302      	bcc.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11d      	bne.n	8003a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d016      	beq.n	8003a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	f043 0220 	orr.w	r2, r3, #32
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e007      	b.n	8003a40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d1c3      	bne.n	80039c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a54:	e049      	b.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d119      	bne.n	8003a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0210 	mvn.w	r2, #16
 8003a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e030      	b.n	8003afa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a98:	f7fe f9cc 	bl	8001e34 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d302      	bcc.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d11d      	bne.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab8:	2b40      	cmp	r3, #64	@ 0x40
 8003aba:	d016      	beq.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	f043 0220 	orr.w	r2, r3, #32
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e007      	b.n	8003afa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af4:	2b40      	cmp	r3, #64	@ 0x40
 8003af6:	d1ae      	bne.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b18:	d11b      	bne.n	8003b52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	f043 0204 	orr.w	r2, r3, #4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e128      	b.n	8003dc4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a90      	ldr	r2, [pc, #576]	@ (8003dcc <HAL_I2S_Init+0x26c>)
 8003b8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fd ff7d 	bl	8001a8c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ba8:	f023 030f 	bic.w	r3, r3, #15
 8003bac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d060      	beq.n	8003c80 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d102      	bne.n	8003bcc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003bc6:	2310      	movs	r3, #16
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	e001      	b.n	8003bd0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003bcc:	2320      	movs	r3, #32
 8003bce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d802      	bhi.n	8003bde <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003bde:	2001      	movs	r0, #1
 8003be0:	f001 fce0 	bl	80055a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003be4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bee:	d125      	bne.n	8003c3c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d010      	beq.n	8003c1a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	3305      	adds	r3, #5
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	e01f      	b.n	8003c5a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	3305      	adds	r3, #5
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	e00e      	b.n	8003c5a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c56:	3305      	adds	r3, #5
 8003c58:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4a5c      	ldr	r2, [pc, #368]	@ (8003dd0 <HAL_I2S_Init+0x270>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	08db      	lsrs	r3, r3, #3
 8003c64:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	021b      	lsls	r3, r3, #8
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	e003      	b.n	8003c88 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c80:	2302      	movs	r3, #2
 8003c82:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d902      	bls.n	8003c94 <HAL_I2S_Init+0x134>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	2bff      	cmp	r3, #255	@ 0xff
 8003c92:	d907      	bls.n	8003ca4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c98:	f043 0210 	orr.w	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e08f      	b.n	8003dc4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	ea42 0103 	orr.w	r1, r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003cc2:	f023 030f 	bic.w	r3, r3, #15
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6851      	ldr	r1, [r2, #4]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6892      	ldr	r2, [r2, #8]
 8003cce:	4311      	orrs	r1, r2
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	68d2      	ldr	r2, [r2, #12]
 8003cd4:	4311      	orrs	r1, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6992      	ldr	r2, [r2, #24]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ce6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d161      	bne.n	8003db4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a38      	ldr	r2, [pc, #224]	@ (8003dd4 <HAL_I2S_Init+0x274>)
 8003cf4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a37      	ldr	r2, [pc, #220]	@ (8003dd8 <HAL_I2S_Init+0x278>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d101      	bne.n	8003d04 <HAL_I2S_Init+0x1a4>
 8003d00:	4b36      	ldr	r3, [pc, #216]	@ (8003ddc <HAL_I2S_Init+0x27c>)
 8003d02:	e001      	b.n	8003d08 <HAL_I2S_Init+0x1a8>
 8003d04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	4932      	ldr	r1, [pc, #200]	@ (8003dd8 <HAL_I2S_Init+0x278>)
 8003d10:	428a      	cmp	r2, r1
 8003d12:	d101      	bne.n	8003d18 <HAL_I2S_Init+0x1b8>
 8003d14:	4a31      	ldr	r2, [pc, #196]	@ (8003ddc <HAL_I2S_Init+0x27c>)
 8003d16:	e001      	b.n	8003d1c <HAL_I2S_Init+0x1bc>
 8003d18:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003d1c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d20:	f023 030f 	bic.w	r3, r3, #15
 8003d24:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8003dd8 <HAL_I2S_Init+0x278>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d101      	bne.n	8003d34 <HAL_I2S_Init+0x1d4>
 8003d30:	4b2a      	ldr	r3, [pc, #168]	@ (8003ddc <HAL_I2S_Init+0x27c>)
 8003d32:	e001      	b.n	8003d38 <HAL_I2S_Init+0x1d8>
 8003d34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d38:	2202      	movs	r2, #2
 8003d3a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a25      	ldr	r2, [pc, #148]	@ (8003dd8 <HAL_I2S_Init+0x278>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_I2S_Init+0x1ea>
 8003d46:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <HAL_I2S_Init+0x27c>)
 8003d48:	e001      	b.n	8003d4e <HAL_I2S_Init+0x1ee>
 8003d4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d5a:	d003      	beq.n	8003d64 <HAL_I2S_Init+0x204>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d103      	bne.n	8003d6c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	e001      	b.n	8003d70 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d84:	4313      	orrs	r3, r2
 8003d86:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	897b      	ldrh	r3, [r7, #10]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d9c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd8 <HAL_I2S_Init+0x278>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d101      	bne.n	8003dac <HAL_I2S_Init+0x24c>
 8003da8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ddc <HAL_I2S_Init+0x27c>)
 8003daa:	e001      	b.n	8003db0 <HAL_I2S_Init+0x250>
 8003dac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003db0:	897a      	ldrh	r2, [r7, #10]
 8003db2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	08004481 	.word	0x08004481
 8003dd0:	cccccccd 	.word	0xcccccccd
 8003dd4:	08004609 	.word	0x08004609
 8003dd8:	40003800 	.word	0x40003800
 8003ddc:	40003400 	.word	0x40003400

08003de0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	4613      	mov	r3, r2
 8003dec:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_I2S_Transmit_DMA+0x1a>
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e08a      	b.n	8003f14 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d001      	beq.n	8003e0e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e082      	b.n	8003f14 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_I2S_Transmit_DMA+0x3e>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e07a      	b.n	8003f14 <HAL_I2S_Transmit_DMA+0x134>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d002      	beq.n	8003e52 <HAL_I2S_Transmit_DMA+0x72>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b05      	cmp	r3, #5
 8003e50:	d10a      	bne.n	8003e68 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e66:	e005      	b.n	8003e74 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	88fa      	ldrh	r2, [r7, #6]
 8003e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	88fa      	ldrh	r2, [r7, #6]
 8003e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e78:	4a28      	ldr	r2, [pc, #160]	@ (8003f1c <HAL_I2S_Transmit_DMA+0x13c>)
 8003e7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e80:	4a27      	ldr	r2, [pc, #156]	@ (8003f20 <HAL_I2S_Transmit_DMA+0x140>)
 8003e82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	4a26      	ldr	r2, [pc, #152]	@ (8003f24 <HAL_I2S_Transmit_DMA+0x144>)
 8003e8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003e94:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003e9c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ea4:	f7fe f992 	bl	80021cc <HAL_DMA_Start_IT>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00f      	beq.n	8003ece <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	f043 0208 	orr.w	r2, r3, #8
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e022      	b.n	8003f14 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d107      	bne.n	8003ef4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0202 	orr.w	r2, r2, #2
 8003ef2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d107      	bne.n	8003f12 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f10:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	0800435f 	.word	0x0800435f
 8003f20:	0800431d 	.word	0x0800431d
 8003f24:	0800437b 	.word	0x0800437b

08003f28 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f3c:	d004      	beq.n	8003f48 <HAL_I2S_DMAStop+0x20>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f040 80d1 	bne.w	80040ea <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00f      	beq.n	8003f70 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe f991 	bl	800227c <HAL_DMA_Abort>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f64:	f043 0208 	orr.w	r2, r3, #8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003f70:	2364      	movs	r3, #100	@ 0x64
 8003f72:	2201      	movs	r2, #1
 8003f74:	2102      	movs	r1, #2
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fb0c 	bl	8004594 <I2S_WaitFlagStateUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003f9a:	2364      	movs	r3, #100	@ 0x64
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2180      	movs	r1, #128	@ 0x80
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 faf7 	bl	8004594 <I2S_WaitFlagStateUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00b      	beq.n	8003fc4 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb0:	f043 0201 	orr.w	r2, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fd2:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0202 	bic.w	r2, r2, #2
 8003ff0:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	f040 8165 	bne.w	80042ca <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00f      	beq.n	8004028 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe f935 	bl	800227c <HAL_DMA_Abort>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401c:	f043 0208 	orr.w	r2, r3, #8
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a8a      	ldr	r2, [pc, #552]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <HAL_I2S_DMAStop+0x10e>
 8004032:	4b8a      	ldr	r3, [pc, #552]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 8004034:	e001      	b.n	800403a <HAL_I2S_DMAStop+0x112>
 8004036:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4985      	ldr	r1, [pc, #532]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 8004042:	428b      	cmp	r3, r1
 8004044:	d101      	bne.n	800404a <HAL_I2S_DMAStop+0x122>
 8004046:	4b85      	ldr	r3, [pc, #532]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 8004048:	e001      	b.n	800404e <HAL_I2S_DMAStop+0x126>
 800404a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800404e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004052:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8004054:	2300      	movs	r3, #0
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a7e      	ldr	r2, [pc, #504]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d101      	bne.n	8004066 <HAL_I2S_DMAStop+0x13e>
 8004062:	4b7e      	ldr	r3, [pc, #504]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 8004064:	e001      	b.n	800406a <HAL_I2S_DMAStop+0x142>
 8004066:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a79      	ldr	r2, [pc, #484]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d101      	bne.n	800407c <HAL_I2S_DMAStop+0x154>
 8004078:	4b78      	ldr	r3, [pc, #480]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 800407a:	e001      	b.n	8004080 <HAL_I2S_DMAStop+0x158>
 800407c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a73      	ldr	r2, [pc, #460]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <HAL_I2S_DMAStop+0x16c>
 8004090:	4b72      	ldr	r3, [pc, #456]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 8004092:	e001      	b.n	8004098 <HAL_I2S_DMAStop+0x170>
 8004094:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	496e      	ldr	r1, [pc, #440]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 80040a0:	428b      	cmp	r3, r1
 80040a2:	d101      	bne.n	80040a8 <HAL_I2S_DMAStop+0x180>
 80040a4:	4b6d      	ldr	r3, [pc, #436]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 80040a6:	e001      	b.n	80040ac <HAL_I2S_DMAStop+0x184>
 80040a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ac:	f022 0201 	bic.w	r2, r2, #1
 80040b0:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10c      	bne.n	80040d4 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80040d2:	e0fa      	b.n	80042ca <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a5f      	ldr	r2, [pc, #380]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <HAL_I2S_DMAStop+0x1ba>
 80040de:	4b5f      	ldr	r3, [pc, #380]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 80040e0:	e001      	b.n	80040e6 <HAL_I2S_DMAStop+0x1be>
 80040e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040e6:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80040e8:	e0ef      	b.n	80042ca <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040f2:	d005      	beq.n	8004100 <HAL_I2S_DMAStop+0x1d8>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040fc:	f040 80e5 	bne.w	80042ca <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00f      	beq.n	8004128 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410c:	4618      	mov	r0, r3
 800410e:	f7fe f8b5 	bl	800227c <HAL_DMA_Abort>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411c:	f043 0208 	orr.w	r2, r3, #8
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b05      	cmp	r3, #5
 8004132:	f040 809a 	bne.w	800426a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00f      	beq.n	800415e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe f89a 	bl	800227c <HAL_DMA_Abort>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004152:	f043 0208 	orr.w	r2, r3, #8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800415e:	f7fd fe69 	bl	8001e34 <HAL_GetTick>
 8004162:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8004164:	e012      	b.n	800418c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004166:	f7fd fe65 	bl	8001e34 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b64      	cmp	r3, #100	@ 0x64
 8004172:	d90b      	bls.n	800418c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004178:	f043 0201 	orr.w	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a31      	ldr	r2, [pc, #196]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_I2S_DMAStop+0x272>
 8004196:	4b31      	ldr	r3, [pc, #196]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 8004198:	e001      	b.n	800419e <HAL_I2S_DMAStop+0x276>
 800419a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d1de      	bne.n	8004166 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80041a8:	e012      	b.n	80041d0 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80041aa:	f7fd fe43 	bl	8001e34 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b64      	cmp	r3, #100	@ 0x64
 80041b6:	d90b      	bls.n	80041d0 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a20      	ldr	r2, [pc, #128]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d101      	bne.n	80041de <HAL_I2S_DMAStop+0x2b6>
 80041da:	4b20      	ldr	r3, [pc, #128]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 80041dc:	e001      	b.n	80041e2 <HAL_I2S_DMAStop+0x2ba>
 80041de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e8:	2b80      	cmp	r3, #128	@ 0x80
 80041ea:	d0de      	beq.n	80041aa <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a19      	ldr	r2, [pc, #100]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d101      	bne.n	80041fa <HAL_I2S_DMAStop+0x2d2>
 80041f6:	4b19      	ldr	r3, [pc, #100]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 80041f8:	e001      	b.n	80041fe <HAL_I2S_DMAStop+0x2d6>
 80041fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4914      	ldr	r1, [pc, #80]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 8004206:	428b      	cmp	r3, r1
 8004208:	d101      	bne.n	800420e <HAL_I2S_DMAStop+0x2e6>
 800420a:	4b14      	ldr	r3, [pc, #80]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 800420c:	e001      	b.n	8004212 <HAL_I2S_DMAStop+0x2ea>
 800420e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004216:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a0d      	ldr	r2, [pc, #52]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d101      	bne.n	800422a <HAL_I2S_DMAStop+0x302>
 8004226:	4b0d      	ldr	r3, [pc, #52]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 8004228:	e001      	b.n	800422e <HAL_I2S_DMAStop+0x306>
 800422a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a07      	ldr	r2, [pc, #28]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d101      	bne.n	8004242 <HAL_I2S_DMAStop+0x31a>
 800423e:	4b07      	ldr	r3, [pc, #28]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 8004240:	e001      	b.n	8004246 <HAL_I2S_DMAStop+0x31e>
 8004242:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4902      	ldr	r1, [pc, #8]	@ (8004258 <HAL_I2S_DMAStop+0x330>)
 800424e:	428b      	cmp	r3, r1
 8004250:	d106      	bne.n	8004260 <HAL_I2S_DMAStop+0x338>
 8004252:	4b02      	ldr	r3, [pc, #8]	@ (800425c <HAL_I2S_DMAStop+0x334>)
 8004254:	e006      	b.n	8004264 <HAL_I2S_DMAStop+0x33c>
 8004256:	bf00      	nop
 8004258:	40003800 	.word	0x40003800
 800425c:	40003400 	.word	0x40003400
 8004260:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004264:	f022 0202 	bic.w	r2, r2, #2
 8004268:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004278:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a8:	d10c      	bne.n	80042c4 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e002      	b.n	80042ca <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 80042d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10e      	bne.n	8004350 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0202 	bic.w	r2, r2, #2
 8004340:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7fd fac7 	bl	80018e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7fd fac9 	bl	8001904 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004386:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0203 	bic.w	r2, r2, #3
 8004396:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b0:	f043 0208 	orr.w	r2, r3, #8
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f7ff ffa5 	bl	8004308 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	881a      	ldrh	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	1c9a      	adds	r2, r3, #2
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10e      	bne.n	800441a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800440a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7fd fa65 	bl	80018e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	b292      	uxth	r2, r2
 8004436:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	1c9a      	adds	r2, r3, #2
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10e      	bne.n	8004478 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004468:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff ff3e 	bl	80042f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004478:	bf00      	nop
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b04      	cmp	r3, #4
 800449a:	d13a      	bne.n	8004512 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d109      	bne.n	80044ba <I2S_IRQHandler+0x3a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b40      	cmp	r3, #64	@ 0x40
 80044b2:	d102      	bne.n	80044ba <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff ffb4 	bl	8004422 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c0:	2b40      	cmp	r3, #64	@ 0x40
 80044c2:	d126      	bne.n	8004512 <I2S_IRQHandler+0x92>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d11f      	bne.n	8004512 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044e0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004504:	f043 0202 	orr.w	r2, r3, #2
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fefb 	bl	8004308 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b03      	cmp	r3, #3
 800451c:	d136      	bne.n	800458c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b02      	cmp	r3, #2
 8004526:	d109      	bne.n	800453c <I2S_IRQHandler+0xbc>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004532:	2b80      	cmp	r3, #128	@ 0x80
 8004534:	d102      	bne.n	800453c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff ff45 	bl	80043c6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b08      	cmp	r3, #8
 8004544:	d122      	bne.n	800458c <I2S_IRQHandler+0x10c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b20      	cmp	r3, #32
 8004552:	d11b      	bne.n	800458c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004562:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457e:	f043 0204 	orr.w	r2, r3, #4
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff febe 	bl	8004308 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800458c:	bf00      	nop
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80045a4:	f7fd fc46 	bl	8001e34 <HAL_GetTick>
 80045a8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80045aa:	e018      	b.n	80045de <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b2:	d014      	beq.n	80045de <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80045b4:	f7fd fc3e 	bl	8001e34 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d902      	bls.n	80045ca <I2S_WaitFlagStateUntilTimeout+0x36>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e00f      	b.n	80045fe <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4013      	ands	r3, r2
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	bf0c      	ite	eq
 80045ee:	2301      	moveq	r3, #1
 80045f0:	2300      	movne	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d1d7      	bne.n	80045ac <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a92      	ldr	r2, [pc, #584]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d101      	bne.n	8004626 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004622:	4b92      	ldr	r3, [pc, #584]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004624:	e001      	b.n	800462a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004626:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a8b      	ldr	r2, [pc, #556]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d101      	bne.n	8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004640:	4b8a      	ldr	r3, [pc, #552]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004642:	e001      	b.n	8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004644:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004654:	d004      	beq.n	8004660 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 8099 	bne.w	8004792 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	d107      	bne.n	800467a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f925 	bl	80048c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d107      	bne.n	8004694 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f9c8 	bl	8004a24 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b40      	cmp	r3, #64	@ 0x40
 800469c:	d13a      	bne.n	8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d035      	beq.n	8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80046b2:	4b6e      	ldr	r3, [pc, #440]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046b4:	e001      	b.n	80046ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80046b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4969      	ldr	r1, [pc, #420]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046c2:	428b      	cmp	r3, r1
 80046c4:	d101      	bne.n	80046ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80046c6:	4b69      	ldr	r3, [pc, #420]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046c8:	e001      	b.n	80046ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80046ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	f043 0202 	orr.w	r2, r3, #2
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff fdfa 	bl	8004308 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b08      	cmp	r3, #8
 800471c:	f040 80c3 	bne.w	80048a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80bd 	beq.w	80048a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800473a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a49      	ldr	r2, [pc, #292]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004746:	4b49      	ldr	r3, [pc, #292]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004748:	e001      	b.n	800474e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800474a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4944      	ldr	r1, [pc, #272]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004756:	428b      	cmp	r3, r1
 8004758:	d101      	bne.n	800475e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800475a:	4b44      	ldr	r3, [pc, #272]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800475c:	e001      	b.n	8004762 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800475e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004762:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004766:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004768:	2300      	movs	r3, #0
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004782:	f043 0204 	orr.w	r2, r3, #4
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fdbc 	bl	8004308 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004790:	e089      	b.n	80048a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d107      	bne.n	80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f8be 	bl	8004928 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d107      	bne.n	80047c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f8fd 	bl	80049c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047cc:	2b40      	cmp	r3, #64	@ 0x40
 80047ce:	d12f      	bne.n	8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d02a      	beq.n	8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80047f4:	4b1d      	ldr	r3, [pc, #116]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047f6:	e001      	b.n	80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80047f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4919      	ldr	r1, [pc, #100]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004804:	428b      	cmp	r3, r1
 8004806:	d101      	bne.n	800480c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004808:	4b18      	ldr	r3, [pc, #96]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800480a:	e001      	b.n	8004810 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800480c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004810:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004814:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	f043 0202 	orr.w	r2, r3, #2
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff fd6c 	bl	8004308 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b08      	cmp	r3, #8
 8004838:	d136      	bne.n	80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d031      	beq.n	80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a07      	ldr	r2, [pc, #28]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d101      	bne.n	8004852 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800484e:	4b07      	ldr	r3, [pc, #28]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004850:	e001      	b.n	8004856 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004852:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4902      	ldr	r1, [pc, #8]	@ (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800485e:	428b      	cmp	r3, r1
 8004860:	d106      	bne.n	8004870 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004862:	4b02      	ldr	r3, [pc, #8]	@ (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004864:	e006      	b.n	8004874 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004866:	bf00      	nop
 8004868:	40003800 	.word	0x40003800
 800486c:	40003400 	.word	0x40003400
 8004870:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004874:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004878:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004888:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004896:	f043 0204 	orr.w	r2, r3, #4
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff fd32 	bl	8004308 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048a4:	e000      	b.n	80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048a6:	bf00      	nop
}
 80048a8:	bf00      	nop
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	1c99      	adds	r1, r3, #2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6251      	str	r1, [r2, #36]	@ 0x24
 80048d6:	881a      	ldrh	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d113      	bne.n	800491e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004904:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff ffc9 	bl	80048b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	1c99      	adds	r1, r3, #2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6251      	str	r1, [r2, #36]	@ 0x24
 800493a:	8819      	ldrh	r1, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d101      	bne.n	800494a <I2SEx_TxISR_I2SExt+0x22>
 8004946:	4b1d      	ldr	r3, [pc, #116]	@ (80049bc <I2SEx_TxISR_I2SExt+0x94>)
 8004948:	e001      	b.n	800494e <I2SEx_TxISR_I2SExt+0x26>
 800494a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800494e:	460a      	mov	r2, r1
 8004950:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d121      	bne.n	80049ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a12      	ldr	r2, [pc, #72]	@ (80049b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d101      	bne.n	8004978 <I2SEx_TxISR_I2SExt+0x50>
 8004974:	4b11      	ldr	r3, [pc, #68]	@ (80049bc <I2SEx_TxISR_I2SExt+0x94>)
 8004976:	e001      	b.n	800497c <I2SEx_TxISR_I2SExt+0x54>
 8004978:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	490d      	ldr	r1, [pc, #52]	@ (80049b8 <I2SEx_TxISR_I2SExt+0x90>)
 8004984:	428b      	cmp	r3, r1
 8004986:	d101      	bne.n	800498c <I2SEx_TxISR_I2SExt+0x64>
 8004988:	4b0c      	ldr	r3, [pc, #48]	@ (80049bc <I2SEx_TxISR_I2SExt+0x94>)
 800498a:	e001      	b.n	8004990 <I2SEx_TxISR_I2SExt+0x68>
 800498c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004990:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004994:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d106      	bne.n	80049ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff ff81 	bl	80048b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40003800 	.word	0x40003800
 80049bc:	40003400 	.word	0x40003400

080049c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68d8      	ldr	r0, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d2:	1c99      	adds	r1, r3, #2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80049d8:	b282      	uxth	r2, r0
 80049da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d113      	bne.n	8004a1c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a02:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff ff4a 	bl	80048b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a20      	ldr	r2, [pc, #128]	@ (8004ab4 <I2SEx_RxISR_I2SExt+0x90>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <I2SEx_RxISR_I2SExt+0x16>
 8004a36:	4b20      	ldr	r3, [pc, #128]	@ (8004ab8 <I2SEx_RxISR_I2SExt+0x94>)
 8004a38:	e001      	b.n	8004a3e <I2SEx_RxISR_I2SExt+0x1a>
 8004a3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a3e:	68d8      	ldr	r0, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	1c99      	adds	r1, r3, #2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004a4a:	b282      	uxth	r2, r0
 8004a4c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d121      	bne.n	8004aaa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a12      	ldr	r2, [pc, #72]	@ (8004ab4 <I2SEx_RxISR_I2SExt+0x90>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d101      	bne.n	8004a74 <I2SEx_RxISR_I2SExt+0x50>
 8004a70:	4b11      	ldr	r3, [pc, #68]	@ (8004ab8 <I2SEx_RxISR_I2SExt+0x94>)
 8004a72:	e001      	b.n	8004a78 <I2SEx_RxISR_I2SExt+0x54>
 8004a74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	490d      	ldr	r1, [pc, #52]	@ (8004ab4 <I2SEx_RxISR_I2SExt+0x90>)
 8004a80:	428b      	cmp	r3, r1
 8004a82:	d101      	bne.n	8004a88 <I2SEx_RxISR_I2SExt+0x64>
 8004a84:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <I2SEx_RxISR_I2SExt+0x94>)
 8004a86:	e001      	b.n	8004a8c <I2SEx_RxISR_I2SExt+0x68>
 8004a88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a90:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff03 	bl	80048b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40003800 	.word	0x40003800
 8004ab8:	40003400 	.word	0x40003400

08004abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e267      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d075      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ada:	4b88      	ldr	r3, [pc, #544]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d00c      	beq.n	8004b00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ae6:	4b85      	ldr	r3, [pc, #532]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d112      	bne.n	8004b18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af2:	4b82      	ldr	r3, [pc, #520]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004afa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004afe:	d10b      	bne.n	8004b18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	4b7e      	ldr	r3, [pc, #504]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d05b      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x108>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d157      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e242      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b20:	d106      	bne.n	8004b30 <HAL_RCC_OscConfig+0x74>
 8004b22:	4b76      	ldr	r3, [pc, #472]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a75      	ldr	r2, [pc, #468]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e01d      	b.n	8004b6c <HAL_RCC_OscConfig+0xb0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b38:	d10c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x98>
 8004b3a:	4b70      	ldr	r3, [pc, #448]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a6f      	ldr	r2, [pc, #444]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	4b6d      	ldr	r3, [pc, #436]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a6c      	ldr	r2, [pc, #432]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e00b      	b.n	8004b6c <HAL_RCC_OscConfig+0xb0>
 8004b54:	4b69      	ldr	r3, [pc, #420]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a68      	ldr	r2, [pc, #416]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	4b66      	ldr	r3, [pc, #408]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a65      	ldr	r2, [pc, #404]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b74:	f7fd f95e 	bl	8001e34 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b7c:	f7fd f95a 	bl	8001e34 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	@ 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e207      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0xc0>
 8004b9a:	e014      	b.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fd f94a 	bl	8001e34 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fd f946 	bl	8001e34 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	@ 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e1f3      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb6:	4b51      	ldr	r3, [pc, #324]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0xe8>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d063      	beq.n	8004c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bde:	4b47      	ldr	r3, [pc, #284]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d11c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bea:	4b44      	ldr	r3, [pc, #272]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d116      	bne.n	8004c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf6:	4b41      	ldr	r3, [pc, #260]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_RCC_OscConfig+0x152>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d001      	beq.n	8004c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e1c7      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4937      	ldr	r1, [pc, #220]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c22:	e03a      	b.n	8004c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d020      	beq.n	8004c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c2c:	4b34      	ldr	r3, [pc, #208]	@ (8004d00 <HAL_RCC_OscConfig+0x244>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c32:	f7fd f8ff 	bl	8001e34 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3a:	f7fd f8fb 	bl	8001e34 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e1a8      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c58:	4b28      	ldr	r3, [pc, #160]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4925      	ldr	r1, [pc, #148]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	600b      	str	r3, [r1, #0]
 8004c6c:	e015      	b.n	8004c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c6e:	4b24      	ldr	r3, [pc, #144]	@ (8004d00 <HAL_RCC_OscConfig+0x244>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd f8de 	bl	8001e34 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fd f8da 	bl	8001e34 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e187      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d036      	beq.n	8004d14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cae:	4b15      	ldr	r3, [pc, #84]	@ (8004d04 <HAL_RCC_OscConfig+0x248>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fd f8be 	bl	8001e34 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cbc:	f7fd f8ba 	bl	8001e34 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e167      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cce:	4b0b      	ldr	r3, [pc, #44]	@ (8004cfc <HAL_RCC_OscConfig+0x240>)
 8004cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x200>
 8004cda:	e01b      	b.n	8004d14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cdc:	4b09      	ldr	r3, [pc, #36]	@ (8004d04 <HAL_RCC_OscConfig+0x248>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce2:	f7fd f8a7 	bl	8001e34 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce8:	e00e      	b.n	8004d08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cea:	f7fd f8a3 	bl	8001e34 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d907      	bls.n	8004d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e150      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	42470000 	.word	0x42470000
 8004d04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d08:	4b88      	ldr	r3, [pc, #544]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1ea      	bne.n	8004cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 8097 	beq.w	8004e50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d22:	2300      	movs	r3, #0
 8004d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d26:	4b81      	ldr	r3, [pc, #516]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10f      	bne.n	8004d52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	4b7d      	ldr	r3, [pc, #500]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d42:	4b7a      	ldr	r3, [pc, #488]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d52:	4b77      	ldr	r3, [pc, #476]	@ (8004f30 <HAL_RCC_OscConfig+0x474>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d118      	bne.n	8004d90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d5e:	4b74      	ldr	r3, [pc, #464]	@ (8004f30 <HAL_RCC_OscConfig+0x474>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a73      	ldr	r2, [pc, #460]	@ (8004f30 <HAL_RCC_OscConfig+0x474>)
 8004d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6a:	f7fd f863 	bl	8001e34 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d72:	f7fd f85f 	bl	8001e34 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e10c      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d84:	4b6a      	ldr	r3, [pc, #424]	@ (8004f30 <HAL_RCC_OscConfig+0x474>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d106      	bne.n	8004da6 <HAL_RCC_OscConfig+0x2ea>
 8004d98:	4b64      	ldr	r3, [pc, #400]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9c:	4a63      	ldr	r2, [pc, #396]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da4:	e01c      	b.n	8004de0 <HAL_RCC_OscConfig+0x324>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b05      	cmp	r3, #5
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x30c>
 8004dae:	4b5f      	ldr	r3, [pc, #380]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db2:	4a5e      	ldr	r2, [pc, #376]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004db4:	f043 0304 	orr.w	r3, r3, #4
 8004db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dba:	4b5c      	ldr	r3, [pc, #368]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbe:	4a5b      	ldr	r2, [pc, #364]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004dc0:	f043 0301 	orr.w	r3, r3, #1
 8004dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dc6:	e00b      	b.n	8004de0 <HAL_RCC_OscConfig+0x324>
 8004dc8:	4b58      	ldr	r3, [pc, #352]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dcc:	4a57      	ldr	r2, [pc, #348]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd4:	4b55      	ldr	r3, [pc, #340]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd8:	4a54      	ldr	r2, [pc, #336]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004dda:	f023 0304 	bic.w	r3, r3, #4
 8004dde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d015      	beq.n	8004e14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fd f824 	bl	8001e34 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dee:	e00a      	b.n	8004e06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df0:	f7fd f820 	bl	8001e34 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e0cb      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e06:	4b49      	ldr	r3, [pc, #292]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0ee      	beq.n	8004df0 <HAL_RCC_OscConfig+0x334>
 8004e12:	e014      	b.n	8004e3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e14:	f7fd f80e 	bl	8001e34 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e1a:	e00a      	b.n	8004e32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1c:	f7fd f80a 	bl	8001e34 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e0b5      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e32:	4b3e      	ldr	r3, [pc, #248]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1ee      	bne.n	8004e1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d105      	bne.n	8004e50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e44:	4b39      	ldr	r3, [pc, #228]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e48:	4a38      	ldr	r2, [pc, #224]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80a1 	beq.w	8004f9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e5a:	4b34      	ldr	r3, [pc, #208]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d05c      	beq.n	8004f20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d141      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6e:	4b31      	ldr	r3, [pc, #196]	@ (8004f34 <HAL_RCC_OscConfig+0x478>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e74:	f7fc ffde 	bl	8001e34 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7c:	f7fc ffda 	bl	8001e34 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e087      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8e:	4b27      	ldr	r3, [pc, #156]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	019b      	lsls	r3, r3, #6
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb0:	085b      	lsrs	r3, r3, #1
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebc:	061b      	lsls	r3, r3, #24
 8004ebe:	491b      	ldr	r1, [pc, #108]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f34 <HAL_RCC_OscConfig+0x478>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eca:	f7fc ffb3 	bl	8001e34 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed2:	f7fc ffaf 	bl	8001e34 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e05c      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee4:	4b11      	ldr	r3, [pc, #68]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x416>
 8004ef0:	e054      	b.n	8004f9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef2:	4b10      	ldr	r3, [pc, #64]	@ (8004f34 <HAL_RCC_OscConfig+0x478>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef8:	f7fc ff9c 	bl	8001e34 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f00:	f7fc ff98 	bl	8001e34 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e045      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <HAL_RCC_OscConfig+0x470>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x444>
 8004f1e:	e03d      	b.n	8004f9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d107      	bne.n	8004f38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e038      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40007000 	.word	0x40007000
 8004f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f38:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <HAL_RCC_OscConfig+0x4ec>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d028      	beq.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d121      	bne.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d11a      	bne.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f68:	4013      	ands	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d111      	bne.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7e:	085b      	lsrs	r3, r3, #1
 8004f80:	3b01      	subs	r3, #1
 8004f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d107      	bne.n	8004f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d001      	beq.n	8004f9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40023800 	.word	0x40023800

08004fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0cc      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b68      	ldr	r3, [pc, #416]	@ (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d90c      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b65      	ldr	r3, [pc, #404]	@ (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b63      	ldr	r3, [pc, #396]	@ (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0b8      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d020      	beq.n	8005036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005000:	4b59      	ldr	r3, [pc, #356]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a58      	ldr	r2, [pc, #352]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800500a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005018:	4b53      	ldr	r3, [pc, #332]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a52      	ldr	r2, [pc, #328]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005024:	4b50      	ldr	r3, [pc, #320]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	494d      	ldr	r1, [pc, #308]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d044      	beq.n	80050cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	4b47      	ldr	r3, [pc, #284]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d119      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e07f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d003      	beq.n	800506a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005066:	2b03      	cmp	r3, #3
 8005068:	d107      	bne.n	800507a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506a:	4b3f      	ldr	r3, [pc, #252]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e06f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507a:	4b3b      	ldr	r3, [pc, #236]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e067      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800508a:	4b37      	ldr	r3, [pc, #220]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f023 0203 	bic.w	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4934      	ldr	r1, [pc, #208]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800509c:	f7fc feca 	bl	8001e34 <HAL_GetTick>
 80050a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a4:	f7fc fec6 	bl	8001e34 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e04f      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 020c 	and.w	r2, r3, #12
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d1eb      	bne.n	80050a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050cc:	4b25      	ldr	r3, [pc, #148]	@ (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d20c      	bcs.n	80050f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b22      	ldr	r3, [pc, #136]	@ (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e2:	4b20      	ldr	r3, [pc, #128]	@ (8005164 <HAL_RCC_ClockConfig+0x1b8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d001      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e032      	b.n	800515a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005100:	4b19      	ldr	r3, [pc, #100]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4916      	ldr	r1, [pc, #88]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800511e:	4b12      	ldr	r3, [pc, #72]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	490e      	ldr	r1, [pc, #56]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005132:	f000 f821 	bl	8005178 <HAL_RCC_GetSysClockFreq>
 8005136:	4602      	mov	r2, r0
 8005138:	4b0b      	ldr	r3, [pc, #44]	@ (8005168 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	490a      	ldr	r1, [pc, #40]	@ (800516c <HAL_RCC_ClockConfig+0x1c0>)
 8005144:	5ccb      	ldrb	r3, [r1, r3]
 8005146:	fa22 f303 	lsr.w	r3, r2, r3
 800514a:	4a09      	ldr	r2, [pc, #36]	@ (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 800514c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800514e:	4b09      	ldr	r3, [pc, #36]	@ (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fc fe2a 	bl	8001dac <HAL_InitTick>

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40023c00 	.word	0x40023c00
 8005168:	40023800 	.word	0x40023800
 800516c:	080073b0 	.word	0x080073b0
 8005170:	20000008 	.word	0x20000008
 8005174:	2000000c 	.word	0x2000000c

08005178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800517c:	b094      	sub	sp, #80	@ 0x50
 800517e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005190:	4b79      	ldr	r3, [pc, #484]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x200>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 030c 	and.w	r3, r3, #12
 8005198:	2b08      	cmp	r3, #8
 800519a:	d00d      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x40>
 800519c:	2b08      	cmp	r3, #8
 800519e:	f200 80e1 	bhi.w	8005364 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_RCC_GetSysClockFreq+0x34>
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d003      	beq.n	80051b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051aa:	e0db      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051ac:	4b73      	ldr	r3, [pc, #460]	@ (800537c <HAL_RCC_GetSysClockFreq+0x204>)
 80051ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051b0:	e0db      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051b2:	4b73      	ldr	r3, [pc, #460]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x208>)
 80051b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051b6:	e0d8      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d063      	beq.n	8005296 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x200>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	099b      	lsrs	r3, r3, #6
 80051d4:	2200      	movs	r2, #0
 80051d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051e2:	2300      	movs	r3, #0
 80051e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051ea:	4622      	mov	r2, r4
 80051ec:	462b      	mov	r3, r5
 80051ee:	f04f 0000 	mov.w	r0, #0
 80051f2:	f04f 0100 	mov.w	r1, #0
 80051f6:	0159      	lsls	r1, r3, #5
 80051f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051fc:	0150      	lsls	r0, r2, #5
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4621      	mov	r1, r4
 8005204:	1a51      	subs	r1, r2, r1
 8005206:	6139      	str	r1, [r7, #16]
 8005208:	4629      	mov	r1, r5
 800520a:	eb63 0301 	sbc.w	r3, r3, r1
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800521c:	4659      	mov	r1, fp
 800521e:	018b      	lsls	r3, r1, #6
 8005220:	4651      	mov	r1, sl
 8005222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005226:	4651      	mov	r1, sl
 8005228:	018a      	lsls	r2, r1, #6
 800522a:	4651      	mov	r1, sl
 800522c:	ebb2 0801 	subs.w	r8, r2, r1
 8005230:	4659      	mov	r1, fp
 8005232:	eb63 0901 	sbc.w	r9, r3, r1
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800524a:	4690      	mov	r8, r2
 800524c:	4699      	mov	r9, r3
 800524e:	4623      	mov	r3, r4
 8005250:	eb18 0303 	adds.w	r3, r8, r3
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	462b      	mov	r3, r5
 8005258:	eb49 0303 	adc.w	r3, r9, r3
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800526a:	4629      	mov	r1, r5
 800526c:	024b      	lsls	r3, r1, #9
 800526e:	4621      	mov	r1, r4
 8005270:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005274:	4621      	mov	r1, r4
 8005276:	024a      	lsls	r2, r1, #9
 8005278:	4610      	mov	r0, r2
 800527a:	4619      	mov	r1, r3
 800527c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800527e:	2200      	movs	r2, #0
 8005280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005288:	f7fb fc94 	bl	8000bb4 <__aeabi_uldivmod>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4613      	mov	r3, r2
 8005292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005294:	e058      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005296:	4b38      	ldr	r3, [pc, #224]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x200>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	099b      	lsrs	r3, r3, #6
 800529c:	2200      	movs	r2, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	4611      	mov	r1, r2
 80052a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	2300      	movs	r3, #0
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052b0:	4642      	mov	r2, r8
 80052b2:	464b      	mov	r3, r9
 80052b4:	f04f 0000 	mov.w	r0, #0
 80052b8:	f04f 0100 	mov.w	r1, #0
 80052bc:	0159      	lsls	r1, r3, #5
 80052be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052c2:	0150      	lsls	r0, r2, #5
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4641      	mov	r1, r8
 80052ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80052ce:	4649      	mov	r1, r9
 80052d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052e8:	ebb2 040a 	subs.w	r4, r2, sl
 80052ec:	eb63 050b 	sbc.w	r5, r3, fp
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	00eb      	lsls	r3, r5, #3
 80052fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052fe:	00e2      	lsls	r2, r4, #3
 8005300:	4614      	mov	r4, r2
 8005302:	461d      	mov	r5, r3
 8005304:	4643      	mov	r3, r8
 8005306:	18e3      	adds	r3, r4, r3
 8005308:	603b      	str	r3, [r7, #0]
 800530a:	464b      	mov	r3, r9
 800530c:	eb45 0303 	adc.w	r3, r5, r3
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800531e:	4629      	mov	r1, r5
 8005320:	028b      	lsls	r3, r1, #10
 8005322:	4621      	mov	r1, r4
 8005324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005328:	4621      	mov	r1, r4
 800532a:	028a      	lsls	r2, r1, #10
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005332:	2200      	movs	r2, #0
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	61fa      	str	r2, [r7, #28]
 8005338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800533c:	f7fb fc3a 	bl	8000bb4 <__aeabi_uldivmod>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4613      	mov	r3, r2
 8005346:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005348:	4b0b      	ldr	r3, [pc, #44]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x200>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	3301      	adds	r3, #1
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005358:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800535a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800535c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005360:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005362:	e002      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005364:	4b05      	ldr	r3, [pc, #20]	@ (800537c <HAL_RCC_GetSysClockFreq+0x204>)
 8005366:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800536a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800536c:	4618      	mov	r0, r3
 800536e:	3750      	adds	r7, #80	@ 0x50
 8005370:	46bd      	mov	sp, r7
 8005372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800
 800537c:	00f42400 	.word	0x00f42400
 8005380:	007a1200 	.word	0x007a1200

08005384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005388:	4b03      	ldr	r3, [pc, #12]	@ (8005398 <HAL_RCC_GetHCLKFreq+0x14>)
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20000008 	.word	0x20000008

0800539c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053a0:	f7ff fff0 	bl	8005384 <HAL_RCC_GetHCLKFreq>
 80053a4:	4602      	mov	r2, r0
 80053a6:	4b05      	ldr	r3, [pc, #20]	@ (80053bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	0a9b      	lsrs	r3, r3, #10
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	4903      	ldr	r1, [pc, #12]	@ (80053c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053b2:	5ccb      	ldrb	r3, [r1, r3]
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40023800 	.word	0x40023800
 80053c0:	080073c0 	.word	0x080073c0

080053c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d105      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d038      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053ec:	4b68      	ldr	r3, [pc, #416]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053f2:	f7fc fd1f 	bl	8001e34 <HAL_GetTick>
 80053f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053f8:	e008      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053fa:	f7fc fd1b 	bl	8001e34 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e0bd      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800540c:	4b61      	ldr	r3, [pc, #388]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f0      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	019b      	lsls	r3, r3, #6
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	071b      	lsls	r3, r3, #28
 800542a:	495a      	ldr	r1, [pc, #360]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005432:	4b57      	ldr	r3, [pc, #348]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005438:	f7fc fcfc 	bl	8001e34 <HAL_GetTick>
 800543c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005440:	f7fc fcf8 	bl	8001e34 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e09a      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005452:	4b50      	ldr	r3, [pc, #320]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8083 	beq.w	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	4b48      	ldr	r3, [pc, #288]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005474:	4a47      	ldr	r2, [pc, #284]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800547a:	6413      	str	r3, [r2, #64]	@ 0x40
 800547c:	4b45      	ldr	r3, [pc, #276]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005488:	4b43      	ldr	r3, [pc, #268]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a42      	ldr	r2, [pc, #264]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800548e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005492:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005494:	f7fc fcce 	bl	8001e34 <HAL_GetTick>
 8005498:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549c:	f7fc fcca 	bl	8001e34 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e06c      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80054ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054ba:	4b36      	ldr	r3, [pc, #216]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d02f      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d028      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054e0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054e2:	4b2e      	ldr	r3, [pc, #184]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054e8:	4b2c      	ldr	r3, [pc, #176]	@ (800559c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054ee:	4a29      	ldr	r2, [pc, #164]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054f4:	4b27      	ldr	r3, [pc, #156]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d114      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005500:	f7fc fc98 	bl	8001e34 <HAL_GetTick>
 8005504:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005506:	e00a      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005508:	f7fc fc94 	bl	8001e34 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e034      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551e:	4b1d      	ldr	r3, [pc, #116]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0ee      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005536:	d10d      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005538:	4b16      	ldr	r3, [pc, #88]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800554c:	4911      	ldr	r1, [pc, #68]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554e:	4313      	orrs	r3, r2
 8005550:	608b      	str	r3, [r1, #8]
 8005552:	e005      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005554:	4b0f      	ldr	r3, [pc, #60]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	4a0e      	ldr	r2, [pc, #56]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800555a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800555e:	6093      	str	r3, [r2, #8]
 8005560:	4b0c      	ldr	r3, [pc, #48]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005562:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556c:	4909      	ldr	r1, [pc, #36]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556e:	4313      	orrs	r3, r2
 8005570:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	7d1a      	ldrb	r2, [r3, #20]
 8005582:	4b07      	ldr	r3, [pc, #28]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005584:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	42470068 	.word	0x42470068
 8005594:	40023800 	.word	0x40023800
 8005598:	40007000 	.word	0x40007000
 800559c:	42470e40 	.word	0x42470e40
 80055a0:	424711e0 	.word	0x424711e0

080055a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d141      	bne.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80055c2:	4b25      	ldr	r3, [pc, #148]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d006      	beq.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055d8:	d131      	bne.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80055da:	4b20      	ldr	r3, [pc, #128]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80055dc:	617b      	str	r3, [r7, #20]
          break;
 80055de:	e031      	b.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055ec:	d109      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80055ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80055f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055f8:	4a19      	ldr	r2, [pc, #100]	@ (8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80055fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	e008      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005602:	4b15      	ldr	r3, [pc, #84]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800560c:	4a15      	ldr	r2, [pc, #84]	@ (8005664 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005614:	4b10      	ldr	r3, [pc, #64]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800561a:	099b      	lsrs	r3, r3, #6
 800561c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005628:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800562a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800562e:	0f1b      	lsrs	r3, r3, #28
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	fbb2 f3f3 	udiv	r3, r2, r3
 800563a:	617b      	str	r3, [r7, #20]
          break;
 800563c:	e002      	b.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
          break;
 8005642:	bf00      	nop
        }
      }
      break;
 8005644:	e000      	b.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8005646:	bf00      	nop
    }
  }
  return frequency;
 8005648:	697b      	ldr	r3, [r7, #20]
}
 800564a:	4618      	mov	r0, r3
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40023800 	.word	0x40023800
 800565c:	00bb8000 	.word	0x00bb8000
 8005660:	007a1200 	.word	0x007a1200
 8005664:	00f42400 	.word	0x00f42400

08005668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e041      	b.n	80056fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fc faba 	bl	8001c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f000 faca 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	d001      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e044      	b.n	80057aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0201 	orr.w	r2, r2, #1
 8005736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1e      	ldr	r2, [pc, #120]	@ (80057b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d018      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x6c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800574a:	d013      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x6c>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1a      	ldr	r2, [pc, #104]	@ (80057bc <HAL_TIM_Base_Start_IT+0xb4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00e      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x6c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a19      	ldr	r2, [pc, #100]	@ (80057c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d009      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x6c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a17      	ldr	r2, [pc, #92]	@ (80057c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d004      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x6c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a16      	ldr	r2, [pc, #88]	@ (80057c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d111      	bne.n	8005798 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b06      	cmp	r3, #6
 8005784:	d010      	beq.n	80057a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0201 	orr.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005796:	e007      	b.n	80057a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0201 	orr.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800
 80057c4:	40000c00 	.word	0x40000c00
 80057c8:	40014000 	.word	0x40014000

080057cc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e041      	b.n	8005864 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f839 	bl	800586c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3304      	adds	r3, #4
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f000 fa17 	bl	8005c40 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0208 	bic.w	r2, r2, #8
 8005820:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6819      	ldr	r1, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d020      	beq.n	80058e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01b      	beq.n	80058e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0202 	mvn.w	r2, #2
 80058b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f999 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 80058d0:	e005      	b.n	80058de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f98b 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f99c 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d020      	beq.n	8005930 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01b      	beq.n	8005930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f06f 0204 	mvn.w	r2, #4
 8005900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f973 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 800591c:	e005      	b.n	800592a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f965 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f976 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d020      	beq.n	800597c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01b      	beq.n	800597c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0208 	mvn.w	r2, #8
 800594c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2204      	movs	r2, #4
 8005952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f94d 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 8005968:	e005      	b.n	8005976 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f93f 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f950 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	2b00      	cmp	r3, #0
 8005984:	d020      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01b      	beq.n	80059c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0210 	mvn.w	r2, #16
 8005998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2208      	movs	r2, #8
 800599e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f927 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 80059b4:	e005      	b.n	80059c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f919 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f92a 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00c      	beq.n	80059ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0201 	mvn.w	r2, #1
 80059e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fb ff68 	bl	80018bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00c      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d007      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fab0 	bl	8005f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00c      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f8fb 	bl	8005c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00c      	beq.n	8005a58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0220 	mvn.w	r2, #32
 8005a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fa82 	bl	8005f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a58:	bf00      	nop
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_TIM_ConfigClockSource+0x1c>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e0b4      	b.n	8005be6 <HAL_TIM_ConfigClockSource+0x186>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005aa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ab4:	d03e      	beq.n	8005b34 <HAL_TIM_ConfigClockSource+0xd4>
 8005ab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aba:	f200 8087 	bhi.w	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ac2:	f000 8086 	beq.w	8005bd2 <HAL_TIM_ConfigClockSource+0x172>
 8005ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aca:	d87f      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005acc:	2b70      	cmp	r3, #112	@ 0x70
 8005ace:	d01a      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0xa6>
 8005ad0:	2b70      	cmp	r3, #112	@ 0x70
 8005ad2:	d87b      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ad4:	2b60      	cmp	r3, #96	@ 0x60
 8005ad6:	d050      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x11a>
 8005ad8:	2b60      	cmp	r3, #96	@ 0x60
 8005ada:	d877      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005adc:	2b50      	cmp	r3, #80	@ 0x50
 8005ade:	d03c      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0xfa>
 8005ae0:	2b50      	cmp	r3, #80	@ 0x50
 8005ae2:	d873      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ae4:	2b40      	cmp	r3, #64	@ 0x40
 8005ae6:	d058      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x13a>
 8005ae8:	2b40      	cmp	r3, #64	@ 0x40
 8005aea:	d86f      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005aec:	2b30      	cmp	r3, #48	@ 0x30
 8005aee:	d064      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15a>
 8005af0:	2b30      	cmp	r3, #48	@ 0x30
 8005af2:	d86b      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d060      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15a>
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d867      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d05c      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15a>
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d05a      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15a>
 8005b04:	e062      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b16:	f000 f993 	bl	8005e40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	609a      	str	r2, [r3, #8]
      break;
 8005b32:	e04f      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b44:	f000 f97c 	bl	8005e40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b56:	609a      	str	r2, [r3, #8]
      break;
 8005b58:	e03c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b66:	461a      	mov	r2, r3
 8005b68:	f000 f8f0 	bl	8005d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2150      	movs	r1, #80	@ 0x50
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 f949 	bl	8005e0a <TIM_ITRx_SetConfig>
      break;
 8005b78:	e02c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b86:	461a      	mov	r2, r3
 8005b88:	f000 f90f 	bl	8005daa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2160      	movs	r1, #96	@ 0x60
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f939 	bl	8005e0a <TIM_ITRx_SetConfig>
      break;
 8005b98:	e01c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f000 f8d0 	bl	8005d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2140      	movs	r1, #64	@ 0x40
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f929 	bl	8005e0a <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e00c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f000 f920 	bl	8005e0a <TIM_ITRx_SetConfig>
      break;
 8005bca:	e003      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd0:	e000      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a37      	ldr	r2, [pc, #220]	@ (8005d30 <TIM_Base_SetConfig+0xf0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00f      	beq.n	8005c78 <TIM_Base_SetConfig+0x38>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5e:	d00b      	beq.n	8005c78 <TIM_Base_SetConfig+0x38>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a34      	ldr	r2, [pc, #208]	@ (8005d34 <TIM_Base_SetConfig+0xf4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d007      	beq.n	8005c78 <TIM_Base_SetConfig+0x38>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a33      	ldr	r2, [pc, #204]	@ (8005d38 <TIM_Base_SetConfig+0xf8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_Base_SetConfig+0x38>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a32      	ldr	r2, [pc, #200]	@ (8005d3c <TIM_Base_SetConfig+0xfc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d108      	bne.n	8005c8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a28      	ldr	r2, [pc, #160]	@ (8005d30 <TIM_Base_SetConfig+0xf0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01b      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c98:	d017      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a25      	ldr	r2, [pc, #148]	@ (8005d34 <TIM_Base_SetConfig+0xf4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a24      	ldr	r2, [pc, #144]	@ (8005d38 <TIM_Base_SetConfig+0xf8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00f      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a23      	ldr	r2, [pc, #140]	@ (8005d3c <TIM_Base_SetConfig+0xfc>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00b      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a22      	ldr	r2, [pc, #136]	@ (8005d40 <TIM_Base_SetConfig+0x100>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d007      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a21      	ldr	r2, [pc, #132]	@ (8005d44 <TIM_Base_SetConfig+0x104>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_Base_SetConfig+0x8a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a20      	ldr	r2, [pc, #128]	@ (8005d48 <TIM_Base_SetConfig+0x108>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d108      	bne.n	8005cdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8005d30 <TIM_Base_SetConfig+0xf0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d103      	bne.n	8005d0a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	691a      	ldr	r2, [r3, #16]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f043 0204 	orr.w	r2, r3, #4
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	601a      	str	r2, [r3, #0]
}
 8005d22:	bf00      	nop
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40014000 	.word	0x40014000
 8005d44:	40014400 	.word	0x40014400
 8005d48:	40014800 	.word	0x40014800

08005d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f023 0201 	bic.w	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f023 030a 	bic.w	r3, r3, #10
 8005d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b087      	sub	sp, #28
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f023 0210 	bic.w	r2, r3, #16
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	031b      	lsls	r3, r3, #12
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005de6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	621a      	str	r2, [r3, #32]
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f043 0307 	orr.w	r3, r3, #7
 8005e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	609a      	str	r2, [r3, #8]
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	021a      	lsls	r2, r3, #8
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	609a      	str	r2, [r3, #8]
}
 8005e74:	bf00      	nop
 8005e76:	371c      	adds	r7, #28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e050      	b.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d018      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee4:	d013      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a18      	ldr	r2, [pc, #96]	@ (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00e      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a16      	ldr	r2, [pc, #88]	@ (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d009      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a15      	ldr	r2, [pc, #84]	@ (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d004      	beq.n	8005f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a13      	ldr	r2, [pc, #76]	@ (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d10c      	bne.n	8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40000800 	.word	0x40000800
 8005f54:	40000c00 	.word	0x40000c00
 8005f58:	40014000 	.word	0x40014000

08005f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <memset>:
 8005f84:	4402      	add	r2, r0
 8005f86:	4603      	mov	r3, r0
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d100      	bne.n	8005f8e <memset+0xa>
 8005f8c:	4770      	bx	lr
 8005f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f92:	e7f9      	b.n	8005f88 <memset+0x4>

08005f94 <__libc_init_array>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4d0d      	ldr	r5, [pc, #52]	@ (8005fcc <__libc_init_array+0x38>)
 8005f98:	4c0d      	ldr	r4, [pc, #52]	@ (8005fd0 <__libc_init_array+0x3c>)
 8005f9a:	1b64      	subs	r4, r4, r5
 8005f9c:	10a4      	asrs	r4, r4, #2
 8005f9e:	2600      	movs	r6, #0
 8005fa0:	42a6      	cmp	r6, r4
 8005fa2:	d109      	bne.n	8005fb8 <__libc_init_array+0x24>
 8005fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8005fd4 <__libc_init_array+0x40>)
 8005fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8005fd8 <__libc_init_array+0x44>)
 8005fa8:	f001 f856 	bl	8007058 <_init>
 8005fac:	1b64      	subs	r4, r4, r5
 8005fae:	10a4      	asrs	r4, r4, #2
 8005fb0:	2600      	movs	r6, #0
 8005fb2:	42a6      	cmp	r6, r4
 8005fb4:	d105      	bne.n	8005fc2 <__libc_init_array+0x2e>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fbc:	4798      	blx	r3
 8005fbe:	3601      	adds	r6, #1
 8005fc0:	e7ee      	b.n	8005fa0 <__libc_init_array+0xc>
 8005fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc6:	4798      	blx	r3
 8005fc8:	3601      	adds	r6, #1
 8005fca:	e7f2      	b.n	8005fb2 <__libc_init_array+0x1e>
 8005fcc:	080075b0 	.word	0x080075b0
 8005fd0:	080075b0 	.word	0x080075b0
 8005fd4:	080075b0 	.word	0x080075b0
 8005fd8:	080075b4 	.word	0x080075b4

08005fdc <memcpy>:
 8005fdc:	440a      	add	r2, r1
 8005fde:	4291      	cmp	r1, r2
 8005fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fe4:	d100      	bne.n	8005fe8 <memcpy+0xc>
 8005fe6:	4770      	bx	lr
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ff2:	4291      	cmp	r1, r2
 8005ff4:	d1f9      	bne.n	8005fea <memcpy+0xe>
 8005ff6:	bd10      	pop	{r4, pc}

08005ff8 <sin>:
 8005ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ffa:	ec53 2b10 	vmov	r2, r3, d0
 8005ffe:	4826      	ldr	r0, [pc, #152]	@ (8006098 <sin+0xa0>)
 8006000:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006004:	4281      	cmp	r1, r0
 8006006:	d807      	bhi.n	8006018 <sin+0x20>
 8006008:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006090 <sin+0x98>
 800600c:	2000      	movs	r0, #0
 800600e:	b005      	add	sp, #20
 8006010:	f85d eb04 	ldr.w	lr, [sp], #4
 8006014:	f000 b90c 	b.w	8006230 <__kernel_sin>
 8006018:	4820      	ldr	r0, [pc, #128]	@ (800609c <sin+0xa4>)
 800601a:	4281      	cmp	r1, r0
 800601c:	d908      	bls.n	8006030 <sin+0x38>
 800601e:	4610      	mov	r0, r2
 8006020:	4619      	mov	r1, r3
 8006022:	f7fa f8dd 	bl	80001e0 <__aeabi_dsub>
 8006026:	ec41 0b10 	vmov	d0, r0, r1
 800602a:	b005      	add	sp, #20
 800602c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006030:	4668      	mov	r0, sp
 8006032:	f000 f9b9 	bl	80063a8 <__ieee754_rem_pio2>
 8006036:	f000 0003 	and.w	r0, r0, #3
 800603a:	2801      	cmp	r0, #1
 800603c:	d00c      	beq.n	8006058 <sin+0x60>
 800603e:	2802      	cmp	r0, #2
 8006040:	d011      	beq.n	8006066 <sin+0x6e>
 8006042:	b9e8      	cbnz	r0, 8006080 <sin+0x88>
 8006044:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006048:	ed9d 0b00 	vldr	d0, [sp]
 800604c:	2001      	movs	r0, #1
 800604e:	f000 f8ef 	bl	8006230 <__kernel_sin>
 8006052:	ec51 0b10 	vmov	r0, r1, d0
 8006056:	e7e6      	b.n	8006026 <sin+0x2e>
 8006058:	ed9d 1b02 	vldr	d1, [sp, #8]
 800605c:	ed9d 0b00 	vldr	d0, [sp]
 8006060:	f000 f81e 	bl	80060a0 <__kernel_cos>
 8006064:	e7f5      	b.n	8006052 <sin+0x5a>
 8006066:	ed9d 1b02 	vldr	d1, [sp, #8]
 800606a:	ed9d 0b00 	vldr	d0, [sp]
 800606e:	2001      	movs	r0, #1
 8006070:	f000 f8de 	bl	8006230 <__kernel_sin>
 8006074:	ec53 2b10 	vmov	r2, r3, d0
 8006078:	4610      	mov	r0, r2
 800607a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800607e:	e7d2      	b.n	8006026 <sin+0x2e>
 8006080:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006084:	ed9d 0b00 	vldr	d0, [sp]
 8006088:	f000 f80a 	bl	80060a0 <__kernel_cos>
 800608c:	e7f2      	b.n	8006074 <sin+0x7c>
 800608e:	bf00      	nop
	...
 8006098:	3fe921fb 	.word	0x3fe921fb
 800609c:	7fefffff 	.word	0x7fefffff

080060a0 <__kernel_cos>:
 80060a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a4:	ec57 6b10 	vmov	r6, r7, d0
 80060a8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80060ac:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80060b0:	ed8d 1b00 	vstr	d1, [sp]
 80060b4:	d206      	bcs.n	80060c4 <__kernel_cos+0x24>
 80060b6:	4630      	mov	r0, r6
 80060b8:	4639      	mov	r1, r7
 80060ba:	f7fa fce3 	bl	8000a84 <__aeabi_d2iz>
 80060be:	2800      	cmp	r0, #0
 80060c0:	f000 8088 	beq.w	80061d4 <__kernel_cos+0x134>
 80060c4:	4632      	mov	r2, r6
 80060c6:	463b      	mov	r3, r7
 80060c8:	4630      	mov	r0, r6
 80060ca:	4639      	mov	r1, r7
 80060cc:	f7fa fa40 	bl	8000550 <__aeabi_dmul>
 80060d0:	4b51      	ldr	r3, [pc, #324]	@ (8006218 <__kernel_cos+0x178>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	4604      	mov	r4, r0
 80060d6:	460d      	mov	r5, r1
 80060d8:	f7fa fa3a 	bl	8000550 <__aeabi_dmul>
 80060dc:	a340      	add	r3, pc, #256	@ (adr r3, 80061e0 <__kernel_cos+0x140>)
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	4682      	mov	sl, r0
 80060e4:	468b      	mov	fp, r1
 80060e6:	4620      	mov	r0, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	f7fa fa31 	bl	8000550 <__aeabi_dmul>
 80060ee:	a33e      	add	r3, pc, #248	@ (adr r3, 80061e8 <__kernel_cos+0x148>)
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	f7fa f876 	bl	80001e4 <__adddf3>
 80060f8:	4622      	mov	r2, r4
 80060fa:	462b      	mov	r3, r5
 80060fc:	f7fa fa28 	bl	8000550 <__aeabi_dmul>
 8006100:	a33b      	add	r3, pc, #236	@ (adr r3, 80061f0 <__kernel_cos+0x150>)
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f7fa f86b 	bl	80001e0 <__aeabi_dsub>
 800610a:	4622      	mov	r2, r4
 800610c:	462b      	mov	r3, r5
 800610e:	f7fa fa1f 	bl	8000550 <__aeabi_dmul>
 8006112:	a339      	add	r3, pc, #228	@ (adr r3, 80061f8 <__kernel_cos+0x158>)
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f7fa f864 	bl	80001e4 <__adddf3>
 800611c:	4622      	mov	r2, r4
 800611e:	462b      	mov	r3, r5
 8006120:	f7fa fa16 	bl	8000550 <__aeabi_dmul>
 8006124:	a336      	add	r3, pc, #216	@ (adr r3, 8006200 <__kernel_cos+0x160>)
 8006126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612a:	f7fa f859 	bl	80001e0 <__aeabi_dsub>
 800612e:	4622      	mov	r2, r4
 8006130:	462b      	mov	r3, r5
 8006132:	f7fa fa0d 	bl	8000550 <__aeabi_dmul>
 8006136:	a334      	add	r3, pc, #208	@ (adr r3, 8006208 <__kernel_cos+0x168>)
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f7fa f852 	bl	80001e4 <__adddf3>
 8006140:	4622      	mov	r2, r4
 8006142:	462b      	mov	r3, r5
 8006144:	f7fa fa04 	bl	8000550 <__aeabi_dmul>
 8006148:	4622      	mov	r2, r4
 800614a:	462b      	mov	r3, r5
 800614c:	f7fa fa00 	bl	8000550 <__aeabi_dmul>
 8006150:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006154:	4604      	mov	r4, r0
 8006156:	460d      	mov	r5, r1
 8006158:	4630      	mov	r0, r6
 800615a:	4639      	mov	r1, r7
 800615c:	f7fa f9f8 	bl	8000550 <__aeabi_dmul>
 8006160:	460b      	mov	r3, r1
 8006162:	4602      	mov	r2, r0
 8006164:	4629      	mov	r1, r5
 8006166:	4620      	mov	r0, r4
 8006168:	f7fa f83a 	bl	80001e0 <__aeabi_dsub>
 800616c:	4b2b      	ldr	r3, [pc, #172]	@ (800621c <__kernel_cos+0x17c>)
 800616e:	4598      	cmp	r8, r3
 8006170:	4606      	mov	r6, r0
 8006172:	460f      	mov	r7, r1
 8006174:	d810      	bhi.n	8006198 <__kernel_cos+0xf8>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4650      	mov	r0, sl
 800617c:	4659      	mov	r1, fp
 800617e:	f7fa f82f 	bl	80001e0 <__aeabi_dsub>
 8006182:	460b      	mov	r3, r1
 8006184:	4926      	ldr	r1, [pc, #152]	@ (8006220 <__kernel_cos+0x180>)
 8006186:	4602      	mov	r2, r0
 8006188:	2000      	movs	r0, #0
 800618a:	f7fa f829 	bl	80001e0 <__aeabi_dsub>
 800618e:	ec41 0b10 	vmov	d0, r0, r1
 8006192:	b003      	add	sp, #12
 8006194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006198:	4b22      	ldr	r3, [pc, #136]	@ (8006224 <__kernel_cos+0x184>)
 800619a:	4921      	ldr	r1, [pc, #132]	@ (8006220 <__kernel_cos+0x180>)
 800619c:	4598      	cmp	r8, r3
 800619e:	bf8c      	ite	hi
 80061a0:	4d21      	ldrhi	r5, [pc, #132]	@ (8006228 <__kernel_cos+0x188>)
 80061a2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80061a6:	2400      	movs	r4, #0
 80061a8:	4622      	mov	r2, r4
 80061aa:	462b      	mov	r3, r5
 80061ac:	2000      	movs	r0, #0
 80061ae:	f7fa f817 	bl	80001e0 <__aeabi_dsub>
 80061b2:	4622      	mov	r2, r4
 80061b4:	4680      	mov	r8, r0
 80061b6:	4689      	mov	r9, r1
 80061b8:	462b      	mov	r3, r5
 80061ba:	4650      	mov	r0, sl
 80061bc:	4659      	mov	r1, fp
 80061be:	f7fa f80f 	bl	80001e0 <__aeabi_dsub>
 80061c2:	4632      	mov	r2, r6
 80061c4:	463b      	mov	r3, r7
 80061c6:	f7fa f80b 	bl	80001e0 <__aeabi_dsub>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4640      	mov	r0, r8
 80061d0:	4649      	mov	r1, r9
 80061d2:	e7da      	b.n	800618a <__kernel_cos+0xea>
 80061d4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006210 <__kernel_cos+0x170>
 80061d8:	e7db      	b.n	8006192 <__kernel_cos+0xf2>
 80061da:	bf00      	nop
 80061dc:	f3af 8000 	nop.w
 80061e0:	be8838d4 	.word	0xbe8838d4
 80061e4:	bda8fae9 	.word	0xbda8fae9
 80061e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80061ec:	3e21ee9e 	.word	0x3e21ee9e
 80061f0:	809c52ad 	.word	0x809c52ad
 80061f4:	3e927e4f 	.word	0x3e927e4f
 80061f8:	19cb1590 	.word	0x19cb1590
 80061fc:	3efa01a0 	.word	0x3efa01a0
 8006200:	16c15177 	.word	0x16c15177
 8006204:	3f56c16c 	.word	0x3f56c16c
 8006208:	5555554c 	.word	0x5555554c
 800620c:	3fa55555 	.word	0x3fa55555
 8006210:	00000000 	.word	0x00000000
 8006214:	3ff00000 	.word	0x3ff00000
 8006218:	3fe00000 	.word	0x3fe00000
 800621c:	3fd33332 	.word	0x3fd33332
 8006220:	3ff00000 	.word	0x3ff00000
 8006224:	3fe90000 	.word	0x3fe90000
 8006228:	3fd20000 	.word	0x3fd20000
 800622c:	00000000 	.word	0x00000000

08006230 <__kernel_sin>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	ec55 4b10 	vmov	r4, r5, d0
 8006238:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800623c:	b085      	sub	sp, #20
 800623e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006242:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006246:	4680      	mov	r8, r0
 8006248:	d205      	bcs.n	8006256 <__kernel_sin+0x26>
 800624a:	4620      	mov	r0, r4
 800624c:	4629      	mov	r1, r5
 800624e:	f7fa fc19 	bl	8000a84 <__aeabi_d2iz>
 8006252:	2800      	cmp	r0, #0
 8006254:	d052      	beq.n	80062fc <__kernel_sin+0xcc>
 8006256:	4622      	mov	r2, r4
 8006258:	462b      	mov	r3, r5
 800625a:	4620      	mov	r0, r4
 800625c:	4629      	mov	r1, r5
 800625e:	f7fa f977 	bl	8000550 <__aeabi_dmul>
 8006262:	4682      	mov	sl, r0
 8006264:	468b      	mov	fp, r1
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4620      	mov	r0, r4
 800626c:	4629      	mov	r1, r5
 800626e:	f7fa f96f 	bl	8000550 <__aeabi_dmul>
 8006272:	a342      	add	r3, pc, #264	@ (adr r3, 800637c <__kernel_sin+0x14c>)
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	e9cd 0100 	strd	r0, r1, [sp]
 800627c:	4650      	mov	r0, sl
 800627e:	4659      	mov	r1, fp
 8006280:	f7fa f966 	bl	8000550 <__aeabi_dmul>
 8006284:	a33f      	add	r3, pc, #252	@ (adr r3, 8006384 <__kernel_sin+0x154>)
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	f7f9 ffa9 	bl	80001e0 <__aeabi_dsub>
 800628e:	4652      	mov	r2, sl
 8006290:	465b      	mov	r3, fp
 8006292:	f7fa f95d 	bl	8000550 <__aeabi_dmul>
 8006296:	a33d      	add	r3, pc, #244	@ (adr r3, 800638c <__kernel_sin+0x15c>)
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	f7f9 ffa2 	bl	80001e4 <__adddf3>
 80062a0:	4652      	mov	r2, sl
 80062a2:	465b      	mov	r3, fp
 80062a4:	f7fa f954 	bl	8000550 <__aeabi_dmul>
 80062a8:	a33a      	add	r3, pc, #232	@ (adr r3, 8006394 <__kernel_sin+0x164>)
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f7f9 ff97 	bl	80001e0 <__aeabi_dsub>
 80062b2:	4652      	mov	r2, sl
 80062b4:	465b      	mov	r3, fp
 80062b6:	f7fa f94b 	bl	8000550 <__aeabi_dmul>
 80062ba:	a338      	add	r3, pc, #224	@ (adr r3, 800639c <__kernel_sin+0x16c>)
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	f7f9 ff90 	bl	80001e4 <__adddf3>
 80062c4:	4606      	mov	r6, r0
 80062c6:	460f      	mov	r7, r1
 80062c8:	f1b8 0f00 	cmp.w	r8, #0
 80062cc:	d11b      	bne.n	8006306 <__kernel_sin+0xd6>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4650      	mov	r0, sl
 80062d4:	4659      	mov	r1, fp
 80062d6:	f7fa f93b 	bl	8000550 <__aeabi_dmul>
 80062da:	a325      	add	r3, pc, #148	@ (adr r3, 8006370 <__kernel_sin+0x140>)
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f7f9 ff7e 	bl	80001e0 <__aeabi_dsub>
 80062e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062e8:	f7fa f932 	bl	8000550 <__aeabi_dmul>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4620      	mov	r0, r4
 80062f2:	4629      	mov	r1, r5
 80062f4:	f7f9 ff76 	bl	80001e4 <__adddf3>
 80062f8:	4604      	mov	r4, r0
 80062fa:	460d      	mov	r5, r1
 80062fc:	ec45 4b10 	vmov	d0, r4, r5
 8006300:	b005      	add	sp, #20
 8006302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800630a:	4b1b      	ldr	r3, [pc, #108]	@ (8006378 <__kernel_sin+0x148>)
 800630c:	2200      	movs	r2, #0
 800630e:	f7fa f91f 	bl	8000550 <__aeabi_dmul>
 8006312:	4632      	mov	r2, r6
 8006314:	4680      	mov	r8, r0
 8006316:	4689      	mov	r9, r1
 8006318:	463b      	mov	r3, r7
 800631a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800631e:	f7fa f917 	bl	8000550 <__aeabi_dmul>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4640      	mov	r0, r8
 8006328:	4649      	mov	r1, r9
 800632a:	f7f9 ff59 	bl	80001e0 <__aeabi_dsub>
 800632e:	4652      	mov	r2, sl
 8006330:	465b      	mov	r3, fp
 8006332:	f7fa f90d 	bl	8000550 <__aeabi_dmul>
 8006336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800633a:	f7f9 ff51 	bl	80001e0 <__aeabi_dsub>
 800633e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006370 <__kernel_sin+0x140>)
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	4606      	mov	r6, r0
 8006346:	460f      	mov	r7, r1
 8006348:	e9dd 0100 	ldrd	r0, r1, [sp]
 800634c:	f7fa f900 	bl	8000550 <__aeabi_dmul>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4630      	mov	r0, r6
 8006356:	4639      	mov	r1, r7
 8006358:	f7f9 ff44 	bl	80001e4 <__adddf3>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4620      	mov	r0, r4
 8006362:	4629      	mov	r1, r5
 8006364:	f7f9 ff3c 	bl	80001e0 <__aeabi_dsub>
 8006368:	e7c6      	b.n	80062f8 <__kernel_sin+0xc8>
 800636a:	bf00      	nop
 800636c:	f3af 8000 	nop.w
 8006370:	55555549 	.word	0x55555549
 8006374:	3fc55555 	.word	0x3fc55555
 8006378:	3fe00000 	.word	0x3fe00000
 800637c:	5acfd57c 	.word	0x5acfd57c
 8006380:	3de5d93a 	.word	0x3de5d93a
 8006384:	8a2b9ceb 	.word	0x8a2b9ceb
 8006388:	3e5ae5e6 	.word	0x3e5ae5e6
 800638c:	57b1fe7d 	.word	0x57b1fe7d
 8006390:	3ec71de3 	.word	0x3ec71de3
 8006394:	19c161d5 	.word	0x19c161d5
 8006398:	3f2a01a0 	.word	0x3f2a01a0
 800639c:	1110f8a6 	.word	0x1110f8a6
 80063a0:	3f811111 	.word	0x3f811111
 80063a4:	00000000 	.word	0x00000000

080063a8 <__ieee754_rem_pio2>:
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	ec57 6b10 	vmov	r6, r7, d0
 80063b0:	4bc5      	ldr	r3, [pc, #788]	@ (80066c8 <__ieee754_rem_pio2+0x320>)
 80063b2:	b08d      	sub	sp, #52	@ 0x34
 80063b4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80063b8:	4598      	cmp	r8, r3
 80063ba:	4604      	mov	r4, r0
 80063bc:	9704      	str	r7, [sp, #16]
 80063be:	d807      	bhi.n	80063d0 <__ieee754_rem_pio2+0x28>
 80063c0:	2200      	movs	r2, #0
 80063c2:	2300      	movs	r3, #0
 80063c4:	ed80 0b00 	vstr	d0, [r0]
 80063c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80063cc:	2500      	movs	r5, #0
 80063ce:	e028      	b.n	8006422 <__ieee754_rem_pio2+0x7a>
 80063d0:	4bbe      	ldr	r3, [pc, #760]	@ (80066cc <__ieee754_rem_pio2+0x324>)
 80063d2:	4598      	cmp	r8, r3
 80063d4:	d878      	bhi.n	80064c8 <__ieee754_rem_pio2+0x120>
 80063d6:	9b04      	ldr	r3, [sp, #16]
 80063d8:	4dbd      	ldr	r5, [pc, #756]	@ (80066d0 <__ieee754_rem_pio2+0x328>)
 80063da:	2b00      	cmp	r3, #0
 80063dc:	4630      	mov	r0, r6
 80063de:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006690 <__ieee754_rem_pio2+0x2e8>)
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	4639      	mov	r1, r7
 80063e6:	dd38      	ble.n	800645a <__ieee754_rem_pio2+0xb2>
 80063e8:	f7f9 fefa 	bl	80001e0 <__aeabi_dsub>
 80063ec:	45a8      	cmp	r8, r5
 80063ee:	4606      	mov	r6, r0
 80063f0:	460f      	mov	r7, r1
 80063f2:	d01a      	beq.n	800642a <__ieee754_rem_pio2+0x82>
 80063f4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006698 <__ieee754_rem_pio2+0x2f0>)
 80063f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fa:	f7f9 fef1 	bl	80001e0 <__aeabi_dsub>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4680      	mov	r8, r0
 8006404:	4689      	mov	r9, r1
 8006406:	4630      	mov	r0, r6
 8006408:	4639      	mov	r1, r7
 800640a:	f7f9 fee9 	bl	80001e0 <__aeabi_dsub>
 800640e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006698 <__ieee754_rem_pio2+0x2f0>)
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f7f9 fee4 	bl	80001e0 <__aeabi_dsub>
 8006418:	e9c4 8900 	strd	r8, r9, [r4]
 800641c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006420:	2501      	movs	r5, #1
 8006422:	4628      	mov	r0, r5
 8006424:	b00d      	add	sp, #52	@ 0x34
 8006426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642a:	a39d      	add	r3, pc, #628	@ (adr r3, 80066a0 <__ieee754_rem_pio2+0x2f8>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f7f9 fed6 	bl	80001e0 <__aeabi_dsub>
 8006434:	a39c      	add	r3, pc, #624	@ (adr r3, 80066a8 <__ieee754_rem_pio2+0x300>)
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	4606      	mov	r6, r0
 800643c:	460f      	mov	r7, r1
 800643e:	f7f9 fecf 	bl	80001e0 <__aeabi_dsub>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4680      	mov	r8, r0
 8006448:	4689      	mov	r9, r1
 800644a:	4630      	mov	r0, r6
 800644c:	4639      	mov	r1, r7
 800644e:	f7f9 fec7 	bl	80001e0 <__aeabi_dsub>
 8006452:	a395      	add	r3, pc, #596	@ (adr r3, 80066a8 <__ieee754_rem_pio2+0x300>)
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	e7dc      	b.n	8006414 <__ieee754_rem_pio2+0x6c>
 800645a:	f7f9 fec3 	bl	80001e4 <__adddf3>
 800645e:	45a8      	cmp	r8, r5
 8006460:	4606      	mov	r6, r0
 8006462:	460f      	mov	r7, r1
 8006464:	d018      	beq.n	8006498 <__ieee754_rem_pio2+0xf0>
 8006466:	a38c      	add	r3, pc, #560	@ (adr r3, 8006698 <__ieee754_rem_pio2+0x2f0>)
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	f7f9 feba 	bl	80001e4 <__adddf3>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4680      	mov	r8, r0
 8006476:	4689      	mov	r9, r1
 8006478:	4630      	mov	r0, r6
 800647a:	4639      	mov	r1, r7
 800647c:	f7f9 feb0 	bl	80001e0 <__aeabi_dsub>
 8006480:	a385      	add	r3, pc, #532	@ (adr r3, 8006698 <__ieee754_rem_pio2+0x2f0>)
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f7f9 fead 	bl	80001e4 <__adddf3>
 800648a:	f04f 35ff 	mov.w	r5, #4294967295
 800648e:	e9c4 8900 	strd	r8, r9, [r4]
 8006492:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006496:	e7c4      	b.n	8006422 <__ieee754_rem_pio2+0x7a>
 8006498:	a381      	add	r3, pc, #516	@ (adr r3, 80066a0 <__ieee754_rem_pio2+0x2f8>)
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	f7f9 fea1 	bl	80001e4 <__adddf3>
 80064a2:	a381      	add	r3, pc, #516	@ (adr r3, 80066a8 <__ieee754_rem_pio2+0x300>)
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	4606      	mov	r6, r0
 80064aa:	460f      	mov	r7, r1
 80064ac:	f7f9 fe9a 	bl	80001e4 <__adddf3>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4680      	mov	r8, r0
 80064b6:	4689      	mov	r9, r1
 80064b8:	4630      	mov	r0, r6
 80064ba:	4639      	mov	r1, r7
 80064bc:	f7f9 fe90 	bl	80001e0 <__aeabi_dsub>
 80064c0:	a379      	add	r3, pc, #484	@ (adr r3, 80066a8 <__ieee754_rem_pio2+0x300>)
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	e7de      	b.n	8006486 <__ieee754_rem_pio2+0xde>
 80064c8:	4b82      	ldr	r3, [pc, #520]	@ (80066d4 <__ieee754_rem_pio2+0x32c>)
 80064ca:	4598      	cmp	r8, r3
 80064cc:	f200 80d1 	bhi.w	8006672 <__ieee754_rem_pio2+0x2ca>
 80064d0:	f000 f966 	bl	80067a0 <fabs>
 80064d4:	ec57 6b10 	vmov	r6, r7, d0
 80064d8:	a375      	add	r3, pc, #468	@ (adr r3, 80066b0 <__ieee754_rem_pio2+0x308>)
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	4630      	mov	r0, r6
 80064e0:	4639      	mov	r1, r7
 80064e2:	f7fa f835 	bl	8000550 <__aeabi_dmul>
 80064e6:	4b7c      	ldr	r3, [pc, #496]	@ (80066d8 <__ieee754_rem_pio2+0x330>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	f7f9 fe7b 	bl	80001e4 <__adddf3>
 80064ee:	f7fa fac9 	bl	8000a84 <__aeabi_d2iz>
 80064f2:	4605      	mov	r5, r0
 80064f4:	f7f9 ffc2 	bl	800047c <__aeabi_i2d>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006500:	a363      	add	r3, pc, #396	@ (adr r3, 8006690 <__ieee754_rem_pio2+0x2e8>)
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	f7fa f823 	bl	8000550 <__aeabi_dmul>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4630      	mov	r0, r6
 8006510:	4639      	mov	r1, r7
 8006512:	f7f9 fe65 	bl	80001e0 <__aeabi_dsub>
 8006516:	a360      	add	r3, pc, #384	@ (adr r3, 8006698 <__ieee754_rem_pio2+0x2f0>)
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	4682      	mov	sl, r0
 800651e:	468b      	mov	fp, r1
 8006520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006524:	f7fa f814 	bl	8000550 <__aeabi_dmul>
 8006528:	2d1f      	cmp	r5, #31
 800652a:	4606      	mov	r6, r0
 800652c:	460f      	mov	r7, r1
 800652e:	dc0c      	bgt.n	800654a <__ieee754_rem_pio2+0x1a2>
 8006530:	4b6a      	ldr	r3, [pc, #424]	@ (80066dc <__ieee754_rem_pio2+0x334>)
 8006532:	1e6a      	subs	r2, r5, #1
 8006534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006538:	4543      	cmp	r3, r8
 800653a:	d006      	beq.n	800654a <__ieee754_rem_pio2+0x1a2>
 800653c:	4632      	mov	r2, r6
 800653e:	463b      	mov	r3, r7
 8006540:	4650      	mov	r0, sl
 8006542:	4659      	mov	r1, fp
 8006544:	f7f9 fe4c 	bl	80001e0 <__aeabi_dsub>
 8006548:	e00e      	b.n	8006568 <__ieee754_rem_pio2+0x1c0>
 800654a:	463b      	mov	r3, r7
 800654c:	4632      	mov	r2, r6
 800654e:	4650      	mov	r0, sl
 8006550:	4659      	mov	r1, fp
 8006552:	f7f9 fe45 	bl	80001e0 <__aeabi_dsub>
 8006556:	ea4f 5328 	mov.w	r3, r8, asr #20
 800655a:	9305      	str	r3, [sp, #20]
 800655c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006560:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006564:	2b10      	cmp	r3, #16
 8006566:	dc02      	bgt.n	800656e <__ieee754_rem_pio2+0x1c6>
 8006568:	e9c4 0100 	strd	r0, r1, [r4]
 800656c:	e039      	b.n	80065e2 <__ieee754_rem_pio2+0x23a>
 800656e:	a34c      	add	r3, pc, #304	@ (adr r3, 80066a0 <__ieee754_rem_pio2+0x2f8>)
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006578:	f7f9 ffea 	bl	8000550 <__aeabi_dmul>
 800657c:	4606      	mov	r6, r0
 800657e:	460f      	mov	r7, r1
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4650      	mov	r0, sl
 8006586:	4659      	mov	r1, fp
 8006588:	f7f9 fe2a 	bl	80001e0 <__aeabi_dsub>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4680      	mov	r8, r0
 8006592:	4689      	mov	r9, r1
 8006594:	4650      	mov	r0, sl
 8006596:	4659      	mov	r1, fp
 8006598:	f7f9 fe22 	bl	80001e0 <__aeabi_dsub>
 800659c:	4632      	mov	r2, r6
 800659e:	463b      	mov	r3, r7
 80065a0:	f7f9 fe1e 	bl	80001e0 <__aeabi_dsub>
 80065a4:	a340      	add	r3, pc, #256	@ (adr r3, 80066a8 <__ieee754_rem_pio2+0x300>)
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	4606      	mov	r6, r0
 80065ac:	460f      	mov	r7, r1
 80065ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065b2:	f7f9 ffcd 	bl	8000550 <__aeabi_dmul>
 80065b6:	4632      	mov	r2, r6
 80065b8:	463b      	mov	r3, r7
 80065ba:	f7f9 fe11 	bl	80001e0 <__aeabi_dsub>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4606      	mov	r6, r0
 80065c4:	460f      	mov	r7, r1
 80065c6:	4640      	mov	r0, r8
 80065c8:	4649      	mov	r1, r9
 80065ca:	f7f9 fe09 	bl	80001e0 <__aeabi_dsub>
 80065ce:	9a05      	ldr	r2, [sp, #20]
 80065d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b31      	cmp	r3, #49	@ 0x31
 80065d8:	dc20      	bgt.n	800661c <__ieee754_rem_pio2+0x274>
 80065da:	e9c4 0100 	strd	r0, r1, [r4]
 80065de:	46c2      	mov	sl, r8
 80065e0:	46cb      	mov	fp, r9
 80065e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80065e6:	4650      	mov	r0, sl
 80065e8:	4642      	mov	r2, r8
 80065ea:	464b      	mov	r3, r9
 80065ec:	4659      	mov	r1, fp
 80065ee:	f7f9 fdf7 	bl	80001e0 <__aeabi_dsub>
 80065f2:	463b      	mov	r3, r7
 80065f4:	4632      	mov	r2, r6
 80065f6:	f7f9 fdf3 	bl	80001e0 <__aeabi_dsub>
 80065fa:	9b04      	ldr	r3, [sp, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006602:	f6bf af0e 	bge.w	8006422 <__ieee754_rem_pio2+0x7a>
 8006606:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800660a:	6063      	str	r3, [r4, #4]
 800660c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006610:	f8c4 8000 	str.w	r8, [r4]
 8006614:	60a0      	str	r0, [r4, #8]
 8006616:	60e3      	str	r3, [r4, #12]
 8006618:	426d      	negs	r5, r5
 800661a:	e702      	b.n	8006422 <__ieee754_rem_pio2+0x7a>
 800661c:	a326      	add	r3, pc, #152	@ (adr r3, 80066b8 <__ieee754_rem_pio2+0x310>)
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006626:	f7f9 ff93 	bl	8000550 <__aeabi_dmul>
 800662a:	4606      	mov	r6, r0
 800662c:	460f      	mov	r7, r1
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4640      	mov	r0, r8
 8006634:	4649      	mov	r1, r9
 8006636:	f7f9 fdd3 	bl	80001e0 <__aeabi_dsub>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4682      	mov	sl, r0
 8006640:	468b      	mov	fp, r1
 8006642:	4640      	mov	r0, r8
 8006644:	4649      	mov	r1, r9
 8006646:	f7f9 fdcb 	bl	80001e0 <__aeabi_dsub>
 800664a:	4632      	mov	r2, r6
 800664c:	463b      	mov	r3, r7
 800664e:	f7f9 fdc7 	bl	80001e0 <__aeabi_dsub>
 8006652:	a31b      	add	r3, pc, #108	@ (adr r3, 80066c0 <__ieee754_rem_pio2+0x318>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	4606      	mov	r6, r0
 800665a:	460f      	mov	r7, r1
 800665c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006660:	f7f9 ff76 	bl	8000550 <__aeabi_dmul>
 8006664:	4632      	mov	r2, r6
 8006666:	463b      	mov	r3, r7
 8006668:	f7f9 fdba 	bl	80001e0 <__aeabi_dsub>
 800666c:	4606      	mov	r6, r0
 800666e:	460f      	mov	r7, r1
 8006670:	e764      	b.n	800653c <__ieee754_rem_pio2+0x194>
 8006672:	4b1b      	ldr	r3, [pc, #108]	@ (80066e0 <__ieee754_rem_pio2+0x338>)
 8006674:	4598      	cmp	r8, r3
 8006676:	d935      	bls.n	80066e4 <__ieee754_rem_pio2+0x33c>
 8006678:	4632      	mov	r2, r6
 800667a:	463b      	mov	r3, r7
 800667c:	4630      	mov	r0, r6
 800667e:	4639      	mov	r1, r7
 8006680:	f7f9 fdae 	bl	80001e0 <__aeabi_dsub>
 8006684:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006688:	e9c4 0100 	strd	r0, r1, [r4]
 800668c:	e69e      	b.n	80063cc <__ieee754_rem_pio2+0x24>
 800668e:	bf00      	nop
 8006690:	54400000 	.word	0x54400000
 8006694:	3ff921fb 	.word	0x3ff921fb
 8006698:	1a626331 	.word	0x1a626331
 800669c:	3dd0b461 	.word	0x3dd0b461
 80066a0:	1a600000 	.word	0x1a600000
 80066a4:	3dd0b461 	.word	0x3dd0b461
 80066a8:	2e037073 	.word	0x2e037073
 80066ac:	3ba3198a 	.word	0x3ba3198a
 80066b0:	6dc9c883 	.word	0x6dc9c883
 80066b4:	3fe45f30 	.word	0x3fe45f30
 80066b8:	2e000000 	.word	0x2e000000
 80066bc:	3ba3198a 	.word	0x3ba3198a
 80066c0:	252049c1 	.word	0x252049c1
 80066c4:	397b839a 	.word	0x397b839a
 80066c8:	3fe921fb 	.word	0x3fe921fb
 80066cc:	4002d97b 	.word	0x4002d97b
 80066d0:	3ff921fb 	.word	0x3ff921fb
 80066d4:	413921fb 	.word	0x413921fb
 80066d8:	3fe00000 	.word	0x3fe00000
 80066dc:	080073d0 	.word	0x080073d0
 80066e0:	7fefffff 	.word	0x7fefffff
 80066e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80066e8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80066ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80066f0:	4630      	mov	r0, r6
 80066f2:	460f      	mov	r7, r1
 80066f4:	f7fa f9c6 	bl	8000a84 <__aeabi_d2iz>
 80066f8:	f7f9 fec0 	bl	800047c <__aeabi_i2d>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4630      	mov	r0, r6
 8006702:	4639      	mov	r1, r7
 8006704:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006708:	f7f9 fd6a 	bl	80001e0 <__aeabi_dsub>
 800670c:	4b22      	ldr	r3, [pc, #136]	@ (8006798 <__ieee754_rem_pio2+0x3f0>)
 800670e:	2200      	movs	r2, #0
 8006710:	f7f9 ff1e 	bl	8000550 <__aeabi_dmul>
 8006714:	460f      	mov	r7, r1
 8006716:	4606      	mov	r6, r0
 8006718:	f7fa f9b4 	bl	8000a84 <__aeabi_d2iz>
 800671c:	f7f9 feae 	bl	800047c <__aeabi_i2d>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4630      	mov	r0, r6
 8006726:	4639      	mov	r1, r7
 8006728:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800672c:	f7f9 fd58 	bl	80001e0 <__aeabi_dsub>
 8006730:	4b19      	ldr	r3, [pc, #100]	@ (8006798 <__ieee754_rem_pio2+0x3f0>)
 8006732:	2200      	movs	r2, #0
 8006734:	f7f9 ff0c 	bl	8000550 <__aeabi_dmul>
 8006738:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800673c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006740:	f04f 0803 	mov.w	r8, #3
 8006744:	2600      	movs	r6, #0
 8006746:	2700      	movs	r7, #0
 8006748:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800674c:	4632      	mov	r2, r6
 800674e:	463b      	mov	r3, r7
 8006750:	46c2      	mov	sl, r8
 8006752:	f108 38ff 	add.w	r8, r8, #4294967295
 8006756:	f7fa f963 	bl	8000a20 <__aeabi_dcmpeq>
 800675a:	2800      	cmp	r0, #0
 800675c:	d1f4      	bne.n	8006748 <__ieee754_rem_pio2+0x3a0>
 800675e:	4b0f      	ldr	r3, [pc, #60]	@ (800679c <__ieee754_rem_pio2+0x3f4>)
 8006760:	9301      	str	r3, [sp, #4]
 8006762:	2302      	movs	r3, #2
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	462a      	mov	r2, r5
 8006768:	4653      	mov	r3, sl
 800676a:	4621      	mov	r1, r4
 800676c:	a806      	add	r0, sp, #24
 800676e:	f000 f81f 	bl	80067b0 <__kernel_rem_pio2>
 8006772:	9b04      	ldr	r3, [sp, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	4605      	mov	r5, r0
 8006778:	f6bf ae53 	bge.w	8006422 <__ieee754_rem_pio2+0x7a>
 800677c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006780:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006784:	e9c4 2300 	strd	r2, r3, [r4]
 8006788:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800678c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006790:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006794:	e740      	b.n	8006618 <__ieee754_rem_pio2+0x270>
 8006796:	bf00      	nop
 8006798:	41700000 	.word	0x41700000
 800679c:	08007450 	.word	0x08007450

080067a0 <fabs>:
 80067a0:	ec51 0b10 	vmov	r0, r1, d0
 80067a4:	4602      	mov	r2, r0
 80067a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80067aa:	ec43 2b10 	vmov	d0, r2, r3
 80067ae:	4770      	bx	lr

080067b0 <__kernel_rem_pio2>:
 80067b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	ed2d 8b02 	vpush	{d8}
 80067b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80067bc:	f112 0f14 	cmn.w	r2, #20
 80067c0:	9306      	str	r3, [sp, #24]
 80067c2:	9104      	str	r1, [sp, #16]
 80067c4:	4bbe      	ldr	r3, [pc, #760]	@ (8006ac0 <__kernel_rem_pio2+0x310>)
 80067c6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80067c8:	9008      	str	r0, [sp, #32]
 80067ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	9b06      	ldr	r3, [sp, #24]
 80067d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80067d6:	bfa8      	it	ge
 80067d8:	1ed4      	subge	r4, r2, #3
 80067da:	9305      	str	r3, [sp, #20]
 80067dc:	bfb2      	itee	lt
 80067de:	2400      	movlt	r4, #0
 80067e0:	2318      	movge	r3, #24
 80067e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80067e6:	f06f 0317 	mvn.w	r3, #23
 80067ea:	fb04 3303 	mla	r3, r4, r3, r3
 80067ee:	eb03 0b02 	add.w	fp, r3, r2
 80067f2:	9b00      	ldr	r3, [sp, #0]
 80067f4:	9a05      	ldr	r2, [sp, #20]
 80067f6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006ab0 <__kernel_rem_pio2+0x300>
 80067fa:	eb03 0802 	add.w	r8, r3, r2
 80067fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006800:	1aa7      	subs	r7, r4, r2
 8006802:	ae20      	add	r6, sp, #128	@ 0x80
 8006804:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006808:	2500      	movs	r5, #0
 800680a:	4545      	cmp	r5, r8
 800680c:	dd13      	ble.n	8006836 <__kernel_rem_pio2+0x86>
 800680e:	9b06      	ldr	r3, [sp, #24]
 8006810:	aa20      	add	r2, sp, #128	@ 0x80
 8006812:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006816:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800681a:	f04f 0800 	mov.w	r8, #0
 800681e:	9b00      	ldr	r3, [sp, #0]
 8006820:	4598      	cmp	r8, r3
 8006822:	dc31      	bgt.n	8006888 <__kernel_rem_pio2+0xd8>
 8006824:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006ab0 <__kernel_rem_pio2+0x300>
 8006828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800682c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006830:	462f      	mov	r7, r5
 8006832:	2600      	movs	r6, #0
 8006834:	e01b      	b.n	800686e <__kernel_rem_pio2+0xbe>
 8006836:	42ef      	cmn	r7, r5
 8006838:	d407      	bmi.n	800684a <__kernel_rem_pio2+0x9a>
 800683a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800683e:	f7f9 fe1d 	bl	800047c <__aeabi_i2d>
 8006842:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006846:	3501      	adds	r5, #1
 8006848:	e7df      	b.n	800680a <__kernel_rem_pio2+0x5a>
 800684a:	ec51 0b18 	vmov	r0, r1, d8
 800684e:	e7f8      	b.n	8006842 <__kernel_rem_pio2+0x92>
 8006850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006854:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006858:	f7f9 fe7a 	bl	8000550 <__aeabi_dmul>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006864:	f7f9 fcbe 	bl	80001e4 <__adddf3>
 8006868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800686c:	3601      	adds	r6, #1
 800686e:	9b05      	ldr	r3, [sp, #20]
 8006870:	429e      	cmp	r6, r3
 8006872:	f1a7 0708 	sub.w	r7, r7, #8
 8006876:	ddeb      	ble.n	8006850 <__kernel_rem_pio2+0xa0>
 8006878:	ed9d 7b02 	vldr	d7, [sp, #8]
 800687c:	f108 0801 	add.w	r8, r8, #1
 8006880:	ecaa 7b02 	vstmia	sl!, {d7}
 8006884:	3508      	adds	r5, #8
 8006886:	e7ca      	b.n	800681e <__kernel_rem_pio2+0x6e>
 8006888:	9b00      	ldr	r3, [sp, #0]
 800688a:	f8dd 8000 	ldr.w	r8, [sp]
 800688e:	aa0c      	add	r2, sp, #48	@ 0x30
 8006890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006894:	930a      	str	r3, [sp, #40]	@ 0x28
 8006896:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006898:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800689c:	9309      	str	r3, [sp, #36]	@ 0x24
 800689e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80068a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068a4:	ab98      	add	r3, sp, #608	@ 0x260
 80068a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80068aa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80068ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80068b2:	ac0c      	add	r4, sp, #48	@ 0x30
 80068b4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80068b6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80068ba:	46a1      	mov	r9, r4
 80068bc:	46c2      	mov	sl, r8
 80068be:	f1ba 0f00 	cmp.w	sl, #0
 80068c2:	f1a5 0508 	sub.w	r5, r5, #8
 80068c6:	dc77      	bgt.n	80069b8 <__kernel_rem_pio2+0x208>
 80068c8:	4658      	mov	r0, fp
 80068ca:	ed9d 0b02 	vldr	d0, [sp, #8]
 80068ce:	f000 fac7 	bl	8006e60 <scalbn>
 80068d2:	ec57 6b10 	vmov	r6, r7, d0
 80068d6:	2200      	movs	r2, #0
 80068d8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80068dc:	4630      	mov	r0, r6
 80068de:	4639      	mov	r1, r7
 80068e0:	f7f9 fe36 	bl	8000550 <__aeabi_dmul>
 80068e4:	ec41 0b10 	vmov	d0, r0, r1
 80068e8:	f000 fb3a 	bl	8006f60 <floor>
 80068ec:	4b75      	ldr	r3, [pc, #468]	@ (8006ac4 <__kernel_rem_pio2+0x314>)
 80068ee:	ec51 0b10 	vmov	r0, r1, d0
 80068f2:	2200      	movs	r2, #0
 80068f4:	f7f9 fe2c 	bl	8000550 <__aeabi_dmul>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f7f9 fc6e 	bl	80001e0 <__aeabi_dsub>
 8006904:	460f      	mov	r7, r1
 8006906:	4606      	mov	r6, r0
 8006908:	f7fa f8bc 	bl	8000a84 <__aeabi_d2iz>
 800690c:	9002      	str	r0, [sp, #8]
 800690e:	f7f9 fdb5 	bl	800047c <__aeabi_i2d>
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	4630      	mov	r0, r6
 8006918:	4639      	mov	r1, r7
 800691a:	f7f9 fc61 	bl	80001e0 <__aeabi_dsub>
 800691e:	f1bb 0f00 	cmp.w	fp, #0
 8006922:	4606      	mov	r6, r0
 8006924:	460f      	mov	r7, r1
 8006926:	dd6c      	ble.n	8006a02 <__kernel_rem_pio2+0x252>
 8006928:	f108 31ff 	add.w	r1, r8, #4294967295
 800692c:	ab0c      	add	r3, sp, #48	@ 0x30
 800692e:	9d02      	ldr	r5, [sp, #8]
 8006930:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006934:	f1cb 0018 	rsb	r0, fp, #24
 8006938:	fa43 f200 	asr.w	r2, r3, r0
 800693c:	4415      	add	r5, r2
 800693e:	4082      	lsls	r2, r0
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	aa0c      	add	r2, sp, #48	@ 0x30
 8006944:	9502      	str	r5, [sp, #8]
 8006946:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800694a:	f1cb 0217 	rsb	r2, fp, #23
 800694e:	fa43 f902 	asr.w	r9, r3, r2
 8006952:	f1b9 0f00 	cmp.w	r9, #0
 8006956:	dd64      	ble.n	8006a22 <__kernel_rem_pio2+0x272>
 8006958:	9b02      	ldr	r3, [sp, #8]
 800695a:	2200      	movs	r2, #0
 800695c:	3301      	adds	r3, #1
 800695e:	9302      	str	r3, [sp, #8]
 8006960:	4615      	mov	r5, r2
 8006962:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006966:	4590      	cmp	r8, r2
 8006968:	f300 80b8 	bgt.w	8006adc <__kernel_rem_pio2+0x32c>
 800696c:	f1bb 0f00 	cmp.w	fp, #0
 8006970:	dd07      	ble.n	8006982 <__kernel_rem_pio2+0x1d2>
 8006972:	f1bb 0f01 	cmp.w	fp, #1
 8006976:	f000 80bf 	beq.w	8006af8 <__kernel_rem_pio2+0x348>
 800697a:	f1bb 0f02 	cmp.w	fp, #2
 800697e:	f000 80c6 	beq.w	8006b0e <__kernel_rem_pio2+0x35e>
 8006982:	f1b9 0f02 	cmp.w	r9, #2
 8006986:	d14c      	bne.n	8006a22 <__kernel_rem_pio2+0x272>
 8006988:	4632      	mov	r2, r6
 800698a:	463b      	mov	r3, r7
 800698c:	494e      	ldr	r1, [pc, #312]	@ (8006ac8 <__kernel_rem_pio2+0x318>)
 800698e:	2000      	movs	r0, #0
 8006990:	f7f9 fc26 	bl	80001e0 <__aeabi_dsub>
 8006994:	4606      	mov	r6, r0
 8006996:	460f      	mov	r7, r1
 8006998:	2d00      	cmp	r5, #0
 800699a:	d042      	beq.n	8006a22 <__kernel_rem_pio2+0x272>
 800699c:	4658      	mov	r0, fp
 800699e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006ab8 <__kernel_rem_pio2+0x308>
 80069a2:	f000 fa5d 	bl	8006e60 <scalbn>
 80069a6:	4630      	mov	r0, r6
 80069a8:	4639      	mov	r1, r7
 80069aa:	ec53 2b10 	vmov	r2, r3, d0
 80069ae:	f7f9 fc17 	bl	80001e0 <__aeabi_dsub>
 80069b2:	4606      	mov	r6, r0
 80069b4:	460f      	mov	r7, r1
 80069b6:	e034      	b.n	8006a22 <__kernel_rem_pio2+0x272>
 80069b8:	4b44      	ldr	r3, [pc, #272]	@ (8006acc <__kernel_rem_pio2+0x31c>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069c0:	f7f9 fdc6 	bl	8000550 <__aeabi_dmul>
 80069c4:	f7fa f85e 	bl	8000a84 <__aeabi_d2iz>
 80069c8:	f7f9 fd58 	bl	800047c <__aeabi_i2d>
 80069cc:	4b40      	ldr	r3, [pc, #256]	@ (8006ad0 <__kernel_rem_pio2+0x320>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	4606      	mov	r6, r0
 80069d2:	460f      	mov	r7, r1
 80069d4:	f7f9 fdbc 	bl	8000550 <__aeabi_dmul>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069e0:	f7f9 fbfe 	bl	80001e0 <__aeabi_dsub>
 80069e4:	f7fa f84e 	bl	8000a84 <__aeabi_d2iz>
 80069e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069ec:	f849 0b04 	str.w	r0, [r9], #4
 80069f0:	4639      	mov	r1, r7
 80069f2:	4630      	mov	r0, r6
 80069f4:	f7f9 fbf6 	bl	80001e4 <__adddf3>
 80069f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a00:	e75d      	b.n	80068be <__kernel_rem_pio2+0x10e>
 8006a02:	d107      	bne.n	8006a14 <__kernel_rem_pio2+0x264>
 8006a04:	f108 33ff 	add.w	r3, r8, #4294967295
 8006a08:	aa0c      	add	r2, sp, #48	@ 0x30
 8006a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a0e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006a12:	e79e      	b.n	8006952 <__kernel_rem_pio2+0x1a2>
 8006a14:	4b2f      	ldr	r3, [pc, #188]	@ (8006ad4 <__kernel_rem_pio2+0x324>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	f7fa f820 	bl	8000a5c <__aeabi_dcmpge>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d143      	bne.n	8006aa8 <__kernel_rem_pio2+0x2f8>
 8006a20:	4681      	mov	r9, r0
 8006a22:	2200      	movs	r2, #0
 8006a24:	2300      	movs	r3, #0
 8006a26:	4630      	mov	r0, r6
 8006a28:	4639      	mov	r1, r7
 8006a2a:	f7f9 fff9 	bl	8000a20 <__aeabi_dcmpeq>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f000 80bf 	beq.w	8006bb2 <__kernel_rem_pio2+0x402>
 8006a34:	f108 33ff 	add.w	r3, r8, #4294967295
 8006a38:	2200      	movs	r2, #0
 8006a3a:	9900      	ldr	r1, [sp, #0]
 8006a3c:	428b      	cmp	r3, r1
 8006a3e:	da6e      	bge.n	8006b1e <__kernel_rem_pio2+0x36e>
 8006a40:	2a00      	cmp	r2, #0
 8006a42:	f000 8089 	beq.w	8006b58 <__kernel_rem_pio2+0x3a8>
 8006a46:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006a4c:	f1ab 0b18 	sub.w	fp, fp, #24
 8006a50:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0f6      	beq.n	8006a46 <__kernel_rem_pio2+0x296>
 8006a58:	4658      	mov	r0, fp
 8006a5a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006ab8 <__kernel_rem_pio2+0x308>
 8006a5e:	f000 f9ff 	bl	8006e60 <scalbn>
 8006a62:	f108 0301 	add.w	r3, r8, #1
 8006a66:	00da      	lsls	r2, r3, #3
 8006a68:	9205      	str	r2, [sp, #20]
 8006a6a:	ec55 4b10 	vmov	r4, r5, d0
 8006a6e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006a70:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006acc <__kernel_rem_pio2+0x31c>
 8006a74:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006a78:	4646      	mov	r6, r8
 8006a7a:	f04f 0a00 	mov.w	sl, #0
 8006a7e:	2e00      	cmp	r6, #0
 8006a80:	f280 80cf 	bge.w	8006c22 <__kernel_rem_pio2+0x472>
 8006a84:	4644      	mov	r4, r8
 8006a86:	2c00      	cmp	r4, #0
 8006a88:	f2c0 80fd 	blt.w	8006c86 <__kernel_rem_pio2+0x4d6>
 8006a8c:	4b12      	ldr	r3, [pc, #72]	@ (8006ad8 <__kernel_rem_pio2+0x328>)
 8006a8e:	461f      	mov	r7, r3
 8006a90:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006a92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a96:	9306      	str	r3, [sp, #24]
 8006a98:	f04f 0a00 	mov.w	sl, #0
 8006a9c:	f04f 0b00 	mov.w	fp, #0
 8006aa0:	2600      	movs	r6, #0
 8006aa2:	eba8 0504 	sub.w	r5, r8, r4
 8006aa6:	e0e2      	b.n	8006c6e <__kernel_rem_pio2+0x4be>
 8006aa8:	f04f 0902 	mov.w	r9, #2
 8006aac:	e754      	b.n	8006958 <__kernel_rem_pio2+0x1a8>
 8006aae:	bf00      	nop
	...
 8006abc:	3ff00000 	.word	0x3ff00000
 8006ac0:	08007598 	.word	0x08007598
 8006ac4:	40200000 	.word	0x40200000
 8006ac8:	3ff00000 	.word	0x3ff00000
 8006acc:	3e700000 	.word	0x3e700000
 8006ad0:	41700000 	.word	0x41700000
 8006ad4:	3fe00000 	.word	0x3fe00000
 8006ad8:	08007558 	.word	0x08007558
 8006adc:	f854 3b04 	ldr.w	r3, [r4], #4
 8006ae0:	b945      	cbnz	r5, 8006af4 <__kernel_rem_pio2+0x344>
 8006ae2:	b123      	cbz	r3, 8006aee <__kernel_rem_pio2+0x33e>
 8006ae4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006ae8:	f844 3c04 	str.w	r3, [r4, #-4]
 8006aec:	2301      	movs	r3, #1
 8006aee:	3201      	adds	r2, #1
 8006af0:	461d      	mov	r5, r3
 8006af2:	e738      	b.n	8006966 <__kernel_rem_pio2+0x1b6>
 8006af4:	1acb      	subs	r3, r1, r3
 8006af6:	e7f7      	b.n	8006ae8 <__kernel_rem_pio2+0x338>
 8006af8:	f108 32ff 	add.w	r2, r8, #4294967295
 8006afc:	ab0c      	add	r3, sp, #48	@ 0x30
 8006afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b02:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006b06:	a90c      	add	r1, sp, #48	@ 0x30
 8006b08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006b0c:	e739      	b.n	8006982 <__kernel_rem_pio2+0x1d2>
 8006b0e:	f108 32ff 	add.w	r2, r8, #4294967295
 8006b12:	ab0c      	add	r3, sp, #48	@ 0x30
 8006b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006b1c:	e7f3      	b.n	8006b06 <__kernel_rem_pio2+0x356>
 8006b1e:	a90c      	add	r1, sp, #48	@ 0x30
 8006b20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	430a      	orrs	r2, r1
 8006b28:	e787      	b.n	8006a3a <__kernel_rem_pio2+0x28a>
 8006b2a:	3401      	adds	r4, #1
 8006b2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006b30:	2a00      	cmp	r2, #0
 8006b32:	d0fa      	beq.n	8006b2a <__kernel_rem_pio2+0x37a>
 8006b34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006b3a:	eb0d 0503 	add.w	r5, sp, r3
 8006b3e:	9b06      	ldr	r3, [sp, #24]
 8006b40:	aa20      	add	r2, sp, #128	@ 0x80
 8006b42:	4443      	add	r3, r8
 8006b44:	f108 0701 	add.w	r7, r8, #1
 8006b48:	3d98      	subs	r5, #152	@ 0x98
 8006b4a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006b4e:	4444      	add	r4, r8
 8006b50:	42bc      	cmp	r4, r7
 8006b52:	da04      	bge.n	8006b5e <__kernel_rem_pio2+0x3ae>
 8006b54:	46a0      	mov	r8, r4
 8006b56:	e6a2      	b.n	800689e <__kernel_rem_pio2+0xee>
 8006b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b5a:	2401      	movs	r4, #1
 8006b5c:	e7e6      	b.n	8006b2c <__kernel_rem_pio2+0x37c>
 8006b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b60:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006b64:	f7f9 fc8a 	bl	800047c <__aeabi_i2d>
 8006b68:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006e30 <__kernel_rem_pio2+0x680>
 8006b6c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006b70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b78:	46b2      	mov	sl, r6
 8006b7a:	f04f 0800 	mov.w	r8, #0
 8006b7e:	9b05      	ldr	r3, [sp, #20]
 8006b80:	4598      	cmp	r8, r3
 8006b82:	dd05      	ble.n	8006b90 <__kernel_rem_pio2+0x3e0>
 8006b84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b88:	3701      	adds	r7, #1
 8006b8a:	eca5 7b02 	vstmia	r5!, {d7}
 8006b8e:	e7df      	b.n	8006b50 <__kernel_rem_pio2+0x3a0>
 8006b90:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006b94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006b98:	f7f9 fcda 	bl	8000550 <__aeabi_dmul>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ba4:	f7f9 fb1e 	bl	80001e4 <__adddf3>
 8006ba8:	f108 0801 	add.w	r8, r8, #1
 8006bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bb0:	e7e5      	b.n	8006b7e <__kernel_rem_pio2+0x3ce>
 8006bb2:	f1cb 0000 	rsb	r0, fp, #0
 8006bb6:	ec47 6b10 	vmov	d0, r6, r7
 8006bba:	f000 f951 	bl	8006e60 <scalbn>
 8006bbe:	ec55 4b10 	vmov	r4, r5, d0
 8006bc2:	4b9d      	ldr	r3, [pc, #628]	@ (8006e38 <__kernel_rem_pio2+0x688>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	4629      	mov	r1, r5
 8006bca:	f7f9 ff47 	bl	8000a5c <__aeabi_dcmpge>
 8006bce:	b300      	cbz	r0, 8006c12 <__kernel_rem_pio2+0x462>
 8006bd0:	4b9a      	ldr	r3, [pc, #616]	@ (8006e3c <__kernel_rem_pio2+0x68c>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	f7f9 fcba 	bl	8000550 <__aeabi_dmul>
 8006bdc:	f7f9 ff52 	bl	8000a84 <__aeabi_d2iz>
 8006be0:	4606      	mov	r6, r0
 8006be2:	f7f9 fc4b 	bl	800047c <__aeabi_i2d>
 8006be6:	4b94      	ldr	r3, [pc, #592]	@ (8006e38 <__kernel_rem_pio2+0x688>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	f7f9 fcb1 	bl	8000550 <__aeabi_dmul>
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f7f9 faf3 	bl	80001e0 <__aeabi_dsub>
 8006bfa:	f7f9 ff43 	bl	8000a84 <__aeabi_d2iz>
 8006bfe:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c00:	f10b 0b18 	add.w	fp, fp, #24
 8006c04:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006c08:	f108 0801 	add.w	r8, r8, #1
 8006c0c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006c10:	e722      	b.n	8006a58 <__kernel_rem_pio2+0x2a8>
 8006c12:	4620      	mov	r0, r4
 8006c14:	4629      	mov	r1, r5
 8006c16:	f7f9 ff35 	bl	8000a84 <__aeabi_d2iz>
 8006c1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c1c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006c20:	e71a      	b.n	8006a58 <__kernel_rem_pio2+0x2a8>
 8006c22:	ab0c      	add	r3, sp, #48	@ 0x30
 8006c24:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006c28:	f7f9 fc28 	bl	800047c <__aeabi_i2d>
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	462b      	mov	r3, r5
 8006c30:	f7f9 fc8e 	bl	8000550 <__aeabi_dmul>
 8006c34:	4652      	mov	r2, sl
 8006c36:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006c3a:	465b      	mov	r3, fp
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f7f9 fc86 	bl	8000550 <__aeabi_dmul>
 8006c44:	3e01      	subs	r6, #1
 8006c46:	4604      	mov	r4, r0
 8006c48:	460d      	mov	r5, r1
 8006c4a:	e718      	b.n	8006a7e <__kernel_rem_pio2+0x2ce>
 8006c4c:	9906      	ldr	r1, [sp, #24]
 8006c4e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006c52:	9106      	str	r1, [sp, #24]
 8006c54:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006c58:	f7f9 fc7a 	bl	8000550 <__aeabi_dmul>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4650      	mov	r0, sl
 8006c62:	4659      	mov	r1, fp
 8006c64:	f7f9 fabe 	bl	80001e4 <__adddf3>
 8006c68:	3601      	adds	r6, #1
 8006c6a:	4682      	mov	sl, r0
 8006c6c:	468b      	mov	fp, r1
 8006c6e:	9b00      	ldr	r3, [sp, #0]
 8006c70:	429e      	cmp	r6, r3
 8006c72:	dc01      	bgt.n	8006c78 <__kernel_rem_pio2+0x4c8>
 8006c74:	42b5      	cmp	r5, r6
 8006c76:	dae9      	bge.n	8006c4c <__kernel_rem_pio2+0x49c>
 8006c78:	ab48      	add	r3, sp, #288	@ 0x120
 8006c7a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006c7e:	e9c5 ab00 	strd	sl, fp, [r5]
 8006c82:	3c01      	subs	r4, #1
 8006c84:	e6ff      	b.n	8006a86 <__kernel_rem_pio2+0x2d6>
 8006c86:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	dc0b      	bgt.n	8006ca4 <__kernel_rem_pio2+0x4f4>
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	dc39      	bgt.n	8006d04 <__kernel_rem_pio2+0x554>
 8006c90:	d05d      	beq.n	8006d4e <__kernel_rem_pio2+0x59e>
 8006c92:	9b02      	ldr	r3, [sp, #8]
 8006c94:	f003 0007 	and.w	r0, r3, #7
 8006c98:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006c9c:	ecbd 8b02 	vpop	{d8}
 8006ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d1f3      	bne.n	8006c92 <__kernel_rem_pio2+0x4e2>
 8006caa:	9b05      	ldr	r3, [sp, #20]
 8006cac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006cb0:	eb0d 0403 	add.w	r4, sp, r3
 8006cb4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006cb8:	4625      	mov	r5, r4
 8006cba:	46c2      	mov	sl, r8
 8006cbc:	f1ba 0f00 	cmp.w	sl, #0
 8006cc0:	f1a5 0508 	sub.w	r5, r5, #8
 8006cc4:	dc6b      	bgt.n	8006d9e <__kernel_rem_pio2+0x5ee>
 8006cc6:	4645      	mov	r5, r8
 8006cc8:	2d01      	cmp	r5, #1
 8006cca:	f1a4 0408 	sub.w	r4, r4, #8
 8006cce:	f300 8087 	bgt.w	8006de0 <__kernel_rem_pio2+0x630>
 8006cd2:	9c05      	ldr	r4, [sp, #20]
 8006cd4:	ab48      	add	r3, sp, #288	@ 0x120
 8006cd6:	441c      	add	r4, r3
 8006cd8:	2000      	movs	r0, #0
 8006cda:	2100      	movs	r1, #0
 8006cdc:	f1b8 0f01 	cmp.w	r8, #1
 8006ce0:	f300 809c 	bgt.w	8006e1c <__kernel_rem_pio2+0x66c>
 8006ce4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006ce8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006cec:	f1b9 0f00 	cmp.w	r9, #0
 8006cf0:	f040 80a6 	bne.w	8006e40 <__kernel_rem_pio2+0x690>
 8006cf4:	9b04      	ldr	r3, [sp, #16]
 8006cf6:	e9c3 7800 	strd	r7, r8, [r3]
 8006cfa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006cfe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006d02:	e7c6      	b.n	8006c92 <__kernel_rem_pio2+0x4e2>
 8006d04:	9d05      	ldr	r5, [sp, #20]
 8006d06:	ab48      	add	r3, sp, #288	@ 0x120
 8006d08:	441d      	add	r5, r3
 8006d0a:	4644      	mov	r4, r8
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	2100      	movs	r1, #0
 8006d10:	2c00      	cmp	r4, #0
 8006d12:	da35      	bge.n	8006d80 <__kernel_rem_pio2+0x5d0>
 8006d14:	f1b9 0f00 	cmp.w	r9, #0
 8006d18:	d038      	beq.n	8006d8c <__kernel_rem_pio2+0x5dc>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006d20:	9c04      	ldr	r4, [sp, #16]
 8006d22:	e9c4 2300 	strd	r2, r3, [r4]
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006d2e:	f7f9 fa57 	bl	80001e0 <__aeabi_dsub>
 8006d32:	ad4a      	add	r5, sp, #296	@ 0x128
 8006d34:	2401      	movs	r4, #1
 8006d36:	45a0      	cmp	r8, r4
 8006d38:	da2b      	bge.n	8006d92 <__kernel_rem_pio2+0x5e2>
 8006d3a:	f1b9 0f00 	cmp.w	r9, #0
 8006d3e:	d002      	beq.n	8006d46 <__kernel_rem_pio2+0x596>
 8006d40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006d44:	4619      	mov	r1, r3
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006d4c:	e7a1      	b.n	8006c92 <__kernel_rem_pio2+0x4e2>
 8006d4e:	9c05      	ldr	r4, [sp, #20]
 8006d50:	ab48      	add	r3, sp, #288	@ 0x120
 8006d52:	441c      	add	r4, r3
 8006d54:	2000      	movs	r0, #0
 8006d56:	2100      	movs	r1, #0
 8006d58:	f1b8 0f00 	cmp.w	r8, #0
 8006d5c:	da09      	bge.n	8006d72 <__kernel_rem_pio2+0x5c2>
 8006d5e:	f1b9 0f00 	cmp.w	r9, #0
 8006d62:	d002      	beq.n	8006d6a <__kernel_rem_pio2+0x5ba>
 8006d64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006d68:	4619      	mov	r1, r3
 8006d6a:	9b04      	ldr	r3, [sp, #16]
 8006d6c:	e9c3 0100 	strd	r0, r1, [r3]
 8006d70:	e78f      	b.n	8006c92 <__kernel_rem_pio2+0x4e2>
 8006d72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006d76:	f7f9 fa35 	bl	80001e4 <__adddf3>
 8006d7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d7e:	e7eb      	b.n	8006d58 <__kernel_rem_pio2+0x5a8>
 8006d80:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006d84:	f7f9 fa2e 	bl	80001e4 <__adddf3>
 8006d88:	3c01      	subs	r4, #1
 8006d8a:	e7c1      	b.n	8006d10 <__kernel_rem_pio2+0x560>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	e7c6      	b.n	8006d20 <__kernel_rem_pio2+0x570>
 8006d92:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006d96:	f7f9 fa25 	bl	80001e4 <__adddf3>
 8006d9a:	3401      	adds	r4, #1
 8006d9c:	e7cb      	b.n	8006d36 <__kernel_rem_pio2+0x586>
 8006d9e:	ed95 7b00 	vldr	d7, [r5]
 8006da2:	ed8d 7b00 	vstr	d7, [sp]
 8006da6:	ed95 7b02 	vldr	d7, [r5, #8]
 8006daa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dae:	ec53 2b17 	vmov	r2, r3, d7
 8006db2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006db6:	f7f9 fa15 	bl	80001e4 <__adddf3>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	460f      	mov	r7, r1
 8006dc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dc6:	f7f9 fa0b 	bl	80001e0 <__aeabi_dsub>
 8006dca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dce:	f7f9 fa09 	bl	80001e4 <__adddf3>
 8006dd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dd6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006dda:	e9c5 6700 	strd	r6, r7, [r5]
 8006dde:	e76d      	b.n	8006cbc <__kernel_rem_pio2+0x50c>
 8006de0:	ed94 7b00 	vldr	d7, [r4]
 8006de4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006de8:	ec51 0b17 	vmov	r0, r1, d7
 8006dec:	4652      	mov	r2, sl
 8006dee:	465b      	mov	r3, fp
 8006df0:	ed8d 7b00 	vstr	d7, [sp]
 8006df4:	f7f9 f9f6 	bl	80001e4 <__adddf3>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	460f      	mov	r7, r1
 8006e00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e04:	f7f9 f9ec 	bl	80001e0 <__aeabi_dsub>
 8006e08:	4652      	mov	r2, sl
 8006e0a:	465b      	mov	r3, fp
 8006e0c:	f7f9 f9ea 	bl	80001e4 <__adddf3>
 8006e10:	3d01      	subs	r5, #1
 8006e12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006e16:	e9c4 6700 	strd	r6, r7, [r4]
 8006e1a:	e755      	b.n	8006cc8 <__kernel_rem_pio2+0x518>
 8006e1c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006e20:	f7f9 f9e0 	bl	80001e4 <__adddf3>
 8006e24:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e28:	e758      	b.n	8006cdc <__kernel_rem_pio2+0x52c>
 8006e2a:	bf00      	nop
 8006e2c:	f3af 8000 	nop.w
	...
 8006e38:	41700000 	.word	0x41700000
 8006e3c:	3e700000 	.word	0x3e700000
 8006e40:	9b04      	ldr	r3, [sp, #16]
 8006e42:	9a04      	ldr	r2, [sp, #16]
 8006e44:	601f      	str	r7, [r3, #0]
 8006e46:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006e4a:	605c      	str	r4, [r3, #4]
 8006e4c:	609d      	str	r5, [r3, #8]
 8006e4e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e52:	60d3      	str	r3, [r2, #12]
 8006e54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e58:	6110      	str	r0, [r2, #16]
 8006e5a:	6153      	str	r3, [r2, #20]
 8006e5c:	e719      	b.n	8006c92 <__kernel_rem_pio2+0x4e2>
 8006e5e:	bf00      	nop

08006e60 <scalbn>:
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	ec55 4b10 	vmov	r4, r5, d0
 8006e66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	462b      	mov	r3, r5
 8006e6e:	b991      	cbnz	r1, 8006e96 <scalbn+0x36>
 8006e70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006e74:	4323      	orrs	r3, r4
 8006e76:	d03d      	beq.n	8006ef4 <scalbn+0x94>
 8006e78:	4b35      	ldr	r3, [pc, #212]	@ (8006f50 <scalbn+0xf0>)
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f7f9 fb66 	bl	8000550 <__aeabi_dmul>
 8006e84:	4b33      	ldr	r3, [pc, #204]	@ (8006f54 <scalbn+0xf4>)
 8006e86:	429e      	cmp	r6, r3
 8006e88:	4604      	mov	r4, r0
 8006e8a:	460d      	mov	r5, r1
 8006e8c:	da0f      	bge.n	8006eae <scalbn+0x4e>
 8006e8e:	a328      	add	r3, pc, #160	@ (adr r3, 8006f30 <scalbn+0xd0>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	e01e      	b.n	8006ed4 <scalbn+0x74>
 8006e96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006e9a:	4291      	cmp	r1, r2
 8006e9c:	d10b      	bne.n	8006eb6 <scalbn+0x56>
 8006e9e:	4622      	mov	r2, r4
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	f7f9 f99e 	bl	80001e4 <__adddf3>
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	460d      	mov	r5, r1
 8006eac:	e022      	b.n	8006ef4 <scalbn+0x94>
 8006eae:	460b      	mov	r3, r1
 8006eb0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006eb4:	3936      	subs	r1, #54	@ 0x36
 8006eb6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006eba:	4296      	cmp	r6, r2
 8006ebc:	dd0d      	ble.n	8006eda <scalbn+0x7a>
 8006ebe:	2d00      	cmp	r5, #0
 8006ec0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006f38 <scalbn+0xd8>)
 8006ec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ec6:	da02      	bge.n	8006ece <scalbn+0x6e>
 8006ec8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006f40 <scalbn+0xe0>)
 8006eca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ece:	a31a      	add	r3, pc, #104	@ (adr r3, 8006f38 <scalbn+0xd8>)
 8006ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed4:	f7f9 fb3c 	bl	8000550 <__aeabi_dmul>
 8006ed8:	e7e6      	b.n	8006ea8 <scalbn+0x48>
 8006eda:	1872      	adds	r2, r6, r1
 8006edc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006ee0:	428a      	cmp	r2, r1
 8006ee2:	dcec      	bgt.n	8006ebe <scalbn+0x5e>
 8006ee4:	2a00      	cmp	r2, #0
 8006ee6:	dd08      	ble.n	8006efa <scalbn+0x9a>
 8006ee8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006eec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006ef0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ef4:	ec45 4b10 	vmov	d0, r4, r5
 8006ef8:	bd70      	pop	{r4, r5, r6, pc}
 8006efa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006efe:	da08      	bge.n	8006f12 <scalbn+0xb2>
 8006f00:	2d00      	cmp	r5, #0
 8006f02:	a10b      	add	r1, pc, #44	@ (adr r1, 8006f30 <scalbn+0xd0>)
 8006f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f08:	dac1      	bge.n	8006e8e <scalbn+0x2e>
 8006f0a:	a10f      	add	r1, pc, #60	@ (adr r1, 8006f48 <scalbn+0xe8>)
 8006f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f10:	e7bd      	b.n	8006e8e <scalbn+0x2e>
 8006f12:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006f16:	3236      	adds	r2, #54	@ 0x36
 8006f18:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006f1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006f20:	4620      	mov	r0, r4
 8006f22:	4b0d      	ldr	r3, [pc, #52]	@ (8006f58 <scalbn+0xf8>)
 8006f24:	4629      	mov	r1, r5
 8006f26:	2200      	movs	r2, #0
 8006f28:	e7d4      	b.n	8006ed4 <scalbn+0x74>
 8006f2a:	bf00      	nop
 8006f2c:	f3af 8000 	nop.w
 8006f30:	c2f8f359 	.word	0xc2f8f359
 8006f34:	01a56e1f 	.word	0x01a56e1f
 8006f38:	8800759c 	.word	0x8800759c
 8006f3c:	7e37e43c 	.word	0x7e37e43c
 8006f40:	8800759c 	.word	0x8800759c
 8006f44:	fe37e43c 	.word	0xfe37e43c
 8006f48:	c2f8f359 	.word	0xc2f8f359
 8006f4c:	81a56e1f 	.word	0x81a56e1f
 8006f50:	43500000 	.word	0x43500000
 8006f54:	ffff3cb0 	.word	0xffff3cb0
 8006f58:	3c900000 	.word	0x3c900000
 8006f5c:	00000000 	.word	0x00000000

08006f60 <floor>:
 8006f60:	ec51 0b10 	vmov	r0, r1, d0
 8006f64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f6c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006f70:	2e13      	cmp	r6, #19
 8006f72:	460c      	mov	r4, r1
 8006f74:	4605      	mov	r5, r0
 8006f76:	4680      	mov	r8, r0
 8006f78:	dc34      	bgt.n	8006fe4 <floor+0x84>
 8006f7a:	2e00      	cmp	r6, #0
 8006f7c:	da17      	bge.n	8006fae <floor+0x4e>
 8006f7e:	a332      	add	r3, pc, #200	@ (adr r3, 8007048 <floor+0xe8>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f7f9 f92e 	bl	80001e4 <__adddf3>
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f7f9 fd70 	bl	8000a70 <__aeabi_dcmpgt>
 8006f90:	b150      	cbz	r0, 8006fa8 <floor+0x48>
 8006f92:	2c00      	cmp	r4, #0
 8006f94:	da55      	bge.n	8007042 <floor+0xe2>
 8006f96:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006f9a:	432c      	orrs	r4, r5
 8006f9c:	2500      	movs	r5, #0
 8006f9e:	42ac      	cmp	r4, r5
 8006fa0:	4c2b      	ldr	r4, [pc, #172]	@ (8007050 <floor+0xf0>)
 8006fa2:	bf08      	it	eq
 8006fa4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	e023      	b.n	8006ff6 <floor+0x96>
 8006fae:	4f29      	ldr	r7, [pc, #164]	@ (8007054 <floor+0xf4>)
 8006fb0:	4137      	asrs	r7, r6
 8006fb2:	ea01 0307 	and.w	r3, r1, r7
 8006fb6:	4303      	orrs	r3, r0
 8006fb8:	d01d      	beq.n	8006ff6 <floor+0x96>
 8006fba:	a323      	add	r3, pc, #140	@ (adr r3, 8007048 <floor+0xe8>)
 8006fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc0:	f7f9 f910 	bl	80001e4 <__adddf3>
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f7f9 fd52 	bl	8000a70 <__aeabi_dcmpgt>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d0eb      	beq.n	8006fa8 <floor+0x48>
 8006fd0:	2c00      	cmp	r4, #0
 8006fd2:	bfbe      	ittt	lt
 8006fd4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006fd8:	4133      	asrlt	r3, r6
 8006fda:	18e4      	addlt	r4, r4, r3
 8006fdc:	ea24 0407 	bic.w	r4, r4, r7
 8006fe0:	2500      	movs	r5, #0
 8006fe2:	e7e1      	b.n	8006fa8 <floor+0x48>
 8006fe4:	2e33      	cmp	r6, #51	@ 0x33
 8006fe6:	dd0a      	ble.n	8006ffe <floor+0x9e>
 8006fe8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006fec:	d103      	bne.n	8006ff6 <floor+0x96>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	f7f9 f8f7 	bl	80001e4 <__adddf3>
 8006ff6:	ec41 0b10 	vmov	d0, r0, r1
 8006ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ffe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007002:	f04f 37ff 	mov.w	r7, #4294967295
 8007006:	40df      	lsrs	r7, r3
 8007008:	4207      	tst	r7, r0
 800700a:	d0f4      	beq.n	8006ff6 <floor+0x96>
 800700c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007048 <floor+0xe8>)
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	f7f9 f8e7 	bl	80001e4 <__adddf3>
 8007016:	2200      	movs	r2, #0
 8007018:	2300      	movs	r3, #0
 800701a:	f7f9 fd29 	bl	8000a70 <__aeabi_dcmpgt>
 800701e:	2800      	cmp	r0, #0
 8007020:	d0c2      	beq.n	8006fa8 <floor+0x48>
 8007022:	2c00      	cmp	r4, #0
 8007024:	da0a      	bge.n	800703c <floor+0xdc>
 8007026:	2e14      	cmp	r6, #20
 8007028:	d101      	bne.n	800702e <floor+0xce>
 800702a:	3401      	adds	r4, #1
 800702c:	e006      	b.n	800703c <floor+0xdc>
 800702e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007032:	2301      	movs	r3, #1
 8007034:	40b3      	lsls	r3, r6
 8007036:	441d      	add	r5, r3
 8007038:	4545      	cmp	r5, r8
 800703a:	d3f6      	bcc.n	800702a <floor+0xca>
 800703c:	ea25 0507 	bic.w	r5, r5, r7
 8007040:	e7b2      	b.n	8006fa8 <floor+0x48>
 8007042:	2500      	movs	r5, #0
 8007044:	462c      	mov	r4, r5
 8007046:	e7af      	b.n	8006fa8 <floor+0x48>
 8007048:	8800759c 	.word	0x8800759c
 800704c:	7e37e43c 	.word	0x7e37e43c
 8007050:	bff00000 	.word	0xbff00000
 8007054:	000fffff 	.word	0x000fffff

08007058 <_init>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	bf00      	nop
 800705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705e:	bc08      	pop	{r3}
 8007060:	469e      	mov	lr, r3
 8007062:	4770      	bx	lr

08007064 <_fini>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr
